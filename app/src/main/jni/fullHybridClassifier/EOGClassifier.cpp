//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: EOGClassifier.cpp
//
// MATLAB Coder version            : 3.1
// C/C++ source code generated on  : 25-Apr-2017 19:42:25
//

// Include Files
#include "rt_nonfinite.h"
#include "EOGClassifier.h"

// Type Definitions
#ifndef struct_emxArray__common
#define struct_emxArray__common

struct emxArray__common
{
  void *data;
  int *size;
  int allocatedSize;
  int numDimensions;
  boolean_T canFreeData;
};

#endif                                 //struct_emxArray__common

#ifndef struct_emxArray_boolean_T
#define struct_emxArray_boolean_T

struct emxArray_boolean_T
{
  boolean_T *data;
  int *size;
  int allocatedSize;
  int numDimensions;
  boolean_T canFreeData;
};

#endif                                 //struct_emxArray_boolean_T

#ifndef struct_emxArray_int32_T
#define struct_emxArray_int32_T

struct emxArray_int32_T
{
  int *data;
  int *size;
  int allocatedSize;
  int numDimensions;
  boolean_T canFreeData;
};

#endif                                 //struct_emxArray_int32_T

#ifndef struct_emxArray_real_T
#define struct_emxArray_real_T

struct emxArray_real_T
{
  double *data;
  int *size;
  int allocatedSize;
  int numDimensions;
  boolean_T canFreeData;
};

#endif                                 //struct_emxArray_real_T

// Function Declarations
static void b_diff(const emxArray_real_T *x, emxArray_real_T *y);
static double b_knn(const double tsX[26]);
static void b_merge(int idx[99], double x[99], int offset, int np, int nq, int
                    iwork[99], double xwork[99]);
static void b_merge_block(int idx[99], double x[99], int offset, int n, int
  preSortLevel, int iwork[99], double xwork[99]);
static void b_sort(double x[99], int idx[99]);
static double b_std(const double varargin_1[250]);
static void count_nonfinites(const emxArray_real_T *b, int nb, int *nMInf, int
  *nFinite, int *nPInf, int *nNaN);
static void diff(const double x[1000], double y[999]);
static void do_vectors(const emxArray_real_T *a, const emxArray_real_T *b,
  emxArray_real_T *c, emxArray_int32_T *ia, emxArray_int32_T *ib);
static void emxEnsureCapacity(emxArray__common *emxArray, int oldNumel, int
  elementSize);
static void emxFree_boolean_T(emxArray_boolean_T **pEmxArray);
static void emxFree_int32_T(emxArray_int32_T **pEmxArray);
static void emxFree_real_T(emxArray_real_T **pEmxArray);
static void emxInit_boolean_T(emxArray_boolean_T **pEmxArray, int numDimensions);
static void emxInit_int32_T(emxArray_int32_T **pEmxArray, int numDimensions);
static void emxInit_int32_T1(emxArray_int32_T **pEmxArray, int numDimensions);
static void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions);
static void emxInit_real_T1(emxArray_real_T **pEmxArray, int numDimensions);
static double eps(double x);
static void featureExtractionEOG2(const double X[250], double LTH1, double LTH2,
  double UTH2, emxArray_real_T *F);
static void featureExtractionEOG3(const double X[250], double LTH1, double LTH2,
  double UTH1, double UTH2, double F[11]);
static void filter(double b[7], double a[7], const double x[1036], const double
                   zi[6], double y[1036]);
static void findLocalMaxima(const double yTemp[250], emxArray_real_T *iPk,
  emxArray_real_T *iInflect);
static void findpeaks(const double Yin[250], emxArray_real_T *Ypk,
                      emxArray_real_T *Xpk);
static void flipud(double x[1036]);
static void hist(const double Y[3], const emxArray_real_T *X, emxArray_real_T
                 *no);
static double knn(const double tsX[22]);
static void merge(int idx[278], double x[278], int offset, int np, int nq, int
                  iwork[278], double xwork[278]);
static void merge_block(int idx[278], double x[278], int offset, int n, int
  preSortLevel, int iwork[278], double xwork[278]);
static void merge_pow2_block(int idx[278], double x[278], int offset);
static double skip_to_last_equal_value(int *k, const emxArray_real_T *x);
static void sort(double x[278], int idx[278]);
static double trapz(const emxArray_real_T *x);

// Function Definitions

//
// Arguments    : const emxArray_real_T *x
//                emxArray_real_T *y
// Return Type  : void
//
static void b_diff(const emxArray_real_T *x, emxArray_real_T *y)
{
  int iyLead;
  int orderForDim;
  emxArray_real_T *work;
  int ySize_idx_0;
  int m;
  double tmp1;
  int k;
  double tmp2;
  if (x->size[0] == 0) {
    iyLead = y->size[0];
    y->size[0] = 0;
    emxEnsureCapacity((emxArray__common *)y, iyLead, (int)sizeof(double));
  } else {
    if (x->size[0] - 1 <= 1) {
      orderForDim = x->size[0] - 1;
    } else {
      orderForDim = 1;
    }

    if (orderForDim < 1) {
      iyLead = y->size[0];
      y->size[0] = 0;
      emxEnsureCapacity((emxArray__common *)y, iyLead, (int)sizeof(double));
    } else {
      emxInit_real_T1(&work, 1);
      ySize_idx_0 = x->size[0] - orderForDim;
      iyLead = work->size[0];
      work->size[0] = orderForDim;
      emxEnsureCapacity((emxArray__common *)work, iyLead, (int)sizeof(double));
      iyLead = y->size[0];
      y->size[0] = ySize_idx_0;
      emxEnsureCapacity((emxArray__common *)y, iyLead, (int)sizeof(double));
      if (!(y->size[0] == 0)) {
        ySize_idx_0 = 1;
        iyLead = 0;
        work->data[0] = x->data[0];
        if (orderForDim >= 2) {
          for (m = 1; m < orderForDim; m++) {
            tmp1 = x->data[ySize_idx_0];
            for (k = 0; k + 1 <= m; k++) {
              tmp2 = work->data[k];
              work->data[k] = tmp1;
              tmp1 -= tmp2;
            }

            work->data[m] = tmp1;
            ySize_idx_0++;
          }
        }

        for (m = orderForDim + 1; m <= x->size[0]; m++) {
          tmp1 = x->data[ySize_idx_0];
          for (k = 0; k + 1 <= orderForDim; k++) {
            tmp2 = work->data[k];
            work->data[k] = tmp1;
            tmp1 -= tmp2;
          }

          ySize_idx_0++;
          y->data[iyLead] = tmp1;
          iyLead++;
        }
      }

      emxFree_real_T(&work);
    }
  }
}

//
// function yfit = knnclassification(testsamplesX,samplesX, samplesY, Knn, type)
//  Classify using the Nearest neighbor algorithm
//  Inputs:
//   tX    - Train samples
//  tY    - Train labels
//    tsX (testsamplesX) - Test  samples to classify
//  Knn         - Number of nearest neighbors
//
//  Outputs
//  result - Predicted targets
// if nargin < 5
//     type = '2norm';
// end
// Arguments    : const double tsX[26]
// Return Type  : double
//
static double b_knn(const double tsX[26])
{
  double yfit;
  emxArray_real_T *Uc;
  int khi;
  int k;
  int nInf;
  int nNaN;
  static const signed char tY[99] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1,
    1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
    2, 2, 2, 2, 1, 1, 1 };

  static const signed char idx[99] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 24, 25, 26, 27,
    28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 51, 52, 53, 54, 55, 57, 58,
    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 89, 90, 91, 97,
    98, 99, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 37, 38, 39,
    43, 44, 45, 46, 47, 48, 49, 50, 56, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
    84, 85, 86, 87, 88, 92, 93, 94, 95, 96 };

  int nb;
  int n;
  int exitg2;
  boolean_T p;
  int i2;
  double x[2574];
  double y[2574];
  int b_k;
  static const double tX[2574] = { 0.000551432728712292, 0.000550399700463786,
    0.000548510403014007, 0.000571579064947186, 0.000569927580257488,
    0.000567073037602756, 0.000576926411538841, 0.000572154082255237,
    0.000574854708986371, 0.000611100400925535, 0.000608937776489264,
    0.000606976791501694, 0.000600451305312134, 0.000594405523977957,
    0.000593118706926388, 0.000601834489738073, 0.000598961489569931,
    0.000595653094242136, 0.000565629470433097, 0.000585715796895615,
    0.000584514871862233, 0.000602782619960606, 0.000595536761996432,
    0.000438315419082145, 0.000441607417545678, 0.000438875552968653,
    0.000654969895538033, 0.000652071966819221, 0.000651004725802267,
    0.000649826325538414, 0.000641845152202308, 0.00063829802764445,
    0.000637151127481978, 0.00059872226467719, 0.000596180032147412,
    0.00059481519163007, 0.000582130501857259, 0.000580139707249668,
    0.000578936155326826, 0.000617208082834397, 0.000617608406368013,
    0.000615776868906625, 0.000621146547193474, 0.000618575293561904,
    0.000616904849595831, 0.000553317121580112, 0.000582077862883622,
    0.000579533388103122, 0.000559187218660414, 0.000557243194178301,
    0.000481947271577469, 0.000482408680705821, 0.000480723531489544,
    0.000583888411047522, 0.000579655766160469, 0.000600746231813899,
    0.000430764828770272, 0.000427231273889946, 0.000422289909204656,
    0.000422272604502955, 0.000413062511402472, 0.000412063368129445,
    0.000409096946401611, 0.00040966114336689, 0.00051987878878122,
    0.000514274237636547, 0.000513558942755637, 0.000566975792670001,
    0.000563150400188447, 0.000563365226376799, 0.000542503385161024,
    0.000539714709253993, 0.000535253612990537, 0.000489589637579707,
    0.00051076424145639, 0.000506979836440533, 0.000507345071395746,
    0.000508092664857444, 0.000505428173423542, 0.000550163649263067,
    0.000566432937190545, 0.000559249083686773, 0.000550978049658277,
    0.000578723856942547, 0.000576064794913207, 0.000600172941827096,
    0.000598279131126736, 0.00059598559153136, 0.000584970485533001,
    0.000584208531576055, 0.000580693229396465, 0.000584717428269074,
    0.000584813368823678, 0.000579505246330711, 0.000583520224775568,
    0.000579718744153301, 0.000571005552660511, 0.000572731584879254,
    0.000567938000090818, -0.000410709596137187, -0.000411855029333043,
    -0.000413980203279057, -0.000411842728192319, -0.000413679534238508,
    -0.000416949701572467, -0.000425753725326826, -0.000431117126872979,
    -0.000427963820389642, -0.000474379412172358, -0.00047680098259947,
    -0.000479056438171494, -0.000422952829561821, -0.000429470537617553,
    -0.000430895875616568, -0.000395474181451487, -0.000398950288918884,
    -0.000403118968947422, -0.000499473133027585, -0.000477311915538667,
    -0.000478684260237095, -0.000401345553242819, -0.000418059887818511,
    -0.000390543711307502, -0.000386177538372865, -0.000389439654906253,
    -0.000358277924676008, -0.000361704430613677, -0.000362944085432606,
    -0.00036430272622747, -0.00038006201996629, -0.000384040411071947,
    -0.000385395490699619, -0.000428482200708684, -0.000431399604830007,
    -0.000432957176705259, -0.000440589948492912, -0.000442807895737014,
    -0.000444184245130404, -0.000424307926740804, -0.000423859628822192,
    -0.00042594304102778, -0.000440404142237155, -0.000443284646206166,
    -0.000445207212555847, -0.000391178337928594, -0.000401053428060088,
    -0.000405098561579975, -0.000397160742494102, -0.000400323100544755,
    -0.000346503237789168, -0.000346010186509702, -0.000347898074679293,
    -0.000363167267559783, -0.000367871760894816, -0.000401952594976443,
    -0.000360388582539263, -0.000371160848778798, -0.000376554644989462,
    -0.000376504069996607, -0.000335790242420799, -0.00033656723708243,
    -0.000339863980576052, -0.000339225175622091, -0.00040785371990735,
    -0.000414135781887197, -0.000414983683647824, -0.000450837176972844,
    -0.000455086907743004, -0.000454856974231606, -0.000404498610693294,
    -0.000407051265016704, -0.000412024763032814, -0.000452144384571715,
    -0.000442587698791507, -0.000446865116920246, -0.000456152199750674,
    -0.000451884069123914, -0.000455264267264264, -0.000495490149237274,
    -0.000477300610213086, -0.000483423656106097, -0.000470377842326967,
    -0.000439335730709179, -0.000442418399556333, -0.000443617391958211,
    -0.000445828788451584, -0.000448591428310899, -0.000362483890922259,
    -0.000363264295975801, -0.000367275932583535, -0.000365313877116278,
    -0.000364507629416264, -0.000373643971779207, -0.000401164011063308,
    -0.000405605299945952, -0.000373270814340436, -0.000371302221118006,
    -0.000376728691362098, 0.000962142324849479, 0.000962254729796829,
    0.000962490606293064, 0.000983421793139505, 0.000983607114495996,
    0.000984022739175223, 0.00100268013686567, 0.00100327120912822,
    0.00100281852937601, 0.00108547981309789, 0.00108573875908873,
    0.00108603322967319, 0.00102340413487395, 0.00102387606159551,
    0.00102401458254296, 0.00099730867118956, 0.000997911778488815,
    0.000998772063189558, 0.00106510260346068, 0.00106302771243428,
    0.00106319913209933, 0.00100412817320343, 0.00101359664981494,
    0.000828859130389647, 0.000827784955918543, 0.000828315207874906,
    0.00101324782021404, 0.0010137763974329, 0.00101394881123487,
    0.00101412905176588, 0.0010219071721686, 0.0010223384387164,
    0.0010225466181816, 0.00102720446538587, 0.00102757963697742,
    0.00102777236833533, 0.00102272045035017, 0.00102294760298668,
    0.00102312040045723, 0.0010415160095752, 0.0010414680351902,
    0.00104171990993441, 0.00106155068943063, 0.00106185993976807,
    0.00106211206215168, 0.000944495459508706, 0.000983131290943711,
    0.000984631949683098, 0.000956347961154516, 0.000957566294723056,
    0.000828450509366638, 0.000828418867215523, 0.000828621606168837,
    0.000947055678607305, 0.000947527527055284, 0.00100269882679034,
    0.000791153411309535, 0.000798392122668743, 0.000798844554194118,
    0.000798776674499562, 0.000748852753823271, 0.000748630605211876,
    0.000748960926977664, 0.000748886318988982, 0.000927732508688569,
    0.000928410019523744, 0.00092854262640346, 0.00101781296964285,
    0.00101823730793145, 0.00101822220060841, 0.000947001995854319,
    0.000946765974270698, 0.000947278376023352, 0.000941734022151422,
    0.000953351940247897, 0.00095384495336078, 0.00096349727114642,
    0.000959976733981358, 0.000960692440687806, 0.00104565379850034,
    0.00104373354740363, 0.00104267273979287, 0.00102135589198524,
    0.00101805958765173, 0.00101848319446954, 0.00104379033378531,
    0.00104410791957832, 0.00104457701984226, 0.00094745437645526,
    0.000947472827551856, 0.00094796916198, 0.000950031305385352,
    0.000949320998239942, 0.000953149218109918, 0.000984684235838876,
    0.000985324044099253, 0.000944276367000947, 0.000944033805997261,
    0.000944666691452916, 0.000148811054597141, 0.000148861406758757,
    0.000148985826702551, 0.000157596595315441, 0.000157646664899863,
    0.000157878024451965, 0.000158237779862574, 0.000158398568286632,
    0.000158313333802466, 0.000226873977824012, 0.000226960985087132,
    0.000226838506233749, 0.000208415139124563, 0.000210307146590587,
    0.00021038493923595, 0.000209080033392698, 0.000209313881440534,
    0.000209366541557259, 0.000213170919564738, 0.000237912083923322,
    0.000238015289471273, 0.000228387711543502, 0.000228809371117779,
    0.000154764542695675, 0.000154983262420094, 0.000155178036097078,
    0.00018067506703142, 0.000181538078293608, 0.00018159841031301,
    0.000177764573146615, 0.000177119369417705, 0.000177253746075623,
    0.000177305414721337, 0.000170853055606108, 0.000170940785409946,
    0.000171009704525524, 0.000222976793554749, 0.000223085293300185,
    0.00021993547010657, 0.000166415764583016, 0.000166406248966728,
    0.000166508145059307, 0.000210494320388255, 0.000210580329544241,
    0.00021047458706054, 0.000191291009269225, 0.000214790012528472,
    0.000214949529016287, 0.000213979291887359, 0.000214181544379125,
    0.000135353056843735, 0.000135463396076237, 0.000135539857062548,
    0.000162119606427706, 0.00016229086457633, 0.000209541394541916,
    0.000122843224155617, 0.000123441763636172, 0.000123150022452032,
    0.000123402511241202, 0.000115970645074179, 0.00011598774704073,
    0.000116062992869282, 0.000115993520949881, 0.000147602189997688,
    0.000147815415616884, 0.000147888077481073, 0.000159894239222251,
    0.000160021276946582, 0.000159965822767915, 0.000150898379396453,
    0.000150764834981138, 0.000150918174854675, 0.000198748386960762,
    0.000221907914241479, 0.00022210853074091, 0.000213274919050034,
    0.00022358305458944, 0.000223800781845366, 0.000217694389976368,
    0.000237270545257714, 0.000237734701097301, 0.000180820842239674,
    0.000196652385536066, 0.000196845155308001, 0.000209663533307278,
    0.000209833707498206, 0.000209869980531745, 0.000160519933083795,
    0.000160573436975663, 0.000160778748511988, 0.000194164857319479,
    0.000194800374534985, 0.00017864866609424, 0.000204327633713054,
    0.000204497001881275, 0.000156905163676381, 0.000157131614653992,
    0.000157056608631077, 0.00183160757538857, 0.00182157549656762,
    0.00212784878090466, 0.00198280304454086, 0.00191366399784969,
    0.00194426976896474, 0.00192200215103022, 0.00187544897643572,
    0.00190154569404422, 0.00354315107750696, 0.00349786761067673,
    0.00314934792921398, 0.0034887386390339, 0.00330512378213642,
    0.00328012861947915, 0.00496858832604752, 0.00519835125875165,
    0.00505639678901351, 0.00457249117396456, 0.00475838413587597,
    0.004713605939536, 0.00422223987716547, 0.00435599316375527,
    0.00530504047563161, 0.00541277269292126, 0.00532316318480489,
    0.00204708792073515, 0.00201074350977812, 0.00199795125039161,
    0.000778167089418976, 0.00195516967204187, 0.00191654855218837,
    0.00190407398815377, 0.00188858315801495, 0.00186094615673563,
    0.00184616011170602, 0.00416832248498093, 0.00411690914882737,
    0.00280170642908023, 0.00198173382806511, 0.00198565345052789,
    0.00196777615697332, 0.00404945151961161, 0.00394181623116943,
    0.00363108266626845, 0.00401087971215019, 0.00392321343586729,
    0.00385834786988589, 0.00427453593214471, 0.00421984572098431,
    0.00233579695084287, 0.00234157482484028, 0.00232011985494523,
    0.00198307909320314, 0.00193709507256201, 0.00554318044577948,
    0.00258661398093769, 0.0025413508904101, 0.00242343278706464,
    0.0024230233434259, 0.00247810047084767, 0.00246519846707677,
    0.00237757323682766, 0.00238471540775181, 0.00210516364812269,
    0.00211455447468929, 0.00219065044738504, 0.00191232808836739,
    0.00187131305340204, 0.00187363861171509, 0.00194001495809036,
    0.00190941642715516, 0.00186162312030201, 0.00485087292793827,
    0.00496193021898537, 0.00487954820191054, 0.0053029800510366,
    0.00531783951589072, 0.00522125791571316, 0.00478024812546455,
    0.00522581359665202, 0.00518991256258898, 0.00579517855387777,
    0.00518978274990613, 0.0054198340959462, 0.00586715354147619,
    0.00579676130859027, 0.00544433321999886, 0.00179231479160166,
    0.00178467697726992, 0.00175033857688316, 0.007760730145149,
    0.00776761500825147, 0.00619825942360123, 0.00508403276597532,
    0.00521290291059313, 0.00181848148508245, 0.001835272562582,
    0.00211216789534998, 0.00258572055996329, 0.00266165945669943,
    0.00270951800775298, 0.00216384742977607, 0.0022466065578355,
    0.00235458136832888, 0.0022195461207994, 0.00236073181250594,
    0.00225405223547318, 0.00372209284246727, 0.00384156310983537,
    0.00396625938476821, 0.00197355946150312, 0.00354230590775952,
    0.00368943461343023, 0.00501614970976693, 0.0053089855549776,
    0.00525727521899152, 0.00340337254578846, 0.00463296428284019,
    0.00469240582249811, 0.00483515743294632, 0.00463361227559098,
    0.00334997964614293, 0.00329526896132061, 0.00342365228127417,
    0.00377564084521113, 0.00395384782924559, 0.00398684358936357,
    0.00407618711646715, 0.00334046335408711, 0.00343581260975266,
    0.0035219199310869, 0.00267914446565486, 0.00290037748703504,
    0.0029882605528923, 0.00481511976989447, 0.00497476358200407,
    0.00503523489847412, 0.00237289597743863, 0.00236495732532737,
    0.00245548270086552, 0.00428261687465586, 0.00444112591208571,
    0.00451089320372203, 0.00453251464852827, 0.00553504924551655,
    0.00571391189297009, 0.00612880006445431, 0.0062280764278186,
    0.00317870895442544, 0.00316783985848088, 0.00320938025643892,
    0.00344235664476575, 0.00366658680620814, 0.00473562833891576,
    0.00267003886620848, 0.00233258480466739, 0.00216083647960855,
    0.00233108179514479, 0.00245731608625982, 0.00248760680008311,
    0.00259788457981273, 0.00258663048489169, 0.00219517138698953,
    0.00234249754932899, 0.00235721005666349, 0.00197126796671422,
    0.00208697751485312, 0.00208364885170034, 0.00260500532212323,
    0.00223516388715886, 0.00237112689816689, 0.00344569969293313,
    0.00453408632190045, 0.00470530369665091, 0.0025215569080096,
    0.00405178535665991, 0.00421424865227894, 0.00269303454060937,
    0.00422880666079627, 0.00420681409781908, 0.00257220009141348,
    0.00459315396290807, 0.00470931589298633, 0.00489397508930845,
    0.00511075675310387, 0.00521644273761596, 0.00341935667220816,
    0.00351137142332352, 0.00367131244506042, 0.00619088466331414,
    0.00685938985049361, 0.00725894889845609, 0.00565341429887829,
    0.00560691449396046, 0.0031262681249227, 0.00352828881878126,
    0.00298012069113602, -4.81071162424739E-5, -4.81127364898415E-5,
    -4.81245303146532E-5, -4.47009905972502E-5, -4.47094142952726E-5,
    -4.47283063261465E-5, -4.77466731840794E-5, -4.7774819482296E-5,
    -4.77532633036197E-5, -4.71947744825171E-5, -4.7206033003858E-5,
    -4.72188360727473E-5, -5.11702067436977E-5, -5.11938030797755E-5,
    -5.12007291271478E-5, -2.55720172099887E-5, -2.55874814997132E-5,
    -2.56095400817835E-5, -5.07191715933658E-5, -5.06203672587754E-5,
    -5.0628530099968E-5, -3.58617204715509E-5, -1.16505362047695E-5,
    -2.43782097173425E-5, -2.43466163505454E-5, -2.43622119963208E-5,
    -2.89499377204012E-5, -2.81604554842472E-5, -2.81652447565242E-5,
    -2.81702514379412E-5, -3.19345991302687E-5, -3.19480762098874E-5,
    -3.19545818181749E-5, -4.1088178615435E-5, -4.11031854790968E-5,
    -4.11108947334132E-5, -4.87009738261986E-5, -4.87117906184134E-5,
    -4.87200190693919E-5, -4.73416367988728E-5, -4.73394561450093E-5,
    -4.73509049970184E-5, -4.61543778013317E-5, -4.6167823468177E-5,
    -4.61787853109425E-5, -2.95154831096471E-5, -1.11719464879967E-5,
    -1.1188999428217E-5, -1.00668206437317E-5, -1.00796452076111E-5,
    -3.76568413348472E-5, -3.7655403055251E-5, -3.76646184622199E-5,
    -3.64252184079733E-5, -3.64433664252032E-5, -2.22821961508965E-5,
    -4.16396532268176E-5, -4.2020638035197E-5, -4.20444502207431E-5,
    -4.20408776052401E-5, -3.74426376911636E-5, -3.74315302605938E-5,
    -3.74480463488832E-5, -3.74443159494491E-5, -4.41777385089795E-5,
    -4.42100009297021E-5, -4.42163155430219E-5, -4.84672842687069E-5,
    -4.84874908538786E-5, -4.84867714575431E-5, -4.50953331359199E-5,
    -4.50840940128904E-5, -4.51084940963501E-5, 2.19007912128238E-5,
    -3.81340776099159E-5, -3.81537981344312E-5, -1.03601857112518E-5,
    -2.2856588904318E-5, -2.28736295401859E-5, 3.37307676935594E-5,
    3.36688241097945E-5, 3.36346045094474E-5, -3.92829189225094E-5,
    -3.91561379866048E-5, -3.91724305565208E-5, -3.26184479307909E-5,
    -3.26283724868225E-5, -3.26430318700706E-5, -3.78981750582104E-5,
    -3.78989131020742E-5, -3.79187664792E-5, -1.02153903804877E-5,
    -1.02077526692467E-5, -1.02489163237626E-5, -3.28228078612959E-5,
    -3.28441348033084E-5, -4.10554942174325E-5, -4.10449480868374E-5,
    -4.1072464845779E-5, 21.0, 22.0, 22.0, 16.0, 17.0, 18.0, 16.0, 17.0, 16.0,
    25.0, 26.0, 27.0, 12.0, 26.0, 28.0, 31.0, 34.0, 34.0, 26.0, 33.0, 33.0, 27.0,
    30.0, 22.0, 23.0, 24.0, 22.0, 27.0, 27.0, 28.0, 24.0, 24.0, 25.0, 20.0, 23.0,
    24.0, 34.0, 35.0, 35.0, 18.0, 18.0, 19.0, 29.0, 30.0, 30.0, 28.0, 35.0, 36.0,
    39.0, 39.0, 22.0, 22.0, 22.0, 24.0, 26.0, 30.0, 17.0, 18.0, 14.0, 17.0, 17.0,
    17.0, 18.0, 18.0, 16.0, 17.0, 17.0, 14.0, 15.0, 15.0, 20.0, 16.0, 17.0, 25.0,
    32.0, 33.0, 17.0, 27.0, 28.0, 18.0, 27.0, 27.0, 18.0, 32.0, 32.0, 31.0, 33.0,
    33.0, 25.0, 26.0, 27.0, 39.0, 49.0, 52.0, 36.0, 36.0, 21.0, 25.0, 21.0, 11.0,
    11.0, 12.0, 12.0, 11.0, 12.0, 11.0, 11.0, 11.0, 20.0, 20.0, 17.0, 20.0, 19.0,
    19.0, 29.0, 30.0, 27.0, 28.0, 30.0, 30.0, 24.0, 25.0, 36.0, 36.0, 36.0, 13.0,
    13.0, 13.0, 6.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 23.0, 23.0, 16.0, 11.0,
    11.0, 11.0, 24.0, 23.0, 20.0, 23.0, 23.0, 23.0, 25.0, 25.0, 14.0, 14.0, 14.0,
    12.0, 12.0, 35.0, 15.0, 15.0, 14.0, 14.0, 15.0, 15.0, 14.0, 14.0, 12.0, 13.0,
    15.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 27.0, 28.0, 28.0, 32.0, 32.0, 32.0,
    28.0, 31.0, 34.0, 33.0, 30.0, 31.0, 32.0, 32.0, 28.0, 11.0, 11.0, 11.0, 41.0,
    41.0, 37.0, 29.0, 29.0, 11.0, 11.0, 12.0, 13.0, 13.0, 12.0, 14.0, 14.0, 14.0,
    14.0, 14.0, 14.0, 28.0, 28.0, 28.0, 26.0, 26.0, 26.0, 26.0, 25.0, 24.0, 29.0,
    31.0, 31.0, 31.0, 30.0, 14.0, 14.0, 14.0, 18.0, 18.0, 18.0, 17.0, 17.0, 17.0,
    17.0, 16.0, 16.0, 16.0, 28.0, 28.0, 27.0, 14.0, 14.0, 14.0, 26.0, 26.0, 26.0,
    25.0, 28.0, 28.0, 29.0, 29.0, 13.0, 13.0, 13.0, 16.0, 16.0, 25.0, 10.0, 10.0,
    10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0,
    14.0, 14.0, 27.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 15.0, 21.0,
    20.0, 23.0, 23.0, 23.0, 16.0, 16.0, 16.0, 17.0, 17.0, 11.0, 25.0, 24.0, 15.0,
    15.0, 14.0, 13.0, 13.0, 13.0, 15.0, 15.0, 15.0, 14.0, 14.0, 14.0, 29.0, 29.0,
    29.0, 28.0, 27.0, 27.0, 27.0, 27.0, 28.0, 21.0, 31.0, 31.0, 30.0, 32.0, 17.0,
    17.0, 17.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 16.0, 16.0, 16.0, 28.0,
    28.0, 28.0, 15.0, 15.0, 15.0, 27.0, 27.0, 27.0, 17.0, 27.0, 27.0, 27.0, 27.0,
    10.0, 10.0, 10.0, 14.0, 14.0, 28.0, 10.0, 11.0, 11.0, 11.0, 9.0, 9.0, 9.0,
    9.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 13.0, 14.0, 14.0, 21.0, 31.0, 31.0,
    26.0, 33.0, 33.0, 25.0, 34.0, 35.0, 18.0, 25.0, 25.0, 27.0, 27.0, 27.0, 14.0,
    14.0, 14.0, 21.0, 21.0, 22.0, 24.0, 25.0, 14.0, 13.0, 15.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
    2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
    2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,
    2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0,
    2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    49.0, 49.0, 49.0, 40.0, 40.0, 40.0, 73.0, 73.0, 73.0, 64.0, 64.0, 64.0, 63.0,
    63.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.0,
    62.0, 62.0, 0.0, 0.0, 0.0, 60.0, 60.0, 60.0, 68.0, 69.0, 69.0, 74.0, 74.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 77.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.0, 70.0, 70.0, 71.0, 71.0, 71.0,
    73.0, 73.0, 73.0, 65.0, 66.0, 66.0, 69.0, 69.0, 69.0, 0.0, 0.0, 0.0, 69.0,
    69.0, 69.0, 70.0, 70.0, 0.0, 0.0, 0.0, 2.13625200391652E-5,
    2.16416596460789E-5, 2.18761266157059E-5, 1.32825799852249E-5,
    1.9409092244306E-5, 1.30677344655787E-5, 1.2424195940064E-5,
    1.8157601368685E-5, 1.23624614682718E-5, 2.71483997506152E-5,
    3.12031630913472E-5, 2.82944305596779E-5, 2.77808986028121E-5,
    2.93564191578675E-5, 2.87288139718477E-5, 2.3699481452154E-5,
    2.39202755369883E-5, 2.25098089636443E-5, 3.56190713621435E-5,
    3.58286759332059E-5, 3.58814375853571E-5, 2.99396402646013E-5,
    2.9489295244419E-5, 5.37225859910214E-5, 5.44245795676164E-5,
    5.36626363207049E-5, 2.61535644620446E-5, 2.80133857127708E-5,
    2.66908825145287E-5, 2.67267821221928E-5, 3.05888038358741E-5,
    3.21242278346501E-5, 3.0534387897784E-5, 1.89430321716295E-5,
    3.20654248667126E-5, 1.86169000027756E-5, 2.97838643232469E-5,
    2.84988824714603E-5, 2.92806787791082E-5, 1.13086669778661E-5,
    1.1071618545134E-5, 2.54263959532107E-5, 3.66316726715592E-5,
    3.71590091735519E-5, 3.62076469349474E-5, 2.04129233339788E-5,
    2.26628203642565E-5, 2.13809574866764E-5, 5.48634653036394E-5,
    5.51006547702902E-5, 2.76939364247515E-5, 2.76507505630698E-5,
    2.7586073895596E-5, 1.50132820315856E-5, 1.60604023262154E-5,
    3.57591433552095E-5, 1.7518920288857E-5, 1.82836716386199E-5,
    1.85028284543671E-5, 6.91426637615204E-5, 4.16857805103214E-5,
    3.53213582929952E-5, 3.60423682779427E-5, 3.61712183174313E-5,
    3.2763016705832E-5, 3.62057151918062E-5, 3.40199702415257E-5,
    4.5035578662732E-5, 4.23618803558103E-5, 4.24128904455669E-5,
    2.3403023070925E-5, 2.47593246207377E-5, 2.5794929542903E-5,
    2.82937141935728E-5, 2.87516832614018E-5, 3.02371011161377E-5,
    0.000115421648794812, 0.000113772737775127, 0.000112517850938549,
    6.52259548881752E-5, 6.87411060005703E-5, 7.13827449035829E-5,
    6.0458672574345E-5, 6.66796841396383E-5, 6.76425272903576E-5,
    5.3407177107919E-5, 5.3349410821496E-5, 5.41882284799004E-5,
    2.84902407258538E-5, 2.76485553028586E-5, 2.74114210584955E-5,
    7.67714943572116E-5, 7.35477706859512E-5, 7.09452407285627E-5,
    4.59000613989241E-5, 4.57166773052197E-5, 1.44213743333614E-5,
    1.47154778993529E-5, 1.4518299438438E-5, -2.36412908522773E-5,
    -2.33334619068912E-5, -2.30380888496659E-5, -1.05122333429623E-5,
    -1.14873683132267E-5, -1.02929350523593E-5, -1.46122671966513E-5,
    -1.50567189149038E-5, -1.46852116907162E-5, -1.80810164376463E-5,
    -2.71741300034071E-5, -2.57259205503876E-5, -1.64486497032989E-5,
    -2.93457406753819E-5, -1.73925871742373E-5, -2.56988231267873E-5,
    -2.54292102633907E-5, -2.74070775127923E-5, -2.99779129085692E-5,
    -2.9393546876951E-5, -2.93426190779471E-5, -1.86993267487781E-5,
    -1.96323589270919E-5, -3.32884314853901E-5, -3.3365139737546E-5,
    -3.43758783245644E-5, -1.210069164828E-5, -1.44502006430675E-5,
    -1.54511409841162E-5, -1.5467442465723E-5, -2.25485194452015E-5,
    -2.08445801066023E-5, -2.25837499036093E-5, -2.54394054641693E-5,
    -2.86075286602015E-5, -2.57700817202809E-5, -4.31272206580706E-5,
    -4.08860852252795E-5, -3.96460240358674E-5, -1.19614012103202E-5,
    -1.23040529269879E-5, -1.29138210206625E-5, -6.62988470037592E-5,
    -6.55944126499488E-5, -6.6993173202356E-5, -1.65925929152594E-5,
    -1.42675848488075E-5, -1.51932657535346E-5, -7.44453784210608E-5,
    -7.40192566794214E-5, -2.09452800443042E-5, -1.54563577961674E-5,
    -1.55313818349333E-5, -1.55505174030471E-5, -1.42499680667555E-5,
    -3.06201082315537E-5, -1.79418386931722E-5, -1.81278561962934E-5,
    -3.13867483493512E-5, -3.60630022339845E-5, -7.37916874022869E-5,
    -3.30562596233111E-5, -3.04104329965248E-5, -3.02688620325843E-5,
    -2.72578952493155E-5, -5.01801900120847E-5, -2.74103057467689E-5,
    -4.21758157491504E-5, -4.51007751285166E-5, -4.50544134774585E-5,
    -2.32981932447623E-5, -2.17285994562148E-5, -2.05659705466636E-5,
    -2.24547881158949E-5, -3.80837719219123E-5, -3.58933309453141E-5,
    -0.000101213857361173, -0.000105869049531821, -0.000107555537241743,
    -8.82671070670952E-5, -9.36993344148041E-5, -9.00568465456763E-5,
    -3.375342611903E-5, -7.5251316110229E-5, -7.39678901688645E-5,
    -3.1211506855651E-5, -3.14700844940116E-5, -3.02588901646337E-5,
    -2.71523804553852E-5, -2.79403018145275E-5, -2.81444435861512E-5,
    -8.28614803452613E-5, -8.57276191063327E-5, -8.70005553965218E-5,
    -2.18786014969683E-5, -2.21242965813548E-5, -1.27576939679297E-5,
    -1.24516113680494E-5, -1.26727472171174E-5, 4.50038108914425E-5,
    4.497512155297E-5, 4.49142154653718E-5, 2.37948133281872E-5,
    3.08964605575327E-5, 2.3360669517938E-5, 2.70364631367153E-5,
    3.32143202835888E-5, 2.7047673158988E-5, 4.52294161882615E-5,
    5.83772930947543E-5, 5.40203511100655E-5, 4.4229548306111E-5,
    5.87021598332494E-5, 4.6121401146085E-5, 4.93983045789413E-5,
    4.9349485800379E-5, 4.99168864764366E-5, 6.55969842707127E-5,
    6.52222228101569E-5, 6.52240566633042E-5, 4.86389670133794E-5,
    4.9121654171511E-5, 8.70110174764115E-5, 8.77897193051624E-5,
    8.80385146452692E-5, 3.82542561103246E-5, 4.24635863558383E-5,
    4.21420234986449E-5, 4.21942245879158E-5, 5.31373232810755E-5,
    5.29688079412524E-5, 5.31181378013933E-5, 4.43824376357988E-5,
    6.06729535269141E-5, 4.43869817230565E-5, 7.29110849813175E-5,
    6.93849676967398E-5, 6.89267028149756E-5, 2.32700681881863E-5,
    2.3375671472122E-5, 3.83402169738732E-5, 0.000102930519675318,
    0.000102753421823501, 0.000103200820137303, 3.70055162492382E-5,
    3.6930405213064E-5, 3.6574223240211E-5, 0.0001293088437247,
    0.000129119911449712, 4.86392164690556E-5, 4.31071083592372E-5,
    4.31174557305293E-5, 3.05637994346326E-5, 3.03103703929709E-5,
    6.63792515867633E-5, 3.54607589820292E-5, 3.64115278349133E-5,
    4.98895768037183E-5, 0.000105205665995505, 0.000115477467912608,
    6.83776179163062E-5, 6.64528012744676E-5, 6.64400803500157E-5,
    6.00209119551475E-5, 8.63859052038909E-5, 6.14302759882946E-5,
    8.72113944118824E-5, 8.74626554843269E-5, 8.74673039230254E-5,
    4.67012163156873E-5, 4.64879240769524E-5, 4.63609000895666E-5,
    5.07485023094676E-5, 6.6835455183314E-5, 6.61304320614517E-5,
    0.000216635506155984, 0.000219641787306948, 0.000220073388180292,
    0.00015349306195527, 0.000162440440415374, 0.000161439591449259,
    9.4212098693375E-5, 0.000141931000249867, 0.000141610417459222,
    8.461868396357E-5, 8.48194953155076E-5, 8.4447118644534E-5,
    5.5642621181239E-5, 5.55888571173861E-5, 5.55558646446467E-5,
    0.000159632974702473, 0.000159275389792284, 0.000157945796125085,
    6.77786628958924E-5, 6.78409738865746E-5, 2.71790683012911E-5,
    2.71670892674023E-5, 2.71910466555554E-5, 9.79967134149003E-6,
    9.94390893006446E-6, 1.0058147721717E-5, 5.19848594691581E-6,
    6.12382416018823E-6, 5.33947567164384E-6, 6.2051866499456E-6,
    6.56637171091509E-6, 6.16569227636222E-6, 7.67830313591777E-6,
    1.06195686835761E-5, 9.64665264440838E-6, 8.42299741496451E-6,
    9.78336811244468E-6, 9.12698826970892E-6, 1.10446504354873E-5,
    1.10164930687413E-5, 1.15800528095741E-5, 1.14619862905385E-5,
    1.23192300190703E-5, 1.21961939089786E-5, 9.94460033278023E-6,
    9.78591427372427E-6, 1.63644891098985E-5, 1.60821879043367E-5,
    1.75719584010914E-5, 7.9970302171452E-6, 8.60530108004309E-6,
    8.69828747856318E-6, 8.59483653073065E-6, 9.78735382992623E-6,
    8.61832654556435E-6, 9.11925354595694E-6, 8.3198333047199E-6,
    1.00776087904941E-5, 8.37959213257651E-6, 1.46233053503182E-5,
    1.36799835449383E-5, 1.36451685763192E-5, 5.02153607879451E-6,
    5.44176773998923E-6, 7.3982083607636E-6, 1.88581273499193E-5,
    1.88901182492596E-5, 1.88844293495433E-5, 8.36318043917424E-6,
    8.67899000590226E-6, 8.15483209746688E-6, 2.63453872134824E-5,
    2.68549213111796E-5, 8.66810362373088E-6, 7.70377965350552E-6,
    7.87812993865641E-6, 5.53472704673387E-6, 5.47667521633036E-6,
    1.27455144371321E-5, 7.83917557155446E-6, 6.96926679518418E-6,
    9.24006950634273E-6, 1.39876332467264E-5, 1.46090003531014E-5,
    1.1591703843256E-5, 1.05692876389725E-5, 1.16791396236062E-5,
    9.86157298165425E-6, 1.18240680829801E-5, 1.03868753294658E-5,
    1.4986166721081E-5, 1.35479278958309E-5, 1.35796355353068E-5,
    8.73244944391433E-6, 8.41826410523238E-6, 8.01403960148656E-6,
    9.37160651862947E-6, 1.27741511572476E-5, 1.28256389510906E-5,
    4.45191804612508E-5, 4.57306084699547E-5, 4.59867210308187E-5,
    2.746725337057E-5, 3.50625427047668E-5, 3.50254303472466E-5,
    1.76291079414118E-5, 2.69643333864926E-5, 2.74239413433663E-5,
    1.61167014864984E-5, 1.63125083442062E-5, 1.60288200894426E-5,
    9.00761986456833E-6, 9.06904942257059E-6, 9.5598739249812E-6,
    3.24404467287721E-5, 3.59660934364688E-5, 3.5699815826278E-5,
    1.51086117799875E-5, 1.50350655979766E-5, 6.70867277300071E-6,
    6.04873147302108E-6, 6.48360736019987E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.00054613695242152, 0.000553865523295996, 0.000545454110654338, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00103602133502249, 0.00104091333056966, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000288406443927535,
    0.000124156748754376, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000218604876806285,
    0.000125489192422636, 0.000125641812036358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00303564164847655, 0.00293815478888053, 0.00289645208746806,
    0.00186266597868329, 0.00207280117202093, 0.00229786361359609,
    0.000965289742377968, 0.00116654459100772, 0.00122806027537225,
    0.000545422101712879, 0.000544791311535512, 0.000596139327007364, 0.0, 0.0,
    0.0, 0.00110060732406457, 0.00178799862542657, 0.00162985554518957,
    0.000398345113564635, 0.000396699866931174, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000612259214126708,
    0.000604953420955934, 0.000618941930760512, 0.0, 0.0, 0.0,
    0.00113777570264078, 0.00113173349200776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.000260500435005776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00201812966081885, 0.00239986648120435,
    0.00250158573735314, 0.000750369649880638, 0.00181411811326571,
    0.00167882850325425, 0.0, 0.00101123880765931, 0.000991818391957646, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0019782343000231, 0.00216446903189974,
    0.00220150931569064, 0.0, 0.0, 0.0, 0.0, 0.0, -1.36375184519523E-6,
    -1.36288247130212E-6, -1.361036832284E-6, 2.37948133281872E-7,
    5.61753828318777E-7, -2.40831644514825E-7, -1.28745062555787E-6,
    2.96556431103471E-7, -1.28798443614229E-6, -2.66055389342715E-6,
    2.01301010671567E-6, -3.97208464044599E-7, -8.04173605565655E-7,
    -4.65890157406741E-7, -8.23596449037232E-7, -7.71848509045957E-7,
    -7.71085715630922E-7, -7.79951351194322E-7, -3.64427690392848E-6,
    -3.62345682278649E-6, -3.6235587035169E-6, -6.39986408070782E-7,
    -6.63806137452851E-7, -1.9775231244639E-6, -1.99522089329914E-6,
    -2.00087533284703E-6, -1.15921988213105E-6, -4.08303714959983E-7,
    -3.39855028214878E-7, -3.40276004741257E-7, -3.32108270506722E-6,
    -3.31055049632827E-6, -3.31988361258708E-6, -1.70701683214611E-6,
    6.25494366256846E-7, -1.70719160473294E-6, 2.43036949937725E-6,
    -8.67312096209247E-7, -8.61583785187195E-7, -3.47314450569945E-7,
    -3.48890618986895E-7, 2.28215577225436E-7, -1.49174666196114E-6,
    -1.48918002642755E-6, -1.49566405996092E-6, 5.28650232131974E-7,
    5.59551594137333E-7, 5.54154897578954E-7, -2.1916753173678E-6,
    -2.18847307541884E-6, 2.79535726833653E-7, -1.95941401632896E-6,
    -1.9598843513877E-6, -7.64094985865816E-7, -7.57759259824273E-7,
    -1.16454827345199E-6, -2.0859269989429E-6, -2.02286265749518E-6,
    -3.64157494917652E-7, 1.34879058968596E-6, -2.62448790710473E-6,
    7.77018385412571E-7, -3.69182229302598E-6, -3.69111557500087E-6,
    -2.72822327068852E-6, -7.19882543365758E-7, -3.37528988946673E-7,
    -4.59007339009907E-6, -4.60329765706983E-6, -4.60354231173818E-6,
    -1.79620062752643E-6, -1.8595169630781E-6, -1.85443600358267E-6,
    -7.92945348585431E-7, -8.79413883990974E-7, -8.8173909415269E-7,
    -3.93882738465426E-6, -3.99348704194451E-6, -4.00133433055076E-6,
    -2.51627970418476E-6, -2.49908369869807E-6, -2.48368602229629E-6,
    -1.49543013799008E-6, -1.99902817253334E-6, -1.99451292196088E-6,
    -1.26296543229209E-6, -1.28514386841678E-6, -1.27950179764445E-6,
    3.09125673229105E-6, 3.08826983985478E-6, 3.08643692470259E-6,
    2.31352137249961E-6, 1.09092732734441E-6, 2.2890695090592E-6,
    -1.41205547699776E-6, -1.41335362263697E-6, -1.35895341506456E-6,
    -1.35835446337012E-6, -1.35955233277777E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 11.0, 0.0, 0.0, 0.0, 18.0, 18.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 23.0, 30.0, 31.0,
    11.0, 24.0, 23.0, 0.0, 16.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 29.0, 31.0,
    31.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0,
    12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.0, 22.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 4.0,
    4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36.0, 35.0, 35.0, 38.0, 40.0, 43.0, 19.0,
    21.0, 22.0, 12.0, 12.0, 13.0, 0.0, 0.0, 0.0, 18.0, 30.0, 28.0, 10.0, 10.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 24.0, 24.0, 24.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 77.0, 78.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  double dist[99];
  int c_k;
  int b_idx[99];
  double s;
  double b_tY[3];
  emxArray_real_T *varargin_1;
  boolean_T exitg1;
  emxInit_real_T1(&Uc, 1);
  khi = Uc->size[0];
  Uc->size[0] = 99;
  emxEnsureCapacity((emxArray__common *)Uc, khi, (int)sizeof(double));
  for (k = 0; k < 99; k++) {
    Uc->data[k] = tY[idx[k] - 1];
  }

  count_nonfinites(Uc, 99, &k, &khi, &nInf, &nNaN);
  nb = -1;
  if (k > 0) {
    nb = 0;
  }

  khi += k;
  while (k + 1 <= khi) {
    n = (int)Uc->data[k];
    do {
      exitg2 = 0;
      k++;
      if (k + 1 > khi) {
        exitg2 = 1;
      } else {
        p = (std::fabs((double)n - Uc->data[k]) < eps((double)n / 2.0));
        if (!p) {
          exitg2 = 1;
        }
      }
    } while (exitg2 == 0);

    nb++;
    Uc->data[nb] = n;
  }

  if (nInf > 0) {
    nb++;
    Uc->data[nb] = Uc->data[khi];
  }

  k = khi + nInf;
  for (n = 1; n <= nNaN; n++) {
    nb++;
    Uc->data[nb] = Uc->data[(k + n) - 1];
  }

  khi = Uc->size[0];
  if (1 > nb + 1) {
    i2 = -1;
  } else {
    i2 = nb;
  }

  Uc->size[0] = i2 + 1;
  emxEnsureCapacity((emxArray__common *)Uc, khi, (int)sizeof(double));
  for (khi = 0; khi < 99; khi++) {
    for (n = 0; n < 26; n++) {
      x[khi + 99 * n] = tX[khi + 99 * n] - tsX[n];
    }
  }

  for (b_k = 1; b_k < 2575; b_k++) {
    c_k = b_k;
    y[c_k - 1] = x[c_k - 1] * x[c_k - 1];
  }

  for (n = 0; n < 99; n++) {
    s = y[n];
    for (k = 0; k < 25; k++) {
      s += y[n + (k + 1) * 99];
    }

    dist[n] = s;
  }

  b_sort(dist, b_idx);
  for (n = 0; n < 3; n++) {
    b_tY[n] = tY[b_idx[n] - 1];
  }

  emxInit_real_T(&varargin_1, 2);
  hist(b_tY, Uc, varargin_1);
  khi = 1;
  n = varargin_1->size[1];
  s = varargin_1->data[0];
  nInf = 0;
  if (varargin_1->size[1] > 1) {
    if (rtIsNaN(varargin_1->data[0])) {
      k = 2;
      exitg1 = false;
      while ((!exitg1) && (k <= n)) {
        khi = k;
        if (!rtIsNaN(varargin_1->data[k - 1])) {
          s = varargin_1->data[k - 1];
          nInf = k - 1;
          exitg1 = true;
        } else {
          k++;
        }
      }
    }

    if (khi < varargin_1->size[1]) {
      while (khi + 1 <= n) {
        if (varargin_1->data[khi] > s) {
          s = varargin_1->data[khi];
          nInf = khi;
        }

        khi++;
      }
    }
  }

  emxFree_real_T(&varargin_1);
  yfit = Uc->data[nInf];
  emxFree_real_T(&Uc);
  return yfit;
}

//
// Arguments    : int idx[99]
//                double x[99]
//                int offset
//                int np
//                int nq
//                int iwork[99]
//                double xwork[99]
// Return Type  : void
//
static void b_merge(int idx[99], double x[99], int offset, int np, int nq, int
                    iwork[99], double xwork[99])
{
  int n;
  int qend;
  int p;
  int iout;
  int exitg1;
  if ((np == 0) || (nq == 0)) {
  } else {
    n = np + nq;
    for (qend = 0; qend + 1 <= n; qend++) {
      iwork[qend] = idx[offset + qend];
      xwork[qend] = x[offset + qend];
    }

    p = 0;
    n = np;
    qend = np + nq;
    iout = offset - 1;
    do {
      exitg1 = 0;
      iout++;
      if (xwork[p] <= xwork[n]) {
        idx[iout] = iwork[p];
        x[iout] = xwork[p];
        if (p + 1 < np) {
          p++;
        } else {
          exitg1 = 1;
        }
      } else {
        idx[iout] = iwork[n];
        x[iout] = xwork[n];
        if (n + 1 < qend) {
          n++;
        } else {
          n = iout - p;
          while (p + 1 <= np) {
            idx[(n + p) + 1] = iwork[p];
            x[(n + p) + 1] = xwork[p];
            p++;
          }

          exitg1 = 1;
        }
      }
    } while (exitg1 == 0);
  }
}

//
// Arguments    : int idx[99]
//                double x[99]
//                int offset
//                int n
//                int preSortLevel
//                int iwork[99]
//                double xwork[99]
// Return Type  : void
//
static void b_merge_block(int idx[99], double x[99], int offset, int n, int
  preSortLevel, int iwork[99], double xwork[99])
{
  int nPairs;
  int bLen;
  int tailOffset;
  int nTail;
  nPairs = n >> preSortLevel;
  bLen = 1 << preSortLevel;
  while (nPairs > 1) {
    if ((nPairs & 1) != 0) {
      nPairs--;
      tailOffset = bLen * nPairs;
      nTail = n - tailOffset;
      if (nTail > bLen) {
        b_merge(idx, x, offset + tailOffset, bLen, nTail - bLen, iwork, xwork);
      }
    }

    tailOffset = bLen << 1;
    nPairs >>= 1;
    for (nTail = 1; nTail <= nPairs; nTail++) {
      b_merge(idx, x, offset + (nTail - 1) * tailOffset, bLen, bLen, iwork,
              xwork);
    }

    bLen = tailOffset;
  }

  if (n > bLen) {
    b_merge(idx, x, offset, bLen, n - bLen, iwork, xwork);
  }
}

//
// Arguments    : double x[99]
//                int idx[99]
// Return Type  : void
//
static void b_sort(double x[99], int idx[99])
{
  double x4[4];
  signed char idx4[4];
  int m;
  double xwork[99];
  int nNaNs;
  int ib;
  int k;
  signed char perm[4];
  int i2;
  int iwork[99];
  int i3;
  int i4;
  memset(&idx[0], 0, 99U * sizeof(int));
  for (m = 0; m < 4; m++) {
    x4[m] = 0.0;
    idx4[m] = 0;
  }

  memset(&xwork[0], 0, 99U * sizeof(double));
  nNaNs = -98;
  ib = 0;
  for (k = 0; k < 99; k++) {
    if (rtIsNaN(x[k])) {
      idx[-nNaNs] = k + 1;
      xwork[-nNaNs] = x[k];
      nNaNs++;
    } else {
      ib++;
      idx4[ib - 1] = (signed char)(k + 1);
      x4[ib - 1] = x[k];
      if (ib == 4) {
        ib = (k - nNaNs) - 101;
        if (x4[0] <= x4[1]) {
          m = 1;
          i2 = 2;
        } else {
          m = 2;
          i2 = 1;
        }

        if (x4[2] <= x4[3]) {
          i3 = 3;
          i4 = 4;
        } else {
          i3 = 4;
          i4 = 3;
        }

        if (x4[m - 1] <= x4[i3 - 1]) {
          if (x4[i2 - 1] <= x4[i3 - 1]) {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i2;
            perm[2] = (signed char)i3;
            perm[3] = (signed char)i4;
          } else if (x4[i2 - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i3;
            perm[2] = (signed char)i2;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i3;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)i2;
          }
        } else if (x4[m - 1] <= x4[i4 - 1]) {
          if (x4[i2 - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)i3;
            perm[1] = (signed char)m;
            perm[2] = (signed char)i2;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)i3;
            perm[1] = (signed char)m;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)i2;
          }
        } else {
          perm[0] = (signed char)i3;
          perm[1] = (signed char)i4;
          perm[2] = (signed char)m;
          perm[3] = (signed char)i2;
        }

        idx[ib] = idx4[perm[0] - 1];
        idx[ib + 1] = idx4[perm[1] - 1];
        idx[ib + 2] = idx4[perm[2] - 1];
        idx[ib + 3] = idx4[perm[3] - 1];
        x[ib] = x4[perm[0] - 1];
        x[ib + 1] = x4[perm[1] - 1];
        x[ib + 2] = x4[perm[2] - 1];
        x[ib + 3] = x4[perm[3] - 1];
        ib = 0;
      }
    }
  }

  if (ib > 0) {
    for (m = 0; m < 4; m++) {
      perm[m] = 0;
    }

    if (ib == 1) {
      perm[0] = 1;
    } else if (ib == 2) {
      if (x4[0] <= x4[1]) {
        perm[0] = 1;
        perm[1] = 2;
      } else {
        perm[0] = 2;
        perm[1] = 1;
      }
    } else if (x4[0] <= x4[1]) {
      if (x4[1] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 2;
        perm[2] = 3;
      } else if (x4[0] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 3;
        perm[2] = 2;
      } else {
        perm[0] = 3;
        perm[1] = 1;
        perm[2] = 2;
      }
    } else if (x4[0] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 1;
      perm[2] = 3;
    } else if (x4[1] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 3;
      perm[2] = 1;
    } else {
      perm[0] = 3;
      perm[1] = 2;
      perm[2] = 1;
    }

    for (k = 1; k <= ib; k++) {
      idx[(k - nNaNs) - ib] = idx4[perm[k - 1] - 1];
      x[(k - nNaNs) - ib] = x4[perm[k - 1] - 1];
    }
  }

  m = (nNaNs + 98) >> 1;
  for (k = 1; k <= m; k++) {
    ib = idx[k - nNaNs];
    idx[k - nNaNs] = idx[99 - k];
    idx[99 - k] = ib;
    x[k - nNaNs] = xwork[99 - k];
    x[99 - k] = xwork[k - nNaNs];
  }

  if (((nNaNs + 98) & 1) != 0) {
    x[(m - nNaNs) + 1] = xwork[(m - nNaNs) + 1];
  }

  if (1 - nNaNs > 1) {
    memset(&iwork[0], 0, 99U * sizeof(int));
    b_merge_block(idx, x, 0, 1 - nNaNs, 2, iwork, xwork);
  }
}

//
// Arguments    : const double varargin_1[250]
// Return Type  : double
//
static double b_std(const double varargin_1[250])
{
  double y;
  int ix;
  double xbar;
  int k;
  double r;
  ix = 0;
  xbar = varargin_1[0];
  for (k = 0; k < 249; k++) {
    ix++;
    xbar += varargin_1[ix];
  }

  xbar /= 250.0;
  ix = 0;
  r = varargin_1[0] - xbar;
  y = r * r;
  for (k = 0; k < 249; k++) {
    ix++;
    r = varargin_1[ix] - xbar;
    y += r * r;
  }

  y /= 249.0;
  return std::sqrt(y);
}

//
// Arguments    : const emxArray_real_T *b
//                int nb
//                int *nMInf
//                int *nFinite
//                int *nPInf
//                int *nNaN
// Return Type  : void
//
static void count_nonfinites(const emxArray_real_T *b, int nb, int *nMInf, int
  *nFinite, int *nPInf, int *nNaN)
{
  int k;
  k = 0;
  while ((k + 1 <= nb) && rtIsInf(b->data[k]) && (b->data[k] < 0.0)) {
    k++;
  }

  *nMInf = k;
  k = nb;
  while ((k >= 1) && rtIsNaN(b->data[k - 1])) {
    k--;
  }

  *nNaN = nb - k;
  while ((k >= 1) && rtIsInf(b->data[k - 1]) && (b->data[k - 1] > 0.0)) {
    k--;
  }

  *nPInf = (nb - k) - *nNaN;
  *nFinite = k - *nMInf;
}

//
// Arguments    : const double x[1000]
//                double y[999]
// Return Type  : void
//
static void diff(const double x[1000], double y[999])
{
  int ixLead;
  int iyLead;
  double work;
  int m;
  double tmp2;
  ixLead = 1;
  iyLead = 0;
  work = x[0];
  for (m = 0; m < 999; m++) {
    tmp2 = work;
    work = x[ixLead];
    tmp2 = x[ixLead] - tmp2;
    ixLead++;
    y[iyLead] = tmp2;
    iyLead++;
  }
}

//
// Arguments    : const emxArray_real_T *a
//                const emxArray_real_T *b
//                emxArray_real_T *c
//                emxArray_int32_T *ia
//                emxArray_int32_T *ib
// Return Type  : void
//
static void do_vectors(const emxArray_real_T *a, const emxArray_real_T *b,
  emxArray_real_T *c, emxArray_int32_T *ia, emxArray_int32_T *ib)
{
  int na;
  int nb;
  int ncmax;
  int ibfirst;
  int nc;
  int nia;
  int nib;
  int iafirst;
  int ialast;
  int iblast;
  int b_ialast;
  double ak;
  int b_iblast;
  double bk;
  boolean_T p;
  emxArray_int32_T *b_ia;
  emxArray_int32_T *b_ib;
  emxArray_real_T *b_c;
  na = a->size[0];
  nb = b->size[0];
  ncmax = a->size[0] + b->size[0];
  ibfirst = c->size[0];
  c->size[0] = ncmax;
  emxEnsureCapacity((emxArray__common *)c, ibfirst, (int)sizeof(double));
  ibfirst = ia->size[0];
  ia->size[0] = a->size[0];
  emxEnsureCapacity((emxArray__common *)ia, ibfirst, (int)sizeof(int));
  ibfirst = ib->size[0];
  ib->size[0] = b->size[0];
  emxEnsureCapacity((emxArray__common *)ib, ibfirst, (int)sizeof(int));
  nc = -1;
  nia = -1;
  nib = 0;
  iafirst = 1;
  ialast = 1;
  ibfirst = 0;
  iblast = 1;
  while ((ialast <= na) && (iblast <= nb)) {
    b_ialast = ialast;
    ak = skip_to_last_equal_value(&b_ialast, a);
    ialast = b_ialast;
    b_iblast = iblast;
    bk = skip_to_last_equal_value(&b_iblast, b);
    iblast = b_iblast;
    if ((std::fabs(bk - ak) < eps(bk / 2.0)) || (rtIsInf(ak) && rtIsInf(bk) &&
         ((ak > 0.0) == (bk > 0.0)))) {
      p = true;
    } else {
      p = false;
    }

    if (p) {
      nc++;
      c->data[nc] = ak;
      nia++;
      ia->data[nia] = iafirst;
      ialast = b_ialast + 1;
      iafirst = b_ialast + 1;
      iblast = b_iblast + 1;
      ibfirst = b_iblast;
    } else {
      if ((ak < bk) || rtIsNaN(bk)) {
        p = true;
      } else {
        p = false;
      }

      if (p) {
        nc++;
        nia++;
        c->data[nc] = ak;
        ia->data[nia] = iafirst;
        ialast = b_ialast + 1;
        iafirst = b_ialast + 1;
      } else {
        nc++;
        nib++;
        c->data[nc] = bk;
        ib->data[nib - 1] = ibfirst + 1;
        iblast = b_iblast + 1;
        ibfirst = b_iblast;
      }
    }
  }

  while (ialast <= na) {
    iafirst = ialast;
    ak = skip_to_last_equal_value(&iafirst, a);
    nc++;
    nia++;
    c->data[nc] = ak;
    ia->data[nia] = ialast;
    ialast = iafirst + 1;
  }

  while (iblast <= nb) {
    iafirst = iblast;
    bk = skip_to_last_equal_value(&iafirst, b);
    nc++;
    nib++;
    c->data[nc] = bk;
    ib->data[nib - 1] = iblast;
    iblast = iafirst + 1;
  }

  if (a->size[0] > 0) {
    if (1 > nia + 1) {
      iafirst = -1;
    } else {
      iafirst = nia;
    }

    emxInit_int32_T1(&b_ia, 1);
    ibfirst = b_ia->size[0];
    b_ia->size[0] = iafirst + 1;
    emxEnsureCapacity((emxArray__common *)b_ia, ibfirst, (int)sizeof(int));
    for (ibfirst = 0; ibfirst <= iafirst; ibfirst++) {
      b_ia->data[ibfirst] = ia->data[ibfirst];
    }

    ibfirst = ia->size[0];
    ia->size[0] = b_ia->size[0];
    emxEnsureCapacity((emxArray__common *)ia, ibfirst, (int)sizeof(int));
    iafirst = b_ia->size[0];
    for (ibfirst = 0; ibfirst < iafirst; ibfirst++) {
      ia->data[ibfirst] = b_ia->data[ibfirst];
    }

    emxFree_int32_T(&b_ia);
  }

  if (b->size[0] > 0) {
    if (1 > nib) {
      iafirst = 0;
    } else {
      iafirst = nib;
    }

    emxInit_int32_T1(&b_ib, 1);
    ibfirst = b_ib->size[0];
    b_ib->size[0] = iafirst;
    emxEnsureCapacity((emxArray__common *)b_ib, ibfirst, (int)sizeof(int));
    for (ibfirst = 0; ibfirst < iafirst; ibfirst++) {
      b_ib->data[ibfirst] = ib->data[ibfirst];
    }

    ibfirst = ib->size[0];
    ib->size[0] = b_ib->size[0];
    emxEnsureCapacity((emxArray__common *)ib, ibfirst, (int)sizeof(int));
    iafirst = b_ib->size[0];
    for (ibfirst = 0; ibfirst < iafirst; ibfirst++) {
      ib->data[ibfirst] = b_ib->data[ibfirst];
    }

    emxFree_int32_T(&b_ib);
  }

  if (ncmax > 0) {
    if (1 > nc + 1) {
      iafirst = -1;
    } else {
      iafirst = nc;
    }

    emxInit_real_T1(&b_c, 1);
    ibfirst = b_c->size[0];
    b_c->size[0] = iafirst + 1;
    emxEnsureCapacity((emxArray__common *)b_c, ibfirst, (int)sizeof(double));
    for (ibfirst = 0; ibfirst <= iafirst; ibfirst++) {
      b_c->data[ibfirst] = c->data[ibfirst];
    }

    ibfirst = c->size[0];
    c->size[0] = b_c->size[0];
    emxEnsureCapacity((emxArray__common *)c, ibfirst, (int)sizeof(double));
    iafirst = b_c->size[0];
    for (ibfirst = 0; ibfirst < iafirst; ibfirst++) {
      c->data[ibfirst] = b_c->data[ibfirst];
    }

    emxFree_real_T(&b_c);
  }
}

//
// Arguments    : emxArray__common *emxArray
//                int oldNumel
//                int elementSize
// Return Type  : void
//
static void emxEnsureCapacity(emxArray__common *emxArray, int oldNumel, int
  elementSize)
{
  int newNumel;
  int i;
  void *newData;
  newNumel = 1;
  for (i = 0; i < emxArray->numDimensions; i++) {
    newNumel *= emxArray->size[i];
  }

  if (newNumel > emxArray->allocatedSize) {
    i = emxArray->allocatedSize;
    if (i < 16) {
      i = 16;
    }

    while (i < newNumel) {
      if (i > 1073741823) {
        i = MAX_int32_T;
      } else {
        i <<= 1;
      }
    }

    newData = calloc((unsigned int)i, (unsigned int)elementSize);
    if (emxArray->data != NULL) {
      memcpy(newData, emxArray->data, (unsigned int)(elementSize * oldNumel));
      if (emxArray->canFreeData) {
        free(emxArray->data);
      }
    }

    emxArray->data = newData;
    emxArray->allocatedSize = i;
    emxArray->canFreeData = true;
  }
}

//
// Arguments    : emxArray_boolean_T **pEmxArray
// Return Type  : void
//
static void emxFree_boolean_T(emxArray_boolean_T **pEmxArray)
{
  if (*pEmxArray != (emxArray_boolean_T *)NULL) {
    if (((*pEmxArray)->data != (boolean_T *)NULL) && (*pEmxArray)->canFreeData)
    {
      free((void *)(*pEmxArray)->data);
    }

    free((void *)(*pEmxArray)->size);
    free((void *)*pEmxArray);
    *pEmxArray = (emxArray_boolean_T *)NULL;
  }
}

//
// Arguments    : emxArray_int32_T **pEmxArray
// Return Type  : void
//
static void emxFree_int32_T(emxArray_int32_T **pEmxArray)
{
  if (*pEmxArray != (emxArray_int32_T *)NULL) {
    if (((*pEmxArray)->data != (int *)NULL) && (*pEmxArray)->canFreeData) {
      free((void *)(*pEmxArray)->data);
    }

    free((void *)(*pEmxArray)->size);
    free((void *)*pEmxArray);
    *pEmxArray = (emxArray_int32_T *)NULL;
  }
}

//
// Arguments    : emxArray_real_T **pEmxArray
// Return Type  : void
//
static void emxFree_real_T(emxArray_real_T **pEmxArray)
{
  if (*pEmxArray != (emxArray_real_T *)NULL) {
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
      free((void *)(*pEmxArray)->data);
    }

    free((void *)(*pEmxArray)->size);
    free((void *)*pEmxArray);
    *pEmxArray = (emxArray_real_T *)NULL;
  }
}

//
// Arguments    : emxArray_boolean_T **pEmxArray
//                int numDimensions
// Return Type  : void
//
static void emxInit_boolean_T(emxArray_boolean_T **pEmxArray, int numDimensions)
{
  emxArray_boolean_T *emxArray;
  int i;
  *pEmxArray = (emxArray_boolean_T *)malloc(sizeof(emxArray_boolean_T));
  emxArray = *pEmxArray;
  emxArray->data = (boolean_T *)NULL;
  emxArray->numDimensions = numDimensions;
  emxArray->size = (int *)malloc((unsigned int)(sizeof(int) * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (i = 0; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

//
// Arguments    : emxArray_int32_T **pEmxArray
//                int numDimensions
// Return Type  : void
//
static void emxInit_int32_T(emxArray_int32_T **pEmxArray, int numDimensions)
{
  emxArray_int32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_int32_T *)malloc(sizeof(emxArray_int32_T));
  emxArray = *pEmxArray;
  emxArray->data = (int *)NULL;
  emxArray->numDimensions = numDimensions;
  emxArray->size = (int *)malloc((unsigned int)(sizeof(int) * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (i = 0; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

//
// Arguments    : emxArray_int32_T **pEmxArray
//                int numDimensions
// Return Type  : void
//
static void emxInit_int32_T1(emxArray_int32_T **pEmxArray, int numDimensions)
{
  emxArray_int32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_int32_T *)malloc(sizeof(emxArray_int32_T));
  emxArray = *pEmxArray;
  emxArray->data = (int *)NULL;
  emxArray->numDimensions = numDimensions;
  emxArray->size = (int *)malloc((unsigned int)(sizeof(int) * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (i = 0; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

//
// Arguments    : emxArray_real_T **pEmxArray
//                int numDimensions
// Return Type  : void
//
static void emxInit_real_T(emxArray_real_T **pEmxArray, int numDimensions)
{
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
  emxArray = *pEmxArray;
  emxArray->data = (double *)NULL;
  emxArray->numDimensions = numDimensions;
  emxArray->size = (int *)malloc((unsigned int)(sizeof(int) * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (i = 0; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

//
// Arguments    : emxArray_real_T **pEmxArray
//                int numDimensions
// Return Type  : void
//
static void emxInit_real_T1(emxArray_real_T **pEmxArray, int numDimensions)
{
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc(sizeof(emxArray_real_T));
  emxArray = *pEmxArray;
  emxArray->data = (double *)NULL;
  emxArray->numDimensions = numDimensions;
  emxArray->size = (int *)malloc((unsigned int)(sizeof(int) * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (i = 0; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

//
// Arguments    : double x
// Return Type  : double
//
static double eps(double x)
{
  double r;
  double absxk;
  int exponent;
  absxk = std::fabs(x);
  if ((!rtIsInf(absxk)) && (!rtIsNaN(absxk))) {
    if (absxk <= 2.2250738585072014E-308) {
      r = 4.94065645841247E-324;
    } else {
      frexp(absxk, &exponent);
      r = std::ldexp(1.0, exponent - 53);
    }
  } else {
    r = rtNaN;
  }

  return r;
}

//
// FeatureExtractionEOG3 (from diff signal) for blinks/double clinks
//  Accepts 2 low threshold and 2 upper thresholds.
//  Upper Thresholds UTH1 UTH2
//  Lower Threshold. LTH1 LTH2
// %-TODO: FINALIZE THRESHOLDS:
//  UTH1 = 0.4E-4;
//  UTH2 = 2.75E-4;
//  LTH1 = -0.5E-4;
//  LTH2 = -2.75E-4;
// Arguments    : const double X[250]
//                double LTH1
//                double LTH2
//                double UTH2
//                emxArray_real_T *F
// Return Type  : void
//
static void featureExtractionEOG2(const double X[250], double LTH1, double LTH2,
  double UTH2, emxArray_real_T *F)
{
  int ixstart;
  double mtmp;
  int itmp;
  int ix;
  boolean_T exitg2;
  double b_mtmp;
  int b_itmp;
  boolean_T exitg1;
  emxArray_int32_T *r1;
  double Famplitude;
  emxArray_real_T *b_X;
  double FInt1;
  emxArray_real_T *c_X;
  double FInt2;
  boolean_T x[250];
  double FcountMin;
  double FcountMax;
  double FcountMaxHigh;
  double FcountMinLow;
  emxArray_real_T *peaks;
  emxArray_real_T *loc;
  emxArray_real_T *T_findpeaks_distX;
  int T_count_findpeaks;
  ixstart = 1;
  mtmp = X[0];
  itmp = 1;
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg2 = false;
    while ((!exitg2) && (ix < 251)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        mtmp = X[ix - 1];
        itmp = ix;
        exitg2 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 250) {
    while (ixstart + 1 < 251) {
      if (X[ixstart] > mtmp) {
        mtmp = X[ixstart];
        itmp = ixstart + 1;
      }

      ixstart++;
    }
  }

  ixstart = 1;
  b_mtmp = X[0];
  b_itmp = 1;
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 251)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        b_mtmp = X[ix - 1];
        b_itmp = ix;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 250) {
    while (ixstart + 1 < 251) {
      if (X[ixstart] < b_mtmp) {
        b_mtmp = X[ixstart];
        b_itmp = ixstart + 1;
      }

      ixstart++;
    }
  }

  emxInit_int32_T1(&r1, 1);
  Famplitude = mtmp - b_mtmp;
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > 4.0E-5) && (X[ix] < UTH2)) {
      ixstart++;
    }
  }

  ix = r1->size[0];
  r1->size[0] = ixstart;
  emxEnsureCapacity((emxArray__common *)r1, ix, (int)sizeof(int));
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > 4.0E-5) && (X[ix] < UTH2)) {
      r1->data[ixstart] = ix + 1;
      ixstart++;
    }
  }

  emxInit_real_T1(&b_X, 1);
  ix = b_X->size[0];
  b_X->size[0] = r1->size[0];
  emxEnsureCapacity((emxArray__common *)b_X, ix, (int)sizeof(double));
  ixstart = r1->size[0];
  for (ix = 0; ix < ixstart; ix++) {
    b_X->data[ix] = X[r1->data[ix] - 1];
  }

  FInt1 = trapz(b_X);
  ixstart = 0;
  emxFree_real_T(&b_X);
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > LTH2) && (X[ix] < LTH1)) {
      ixstart++;
    }
  }

  ix = r1->size[0];
  r1->size[0] = ixstart;
  emxEnsureCapacity((emxArray__common *)r1, ix, (int)sizeof(int));
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > LTH2) && (X[ix] < LTH1)) {
      r1->data[ixstart] = ix + 1;
      ixstart++;
    }
  }

  emxInit_real_T1(&c_X, 1);
  ix = c_X->size[0];
  c_X->size[0] = r1->size[0];
  emxEnsureCapacity((emxArray__common *)c_X, ix, (int)sizeof(double));
  ixstart = r1->size[0];
  for (ix = 0; ix < ixstart; ix++) {
    c_X->data[ix] = -X[r1->data[ix] - 1];
  }

  emxFree_int32_T(&r1);
  FInt2 = trapz(c_X);
  emxFree_real_T(&c_X);
  for (ix = 0; ix < 250; ix++) {
    x[ix] = ((X[ix] > LTH2) && (X[ix] < LTH1));
  }

  FcountMin = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMin += (double)x[ixstart + 1];
  }

  // Count between bottom two lines.
  for (ix = 0; ix < 250; ix++) {
    x[ix] = ((X[ix] > 4.0E-5) && (X[ix] < UTH2));
  }

  FcountMax = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMax += (double)x[ixstart + 1];
  }

  for (ix = 0; ix < 250; ix++) {
    x[ix] = (X[ix] > UTH2);
  }

  FcountMaxHigh = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMaxHigh += (double)x[ixstart + 1];
  }

  for (ix = 0; ix < 250; ix++) {
    x[ix] = (X[ix] < LTH2);
  }

  FcountMinLow = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMinLow += (double)x[ixstart + 1];
  }

  emxInit_real_T1(&peaks, 1);
  emxInit_real_T1(&loc, 1);
  findpeaks(X, peaks, loc);
  ixstart = peaks->size[0];
  emxInit_real_T(&T_findpeaks_distX, 2);
  if (ixstart == 0) {
    T_count_findpeaks = 0;
    ix = T_findpeaks_distX->size[0] * T_findpeaks_distX->size[1];
    T_findpeaks_distX->size[0] = 1;
    T_findpeaks_distX->size[1] = 1;
    emxEnsureCapacity((emxArray__common *)T_findpeaks_distX, ix, (int)sizeof
                      (double));
    T_findpeaks_distX->data[0] = 0.0;
  } else {
    ixstart = peaks->size[0];
    if (ixstart == 0) {
      ixstart = 0;
    } else {
      ixstart = peaks->size[0];
      if (ixstart > 1) {
        ixstart = peaks->size[0];
      } else {
        ixstart = 1;
      }
    }

    T_count_findpeaks = ixstart;
    ixstart = peaks->size[0];
    if (ixstart == 0) {
      ixstart = 0;
    } else {
      ixstart = peaks->size[0];
      if (ixstart > 1) {
        ixstart = peaks->size[0];
      } else {
        ixstart = 1;
      }
    }

    if (ixstart > 1) {
      ix = T_findpeaks_distX->size[0] * T_findpeaks_distX->size[1];
      T_findpeaks_distX->size[0] = 1;
      T_findpeaks_distX->size[1] = 1;
      emxEnsureCapacity((emxArray__common *)T_findpeaks_distX, ix, (int)sizeof
                        (double));
      T_findpeaks_distX->data[0] = loc->data[loc->size[0] - 1] - loc->data[0];

      // TODO: TAKE AVG, NOT MAX-MIN
    } else {
      ix = T_findpeaks_distX->size[0] * T_findpeaks_distX->size[1];
      T_findpeaks_distX->size[0] = 1;
      T_findpeaks_distX->size[1] = 1;
      emxEnsureCapacity((emxArray__common *)T_findpeaks_distX, ix, (int)sizeof
                        (double));
      T_findpeaks_distX->data[0] = 0.0;
    }
  }

  emxFree_real_T(&loc);
  emxFree_real_T(&peaks);

  //      plot(IDX(X>LTH2 & X<LTH1),X(X>LTH2 & X<LTH1),'k.');
  //      plot(IDX(X>UTH1 & X<UTH2),X(X>UTH1 & X<UTH2),'k^');
  ix = F->size[0] * F->size[1];
  F->size[0] = 1;
  F->size[1] = 13;
  emxEnsureCapacity((emxArray__common *)F, ix, (int)sizeof(double));
  F->data[0] = mtmp;
  F->data[F->size[0]] = b_mtmp;
  F->data[F->size[0] << 1] = Famplitude;
  F->data[F->size[0] * 3] = b_std(X);
  F->data[F->size[0] << 2] = FInt1;
  F->data[F->size[0] * 5] = FInt2;
  F->data[F->size[0] * 6] = Famplitude / (double)(itmp - b_itmp);
  F->data[F->size[0] * 7] = FcountMin;
  F->data[F->size[0] << 3] = FcountMax;
  F->data[F->size[0] * 9] = FcountMaxHigh;
  F->data[F->size[0] * 10] = FcountMinLow;
  F->data[F->size[0] * 11] = T_count_findpeaks;
  for (ix = 0; ix < 1; ix++) {
    F->data[F->size[0] * 12] = T_findpeaks_distX->data[0];
  }

  emxFree_real_T(&T_findpeaks_distX);
}

//
// % FeatureExtractionEOG3 (from diff signal)
//  Accepts 2 low threshold and 2 upper thresholds.
//  Upper Thresholds UTH1 UTH2
//  Lower Threshold. LTH1 LTH2
// %-TODO: FINALIZE THRESHOLDS:
//  UTH1 = 0.4E-4;
//  UTH2 = 2.75E-4;
//  LTH1 = -0.5E-4;
//  LTH2 = -2.75E-4;
// Arguments    : const double X[250]
//                double LTH1
//                double LTH2
//                double UTH1
//                double UTH2
//                double F[11]
// Return Type  : void
//
static void featureExtractionEOG3(const double X[250], double LTH1, double LTH2,
  double UTH1, double UTH2, double F[11])
{
  int ixstart;
  double mtmp;
  int itmp;
  int ix;
  boolean_T exitg2;
  double b_mtmp;
  int b_itmp;
  boolean_T exitg1;
  emxArray_int32_T *r0;
  double Famplitude;
  emxArray_real_T *b_X;
  double FInt1;
  emxArray_real_T *c_X;
  double FInt2;
  boolean_T x[250];
  double FcountMin;
  double FcountMax;
  double FcountMaxHigh;
  double FcountMinLow;
  ixstart = 1;
  mtmp = X[0];
  itmp = 1;
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg2 = false;
    while ((!exitg2) && (ix < 251)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        mtmp = X[ix - 1];
        itmp = ix;
        exitg2 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 250) {
    while (ixstart + 1 < 251) {
      if (X[ixstart] > mtmp) {
        mtmp = X[ixstart];
        itmp = ixstart + 1;
      }

      ixstart++;
    }
  }

  ixstart = 1;
  b_mtmp = X[0];
  b_itmp = 1;
  if (rtIsNaN(X[0])) {
    ix = 2;
    exitg1 = false;
    while ((!exitg1) && (ix < 251)) {
      ixstart = ix;
      if (!rtIsNaN(X[ix - 1])) {
        b_mtmp = X[ix - 1];
        b_itmp = ix;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }

  if (ixstart < 250) {
    while (ixstart + 1 < 251) {
      if (X[ixstart] < b_mtmp) {
        b_mtmp = X[ixstart];
        b_itmp = ixstart + 1;
      }

      ixstart++;
    }
  }

  emxInit_int32_T1(&r0, 1);
  Famplitude = mtmp - b_mtmp;
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > UTH1) && (X[ix] < UTH2)) {
      ixstart++;
    }
  }

  ix = r0->size[0];
  r0->size[0] = ixstart;
  emxEnsureCapacity((emxArray__common *)r0, ix, (int)sizeof(int));
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > UTH1) && (X[ix] < UTH2)) {
      r0->data[ixstart] = ix + 1;
      ixstart++;
    }
  }

  emxInit_real_T1(&b_X, 1);
  ix = b_X->size[0];
  b_X->size[0] = r0->size[0];
  emxEnsureCapacity((emxArray__common *)b_X, ix, (int)sizeof(double));
  ixstart = r0->size[0];
  for (ix = 0; ix < ixstart; ix++) {
    b_X->data[ix] = X[r0->data[ix] - 1];
  }

  FInt1 = trapz(b_X);
  ixstart = 0;
  emxFree_real_T(&b_X);
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > LTH2) && (X[ix] < LTH1)) {
      ixstart++;
    }
  }

  ix = r0->size[0];
  r0->size[0] = ixstart;
  emxEnsureCapacity((emxArray__common *)r0, ix, (int)sizeof(int));
  ixstart = 0;
  for (ix = 0; ix < 250; ix++) {
    if ((X[ix] > LTH2) && (X[ix] < LTH1)) {
      r0->data[ixstart] = ix + 1;
      ixstart++;
    }
  }

  emxInit_real_T1(&c_X, 1);
  ix = c_X->size[0];
  c_X->size[0] = r0->size[0];
  emxEnsureCapacity((emxArray__common *)c_X, ix, (int)sizeof(double));
  ixstart = r0->size[0];
  for (ix = 0; ix < ixstart; ix++) {
    c_X->data[ix] = -X[r0->data[ix] - 1];
  }

  emxFree_int32_T(&r0);
  FInt2 = trapz(c_X);
  emxFree_real_T(&c_X);
  for (ix = 0; ix < 250; ix++) {
    x[ix] = ((X[ix] > LTH2) && (X[ix] < LTH1));
  }

  FcountMin = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMin += (double)x[ixstart + 1];
  }

  // Count between bottom two lines.
  for (ix = 0; ix < 250; ix++) {
    x[ix] = ((X[ix] > UTH1) && (X[ix] < UTH2));
  }

  FcountMax = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMax += (double)x[ixstart + 1];
  }

  for (ix = 0; ix < 250; ix++) {
    x[ix] = (X[ix] > UTH2);
  }

  FcountMaxHigh = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMaxHigh += (double)x[ixstart + 1];
  }

  for (ix = 0; ix < 250; ix++) {
    x[ix] = (X[ix] < LTH2);
  }

  FcountMinLow = x[0];
  for (ixstart = 0; ixstart < 249; ixstart++) {
    FcountMinLow += (double)x[ixstart + 1];
  }

  // %% PLOT FEATURES %%%
  F[0] = mtmp;
  F[1] = b_mtmp;
  F[2] = Famplitude;
  F[3] = b_std(X);
  F[4] = FInt1;
  F[5] = FInt2;
  F[6] = Famplitude / (double)(itmp - b_itmp);
  F[7] = FcountMin;
  F[8] = FcountMax;
  F[9] = FcountMaxHigh;
  F[10] = FcountMinLow;

  // {
  // EOF
  // }
}

//
// Arguments    : double b[7]
//                double a[7]
//                const double x[1036]
//                const double zi[6]
//                double y[1036]
// Return Type  : void
//
static void filter(double b[7], double a[7], const double x[1036], const double
                   zi[6], double y[1036])
{
  double a1;
  int k;
  double dbuffer[7];
  int j;
  a1 = a[0];
  if ((!((!rtIsInf(a[0])) && (!rtIsNaN(a[0])))) || (a[0] == 0.0) || (!(a[0] !=
        1.0))) {
  } else {
    for (k = 0; k < 7; k++) {
      b[k] /= a1;
    }

    for (k = 0; k < 6; k++) {
      a[k + 1] /= a1;
    }

    a[0] = 1.0;
  }

  for (k = 0; k < 6; k++) {
    dbuffer[k + 1] = zi[k];
  }

  for (j = 0; j < 1036; j++) {
    for (k = 0; k < 6; k++) {
      dbuffer[k] = dbuffer[k + 1];
    }

    dbuffer[6] = 0.0;
    for (k = 0; k < 7; k++) {
      dbuffer[k] += x[j] * b[k];
    }

    for (k = 0; k < 6; k++) {
      dbuffer[k + 1] -= dbuffer[0] * a[k + 1];
    }

    y[j] = dbuffer[0];
  }
}

//
// Arguments    : const double yTemp[250]
//                emxArray_real_T *iPk
//                emxArray_real_T *iInflect
// Return Type  : void
//
static void findLocalMaxima(const double yTemp[250], emxArray_real_T *iPk,
  emxArray_real_T *iInflect)
{
  double b_yTemp[252];
  boolean_T yFinite[252];
  int ii;
  boolean_T x[251];
  emxArray_int32_T *b_ii;
  int idx;
  int i1;
  boolean_T exitg3;
  emxArray_int32_T *r2;
  boolean_T guard3 = false;
  emxArray_real_T *iTemp;
  emxArray_real_T *c_yTemp;
  emxArray_real_T *s;
  int nx;
  emxArray_boolean_T *b_x;
  emxArray_real_T *r3;
  double c_x;
  boolean_T exitg2;
  boolean_T guard2 = false;
  emxArray_int32_T *c_ii;
  boolean_T exitg1;
  boolean_T guard1 = false;
  b_yTemp[0] = rtNaN;
  memcpy(&b_yTemp[1], &yTemp[0], 250U * sizeof(double));
  b_yTemp[251] = rtNaN;
  for (ii = 0; ii < 252; ii++) {
    yFinite[ii] = !rtIsNaN(b_yTemp[ii]);
  }

  for (ii = 0; ii < 251; ii++) {
    x[ii] = ((b_yTemp[ii] != b_yTemp[ii + 1]) && (yFinite[ii] || yFinite[ii + 1]));
  }

  emxInit_int32_T1(&b_ii, 1);
  idx = 0;
  i1 = b_ii->size[0];
  b_ii->size[0] = 251;
  emxEnsureCapacity((emxArray__common *)b_ii, i1, (int)sizeof(int));
  ii = 1;
  exitg3 = false;
  while ((!exitg3) && (ii < 252)) {
    guard3 = false;
    if (x[ii - 1]) {
      idx++;
      b_ii->data[idx - 1] = ii;
      if (idx >= 251) {
        exitg3 = true;
      } else {
        guard3 = true;
      }
    } else {
      guard3 = true;
    }

    if (guard3) {
      ii++;
    }
  }

  emxInit_int32_T1(&r2, 1);
  i1 = b_ii->size[0];
  if (1 > idx) {
    b_ii->size[0] = 0;
  } else {
    b_ii->size[0] = idx;
  }

  emxEnsureCapacity((emxArray__common *)b_ii, i1, (int)sizeof(int));
  i1 = r2->size[0];
  r2->size[0] = 1 + b_ii->size[0];
  emxEnsureCapacity((emxArray__common *)r2, i1, (int)sizeof(int));
  r2->data[0] = 1;
  ii = b_ii->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    r2->data[i1 + 1] = b_ii->data[i1] + 1;
  }

  emxInit_real_T1(&iTemp, 1);
  i1 = iTemp->size[0];
  iTemp->size[0] = r2->size[0];
  emxEnsureCapacity((emxArray__common *)iTemp, i1, (int)sizeof(double));
  ii = r2->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    iTemp->data[i1] = 1.0 + (double)(r2->data[i1] - 1);
  }

  emxFree_int32_T(&r2);
  emxInit_real_T1(&c_yTemp, 1);
  i1 = c_yTemp->size[0];
  c_yTemp->size[0] = iTemp->size[0];
  emxEnsureCapacity((emxArray__common *)c_yTemp, i1, (int)sizeof(double));
  ii = iTemp->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    c_yTemp->data[i1] = b_yTemp[(int)iTemp->data[i1] - 1];
  }

  emxInit_real_T1(&s, 1);
  b_diff(c_yTemp, s);
  nx = s->size[0];
  ii = 0;
  emxFree_real_T(&c_yTemp);
  while (ii + 1 <= nx) {
    if (s->data[ii] < 0.0) {
      c_x = -1.0;
    } else if (s->data[ii] > 0.0) {
      c_x = 1.0;
    } else if (s->data[ii] == 0.0) {
      c_x = 0.0;
    } else {
      c_x = s->data[ii];
    }

    s->data[ii] = c_x;
    ii++;
  }

  emxInit_boolean_T(&b_x, 1);
  emxInit_real_T1(&r3, 1);
  b_diff(s, r3);
  i1 = b_x->size[0];
  b_x->size[0] = r3->size[0];
  emxEnsureCapacity((emxArray__common *)b_x, i1, (int)sizeof(boolean_T));
  ii = r3->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    b_x->data[i1] = (r3->data[i1] < 0.0);
  }

  emxFree_real_T(&r3);
  nx = b_x->size[0];
  idx = 0;
  i1 = b_ii->size[0];
  b_ii->size[0] = b_x->size[0];
  emxEnsureCapacity((emxArray__common *)b_ii, i1, (int)sizeof(int));
  ii = 1;
  exitg2 = false;
  while ((!exitg2) && (ii <= nx)) {
    guard2 = false;
    if (b_x->data[ii - 1]) {
      idx++;
      b_ii->data[idx - 1] = ii;
      if (idx >= nx) {
        exitg2 = true;
      } else {
        guard2 = true;
      }
    } else {
      guard2 = true;
    }

    if (guard2) {
      ii++;
    }
  }

  if (b_x->size[0] == 1) {
    if (idx == 0) {
      i1 = b_ii->size[0];
      b_ii->size[0] = 0;
      emxEnsureCapacity((emxArray__common *)b_ii, i1, (int)sizeof(int));
    }
  } else {
    i1 = b_ii->size[0];
    if (1 > idx) {
      b_ii->size[0] = 0;
    } else {
      b_ii->size[0] = idx;
    }

    emxEnsureCapacity((emxArray__common *)b_ii, i1, (int)sizeof(int));
  }

  if (1 > s->size[0] - 1) {
    ii = 0;
  } else {
    ii = s->size[0] - 1;
  }

  if (2 > s->size[0]) {
    i1 = 0;
  } else {
    i1 = 1;
  }

  idx = b_x->size[0];
  b_x->size[0] = ii;
  emxEnsureCapacity((emxArray__common *)b_x, idx, (int)sizeof(boolean_T));
  for (idx = 0; idx < ii; idx++) {
    b_x->data[idx] = (s->data[idx] != s->data[i1 + idx]);
  }

  emxFree_real_T(&s);
  emxInit_int32_T1(&c_ii, 1);
  nx = b_x->size[0];
  idx = 0;
  i1 = c_ii->size[0];
  c_ii->size[0] = b_x->size[0];
  emxEnsureCapacity((emxArray__common *)c_ii, i1, (int)sizeof(int));
  ii = 1;
  exitg1 = false;
  while ((!exitg1) && (ii <= nx)) {
    guard1 = false;
    if (b_x->data[ii - 1]) {
      idx++;
      c_ii->data[idx - 1] = ii;
      if (idx >= nx) {
        exitg1 = true;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      ii++;
    }
  }

  if (b_x->size[0] == 1) {
    if (idx == 0) {
      i1 = c_ii->size[0];
      c_ii->size[0] = 0;
      emxEnsureCapacity((emxArray__common *)c_ii, i1, (int)sizeof(int));
    }
  } else {
    i1 = c_ii->size[0];
    if (1 > idx) {
      c_ii->size[0] = 0;
    } else {
      c_ii->size[0] = idx;
    }

    emxEnsureCapacity((emxArray__common *)c_ii, i1, (int)sizeof(int));
  }

  emxFree_boolean_T(&b_x);
  i1 = iInflect->size[0];
  iInflect->size[0] = c_ii->size[0];
  emxEnsureCapacity((emxArray__common *)iInflect, i1, (int)sizeof(double));
  ii = c_ii->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    iInflect->data[i1] = iTemp->data[c_ii->data[i1]] - 1.0;
  }

  emxFree_int32_T(&c_ii);
  i1 = iPk->size[0];
  iPk->size[0] = b_ii->size[0];
  emxEnsureCapacity((emxArray__common *)iPk, i1, (int)sizeof(double));
  ii = b_ii->size[0];
  for (i1 = 0; i1 < ii; i1++) {
    iPk->data[i1] = iTemp->data[b_ii->data[i1]] - 1.0;
  }

  emxFree_int32_T(&b_ii);
  emxFree_real_T(&iTemp);
}

//
// Arguments    : const double Yin[250]
//                emxArray_real_T *Ypk
//                emxArray_real_T *Xpk
// Return Type  : void
//
static void findpeaks(const double Yin[250], emxArray_real_T *Ypk,
                      emxArray_real_T *Xpk)
{
  boolean_T x[250];
  int cdiff;
  emxArray_int32_T *ii;
  int idx;
  int k;
  boolean_T exitg1;
  emxArray_real_T *iInfite;
  boolean_T guard1 = false;
  double yTemp[250];
  emxArray_real_T *iPk;
  emxArray_real_T *b_idx;
  int ndbl;
  emxArray_real_T *base;
  double extremum;
  emxArray_real_T *varargin_2;
  emxArray_int32_T *ib;
  int apnd;
  emxArray_real_T *y;
  emxArray_real_T *c_idx;
  for (cdiff = 0; cdiff < 250; cdiff++) {
    x[cdiff] = (rtIsInf(Yin[cdiff]) && (Yin[cdiff] > 0.0));
  }

  emxInit_int32_T1(&ii, 1);
  idx = 0;
  k = ii->size[0];
  ii->size[0] = 250;
  emxEnsureCapacity((emxArray__common *)ii, k, (int)sizeof(int));
  cdiff = 1;
  exitg1 = false;
  while ((!exitg1) && (cdiff < 251)) {
    guard1 = false;
    if (x[cdiff - 1]) {
      idx++;
      ii->data[idx - 1] = cdiff;
      if (idx >= 250) {
        exitg1 = true;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      cdiff++;
    }
  }

  emxInit_real_T1(&iInfite, 1);
  k = ii->size[0];
  if (1 > idx) {
    ii->size[0] = 0;
  } else {
    ii->size[0] = idx;
  }

  emxEnsureCapacity((emxArray__common *)ii, k, (int)sizeof(int));
  k = iInfite->size[0];
  iInfite->size[0] = ii->size[0];
  emxEnsureCapacity((emxArray__common *)iInfite, k, (int)sizeof(double));
  cdiff = ii->size[0];
  for (k = 0; k < cdiff; k++) {
    iInfite->data[k] = ii->data[k];
  }

  memcpy(&yTemp[0], &Yin[0], 250U * sizeof(double));
  k = ii->size[0];
  ii->size[0] = iInfite->size[0];
  emxEnsureCapacity((emxArray__common *)ii, k, (int)sizeof(int));
  cdiff = iInfite->size[0];
  for (k = 0; k < cdiff; k++) {
    ii->data[k] = (int)iInfite->data[k];
  }

  cdiff = ii->size[0];
  for (k = 0; k < cdiff; k++) {
    yTemp[ii->data[k] - 1] = rtNaN;
  }

  emxInit_real_T1(&iPk, 1);
  emxInit_real_T1(&b_idx, 1);
  findLocalMaxima(yTemp, iPk, b_idx);
  if (!(iPk->size[0] == 0)) {
    idx = iPk->size[0] - 1;
    ndbl = 0;
    for (cdiff = 0; cdiff <= idx; cdiff++) {
      if (Yin[(int)iPk->data[cdiff] - 1] > 4.0E-5) {
        ndbl++;
      }
    }

    k = 0;
    for (cdiff = 0; cdiff <= idx; cdiff++) {
      if (Yin[(int)iPk->data[cdiff] - 1] > 4.0E-5) {
        iPk->data[k] = iPk->data[cdiff];
        k++;
      }
    }

    k = iPk->size[0];
    iPk->size[0] = ndbl;
    emxEnsureCapacity((emxArray__common *)iPk, k, (int)sizeof(double));
  }

  cdiff = iPk->size[0];
  emxInit_real_T1(&base, 1);
  k = base->size[0];
  base->size[0] = cdiff;
  emxEnsureCapacity((emxArray__common *)base, k, (int)sizeof(double));
  for (k = 0; k + 1 <= cdiff; k++) {
    if ((Yin[(int)(iPk->data[k] - 1.0) - 1] >= Yin[(int)(iPk->data[k] + 1.0) - 1])
        || rtIsNaN(Yin[(int)(iPk->data[k] + 1.0) - 1])) {
      extremum = Yin[(int)(iPk->data[k] - 1.0) - 1];
    } else {
      extremum = Yin[(int)(iPk->data[k] + 1.0) - 1];
    }

    base->data[k] = extremum;
  }

  idx = iPk->size[0] - 1;
  ndbl = 0;
  for (cdiff = 0; cdiff <= idx; cdiff++) {
    if (Yin[(int)iPk->data[cdiff] - 1] - base->data[cdiff] >= 0.0) {
      ndbl++;
    }
  }

  k = 0;
  for (cdiff = 0; cdiff <= idx; cdiff++) {
    if (Yin[(int)iPk->data[cdiff] - 1] - base->data[cdiff] >= 0.0) {
      iPk->data[k] = iPk->data[cdiff];
      k++;
    }
  }

  emxFree_real_T(&base);
  emxInit_real_T1(&varargin_2, 1);
  emxInit_int32_T1(&ib, 1);
  k = iPk->size[0];
  iPk->size[0] = ndbl;
  emxEnsureCapacity((emxArray__common *)iPk, k, (int)sizeof(double));
  do_vectors(iPk, iInfite, varargin_2, ii, ib);
  emxFree_int32_T(&ib);
  emxFree_int32_T(&ii);
  emxFree_real_T(&iInfite);
  if (varargin_2->size[0] < 1) {
    ndbl = 0;
    apnd = 0;
  } else {
    ndbl = (int)std::floor(((double)varargin_2->size[0] - 1.0) + 0.5);
    apnd = ndbl + 1;
    cdiff = (ndbl - varargin_2->size[0]) + 1;
    idx = varargin_2->size[0];
    if (std::fabs((double)cdiff) < 4.4408920985006262E-16 * (double)idx) {
      ndbl++;
      apnd = varargin_2->size[0];
    } else if (cdiff > 0) {
      apnd = ndbl;
    } else {
      ndbl++;
    }
  }

  emxInit_real_T(&y, 2);
  k = y->size[0] * y->size[1];
  y->size[0] = 1;
  y->size[1] = ndbl;
  emxEnsureCapacity((emxArray__common *)y, k, (int)sizeof(double));
  if (ndbl > 0) {
    y->data[0] = 1.0;
    if (ndbl > 1) {
      y->data[ndbl - 1] = apnd;
      idx = (ndbl - 1) / 2;
      for (k = 1; k < idx; k++) {
        y->data[k] = 1.0 + (double)k;
        y->data[(ndbl - k) - 1] = apnd - k;
      }

      if (idx << 1 == ndbl - 1) {
        y->data[idx] = (1.0 + (double)apnd) / 2.0;
      } else {
        y->data[idx] = 1.0 + (double)idx;
        y->data[idx + 1] = apnd - idx;
      }
    }
  }

  k = b_idx->size[0];
  b_idx->size[0] = y->size[1];
  emxEnsureCapacity((emxArray__common *)b_idx, k, (int)sizeof(double));
  cdiff = y->size[1];
  for (k = 0; k < cdiff; k++) {
    b_idx->data[k] = y->data[y->size[0] * k];
  }

  emxFree_real_T(&y);
  if (b_idx->size[0] > 250) {
    emxInit_real_T1(&c_idx, 1);
    k = c_idx->size[0];
    c_idx->size[0] = 250;
    emxEnsureCapacity((emxArray__common *)c_idx, k, (int)sizeof(double));
    for (k = 0; k < 250; k++) {
      c_idx->data[k] = b_idx->data[k];
    }

    k = b_idx->size[0];
    b_idx->size[0] = c_idx->size[0];
    emxEnsureCapacity((emxArray__common *)b_idx, k, (int)sizeof(double));
    cdiff = c_idx->size[0];
    for (k = 0; k < cdiff; k++) {
      b_idx->data[k] = c_idx->data[k];
    }

    emxFree_real_T(&c_idx);
  }

  k = iPk->size[0];
  iPk->size[0] = b_idx->size[0];
  emxEnsureCapacity((emxArray__common *)iPk, k, (int)sizeof(double));
  cdiff = b_idx->size[0];
  for (k = 0; k < cdiff; k++) {
    iPk->data[k] = varargin_2->data[(int)b_idx->data[k] - 1];
  }

  emxFree_real_T(&varargin_2);
  emxFree_real_T(&b_idx);
  k = Ypk->size[0];
  Ypk->size[0] = iPk->size[0];
  emxEnsureCapacity((emxArray__common *)Ypk, k, (int)sizeof(double));
  cdiff = iPk->size[0];
  for (k = 0; k < cdiff; k++) {
    Ypk->data[k] = Yin[(int)iPk->data[k] - 1];
  }

  k = Xpk->size[0];
  Xpk->size[0] = iPk->size[0];
  emxEnsureCapacity((emxArray__common *)Xpk, k, (int)sizeof(double));
  cdiff = iPk->size[0];
  for (k = 0; k < cdiff; k++) {
    Xpk->data[k] = 1.0 + (double)((int)iPk->data[k] - 1);
  }

  emxFree_real_T(&iPk);
}

//
// Arguments    : double x[1036]
// Return Type  : void
//
static void flipud(double x[1036])
{
  int i;
  double xtmp;
  for (i = 0; i < 518; i++) {
    xtmp = x[i];
    x[i] = x[1035 - i];
    x[1035 - i] = xtmp;
  }
}

//
// Arguments    : const double Y[3]
//                const emxArray_real_T *X
//                emxArray_real_T *no
// Return Type  : void
//
static void hist(const double Y[3], const emxArray_real_T *X, emxArray_real_T
                 *no)
{
  emxArray_real_T *edges;
  int nbins;
  int low_i;
  int k;
  int exitg3;
  int exitg2;
  emxArray_real_T *nn;
  unsigned int outsize_idx_0;
  boolean_T guard1 = false;
  int exitg1;
  boolean_T eok;
  int low_ip1;
  int high_i;
  int mid_i;
  emxInit_real_T(&edges, 2);
  nbins = X->size[0];
  low_i = edges->size[0] * edges->size[1];
  edges->size[0] = 1;
  edges->size[1] = (int)(nbins + 1U);
  emxEnsureCapacity((emxArray__common *)edges, low_i, (int)sizeof(double));
  k = 0;
  do {
    exitg3 = 0;
    nbins = X->size[0];
    if (k <= nbins - 2) {
      edges->data[1 + k] = X->data[k] + (X->data[1 + k] - X->data[k]) / 2.0;
      k++;
    } else {
      exitg3 = 1;
    }
  } while (exitg3 == 0);

  edges->data[0] = rtMinusInf;
  edges->data[edges->size[1] - 1] = rtInf;
  k = 1;
  do {
    exitg2 = 0;
    nbins = X->size[0];
    if (k - 1 <= nbins - 2) {
      edges->data[k] += eps(edges->data[k]);
      k++;
    } else {
      exitg2 = 1;
    }
  } while (exitg2 == 0);

  emxInit_real_T1(&nn, 1);
  outsize_idx_0 = (unsigned int)edges->size[1];
  low_i = nn->size[0];
  nn->size[0] = (int)outsize_idx_0;
  emxEnsureCapacity((emxArray__common *)nn, low_i, (int)sizeof(double));
  nbins = (int)outsize_idx_0;
  for (low_i = 0; low_i < nbins; low_i++) {
    nn->data[low_i] = 0.0;
  }

  nbins = edges->size[1];
  guard1 = false;
  if (nbins > 1) {
    low_i = 1;
    do {
      exitg1 = 0;
      if (low_i + 1 <= nbins) {
        if (!(edges->data[low_i] >= edges->data[low_i - 1])) {
          eok = false;
          exitg1 = 1;
        } else {
          low_i++;
        }
      } else {
        guard1 = true;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    guard1 = true;
  }

  if (guard1) {
    eok = true;
  }

  if (!eok) {
    low_i = nn->size[0];
    nn->size[0] = (int)outsize_idx_0;
    emxEnsureCapacity((emxArray__common *)nn, low_i, (int)sizeof(double));
    nbins = (int)outsize_idx_0;
    for (low_i = 0; low_i < nbins; low_i++) {
      nn->data[low_i] = rtNaN;
    }
  } else {
    nbins = 0;
    for (k = 0; k < 3; k++) {
      low_i = 0;
      if ((!(edges->size[1] == 0)) && (!rtIsNaN(Y[nbins]))) {
        if ((Y[nbins] >= edges->data[0]) && (Y[nbins] < edges->data[edges->size
             [1] - 1])) {
          low_i = 1;
          low_ip1 = 2;
          high_i = edges->size[1];
          while (high_i > low_ip1) {
            mid_i = (low_i >> 1) + (high_i >> 1);
            if (((low_i & 1) == 1) && ((high_i & 1) == 1)) {
              mid_i++;
            }

            if (Y[nbins] >= edges->data[mid_i - 1]) {
              low_i = mid_i;
              low_ip1 = mid_i + 1;
            } else {
              high_i = mid_i;
            }
          }
        }

        if (Y[nbins] == edges->data[edges->size[1] - 1]) {
          low_i = edges->size[1];
        }
      }

      if (low_i > 0) {
        nn->data[low_i - 1]++;
      }

      nbins++;
    }
  }

  emxFree_real_T(&edges);
  low_i = no->size[0] * no->size[1];
  no->size[0] = 1;
  no->size[1] = nn->size[0] - 1;
  emxEnsureCapacity((emxArray__common *)no, low_i, (int)sizeof(double));
  for (k = 0; k <= nn->size[0] - 2; k++) {
    no->data[k] = nn->data[k];
  }

  if (nn->size[0] - 1 > 0) {
    no->data[no->size[1] - 1] += nn->data[nn->size[0] - 1];
  }

  emxFree_real_T(&nn);
}

//
// function yfit = knnclassification(testsamplesX,samplesX, samplesY, Knn, type)
//  Classify using the Nearest neighbor algorithm
//  Inputs:
//   tX    - Train samples
//  tY    - Train labels
//    tsX (testsamplesX) - Test  samples to classify
//  Knn         - Number of nearest neighbors
//
//  Outputs
//  result - Predicted targets
// if nargin < 5
//     type = '2norm';
// end
// Arguments    : const double tsX[22]
// Return Type  : double
//
static double knn(const double tsX[22])
{
  double yfit;
  int iwork[278];
  int idx[278];
  int k;
  int i;
  static const signed char tY[278] = { 3, 3, 3, 3, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3,
    3, 6, 6, 6, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 3, 4,
    4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 6, 6,
    6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 6, 6, 3, 3, 4, 4, 4, 4, 5, 5, 5, 4, 4, 3, 3, 3,
    3, 6, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4,
    4, 4, 4, 4, 5, 5, 5, 5, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 6, 6, 3, 3, 4, 4, 4, 5,
    5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 3,
    3, 3, 3, 3, 3, 6, 6, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 4, 4,
    4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 6, 6, 3, 4, 5, 5, 5, 4, 4,
    4, 3, 3, 3 };

  emxArray_real_T *Uc;
  int khi;
  int j;
  int pEnd;
  int p;
  int nb;
  int qEnd;
  int kEnd;
  int exitg2;
  boolean_T b_p;
  int i0;
  double x[6116];
  double y[6116];
  int b_k;
  static const double tX[6116] = { 0.000213314060731424, 0.000216489197261433,
    0.000221888086885025, 0.000223403974711209, 0.000107016701704483,
    9.94692919085429E-5, 9.41525579499902E-5, 5.5728881741543E-5,
    3.47194375512087E-5, 0.000314205345714455, 0.000317175616308756,
    0.000319184400350987, 0.000245397462711677, 0.000248294316920605,
    0.000251818115986455, 3.94202059291391E-5, 3.33730959610026E-5,
    3.01428980564813E-5, 0.00022629184346896, 2.40435814305698E-5,
    2.16162073608369E-5, 2.04564750460708E-5, 6.84412483669233E-5,
    6.75563425640264E-5, 6.69536288986524E-5, 6.81895887372653E-5,
    8.89567570861195E-5, 9.08697011011517E-5, 9.07510636305761E-5,
    2.4440855924904E-5, 1.4727997038824E-5, 5.32710702716471E-5,
    5.66177684383836E-5, 5.64047207488199E-5, 1.4758661643028E-5,
    9.44845854241501E-5, 9.57206696068546E-5, 3.3274407072129E-5,
    3.06546644353056E-5, 2.93675964919317E-5, 0.000177679415758181,
    0.000189030849606588, 0.000190269518653738, 0.000206200051005881,
    0.000209068105399924, 0.000203322098262396, 0.000212338107948243,
    0.00021438703581283, 0.000216442305447895, 4.75140708889707E-5,
    3.37514541878684E-5, 2.77353202704951E-5, 2.48393294945137E-5,
    0.000143217943108754, 0.000151126394061319, 0.000154327428780106,
    0.000119061358110889, 0.000110748145751936, 0.000105907471168156,
    4.81129188826882E-5, 4.78095575003558E-5, 4.62030438289037E-5,
    0.000191319924318997, 0.000193033627095756, 0.000194964858279278,
    1.6036077645504E-5, 1.60872293565786E-5, 1.47029504034645E-5,
    2.13914444453711E-5, 2.16525915731274E-5, 2.14285517275856E-5,
    9.25019388344574E-5, 9.4767481308948E-5, 9.43763465588828E-5,
    6.44873906983284E-5, 6.24931070036558E-5, 6.17554564472181E-5,
    2.47091898119896E-5, 2.37095960579884E-5, 2.42644365277646E-5,
    0.000130570754934687, 0.000132195304662794, 0.000132663140616029,
    2.14325105893491E-5, 1.68695884413518E-5, 1.54965344680178E-5,
    0.000221694688676211, 0.000233514401056137, 0.000235889633577163,
    0.000238836823277494, 9.67747646867714E-5, 9.06740922273245E-5,
    8.58784236061755E-5, 8.33800166238539E-5, 0.000127368865669296,
    0.000124025090854535, 0.000122375384500037, 0.000174664802668481,
    0.000175857635737103, 0.000158771340269236, 0.000162958693752907,
    0.000164216631593485, 4.54202401489853E-5, 4.06180477999436E-5,
    0.000202977597982271, 0.000204239467852797, 2.05049657863801E-5,
    1.83282049598422E-5, 1.79464190898283E-5, 1.8341759329496E-5,
    0.000167646235227363, 0.00017062565312578, 0.000171436162853188,
    3.34780443206003E-5, 3.1683281185644E-5, 0.000239850883390686,
    0.000240681737454825, 0.00024884365724214, 0.000249837823797855,
    4.67616958949106E-5, 0.00020045976036647, 0.000202448359113449,
    2.02502777092692E-5, 1.86152591390056E-5, 1.87241643860013E-5,
    7.9147632856278E-5, 7.80415204931922E-5, 7.84874768661303E-5,
    0.000105188609430669, 0.000105747736233513, 0.000106305348027142,
    7.75258718219103E-5, 7.57624292742368E-5, 2.32986108234592E-5,
    2.414851795203E-5, 2.17377458444905E-5, 0.000123076490144437,
    0.000123303701641976, 7.70559273554931E-5, 7.94543645986401E-5,
    7.93892579543026E-5, 4.59919704155026E-5, 4.31740354968245E-5,
    4.23246266285699E-5, 1.70181339807751E-5, 1.68037414279397E-5,
    1.76431638357847E-5, 1.60655526572751E-5, 0.000106691752941611,
    0.000109538853648574, 0.000111196032257802, 0.000112063774528351,
    0.000215761856055098, 0.000217546641452393, 4.81925997727371E-5,
    4.5524135424491E-5, 0.000185828169444436, 0.000190993346159037,
    0.000193739174340904, 0.00016840636130973, 0.000172716392448405,
    0.000173653409872455, 5.7498681488784E-5, 4.04071070404086E-5,
    0.000216083492048803, 0.000217250360478778, 1.89235684113564E-5,
    1.81280247941602E-5, 1.68378107929493E-5, 4.03709673533818E-5,
    4.48860096107176E-5, 4.49484230868036E-5, 2.67007406062273E-5,
    2.44266335276728E-5, 2.49041052297657E-5, 2.16510027371338E-5,
    2.09130429091696E-5, 4.88662539644998E-5, 4.71351109372505E-5,
    4.77552121146534E-5, 4.23505175302371E-5, 4.3939538781283E-5,
    4.59182035823874E-5, 4.58392366343565E-5, 0.000192467361270318,
    0.000194565215902008, 0.000296253840246635, 0.000298974711407454,
    0.000301110389198279, 0.000221389901241328, 0.000227173960520158,
    0.000229850104596555, 2.82924483979289E-5, 3.3355387896189E-5,
    3.08577268879262E-5, 0.000272370597985697, 0.000272969337248048,
    0.00016245157071614, 0.000169211803444764, 0.000171565348883927,
    0.000173675043397824, 4.71171272810233E-5, 4.0121268196254E-5,
    2.32091452766463E-5, 2.51528779127883E-5, 2.37397545465035E-5,
    2.24515532264375E-5, 6.89096169275921E-5, 7.0281826447603E-5,
    2.68721781669529E-5, 2.63912204080605E-5, 2.5041862692563E-5,
    1.64514298968736E-5, 1.65999957528365E-5, 1.60064740702875E-5,
    1.45448770407045E-5, 8.51045121145721E-5, 8.51755243570964E-5,
    8.69231018280025E-5, 8.71030422165712E-5, 2.27494376816837E-5,
    3.12151636159191E-5, 2.93485649238849E-5, 1.17606995396957E-5,
    2.0355560709803E-5, 1.35773381994933E-5, 9.3507352890508E-5,
    9.00448320164183E-5, 9.21206006719604E-5, 7.23617844024596E-5,
    7.33622063902834E-5, 7.33970732720599E-5, 1.71272855577753E-5,
    1.42639520085448E-5, 2.09675309911968E-5, 0.00020037229218825,
    0.00020760229886732, 0.000210122488952632, 4.69338736212048E-5,
    4.1905988526177E-5, 0.000205220187603293, 0.000206733059207471,
    0.000209459926484155, 0.000212874381598852, 0.000215489003442063,
    1.52100061187241E-5, 1.43656723294612E-5, 1.52491246155688E-5,
    1.13067773497509E-5, 1.03405708261822E-5, 8.59641109721448E-6,
    1.49501452062183E-5, 1.5923483250802E-5, 1.25006025075809E-5,
    7.36773303421801E-5, 7.19884274779315E-5, 7.31998694111136E-5,
    2.94631235363161E-5, 2.00929353900678E-5, 1.73566225671056E-5,
    2.15908918204967E-5, 1.875410248372E-5, 0.000179852765806577,
    0.00018249088210625, 0.000186862230924144, 9.85518254689806E-5,
    9.60703159917486E-5, 0.000227148339209426, 0.000118333208025947,
    5.39862221302272E-5, 5.40445361880657E-5, 5.42765752894477E-5,
    1.31730529250039E-5, 1.1555965478536E-5, 1.09094413948402E-5,
    0.000196444240854469, 0.000199706870091094, 0.000201846279470801,
    -6.04388215288894E-5, -5.73754052092996E-5, -5.13936143660475E-5,
    -4.96675511692417E-5, -0.000258628614283929, -0.000268028517318085,
    -0.000274772531612541, -0.000276306578339733, -0.000113779187846086,
    -0.000140771766964597, -0.000137454183982501, -0.000135146407946826,
    -7.83652817584002E-5, -7.51761009894273E-5, -7.12031679102575E-5,
    -0.000141318646315235, -0.00014679083675459, -0.000149661988379975,
    -7.04897690338635E-5, -7.37197561811361E-5, -7.71320067566557E-5,
    -7.68830716709699E-5, -2.86856413862189E-5, -2.9411955232361E-5,
    -3.00818703753914E-5, -2.870696139754E-5, -3.4117689713802E-5,
    -3.20104213161203E-5, -3.21409496122921E-5, -9.2134764490747E-5,
    -9.16868205319608E-5, -0.000136232206596044, -0.000132586061168085,
    -0.000132852713800662, -1.30870307781299E-5, -3.15099748186386E-5,
    -3.01281753937915E-5, -8.69408836307763E-5, -8.97940435070413E-5,
    -9.12092704530961E-5, -5.70964243701273E-5, -4.46707889498927E-5,
    -4.32359425652634E-5, -4.86842082025743E-5, -4.54996412123784E-5,
    -6.46872631147271E-5, -5.30307425490074E-5, -5.07433923711742E-5,
    -4.84271371953599E-5, -0.000219059403417748, -0.000224573988083839,
    -0.000229976770471983, -0.000232507761832167, -3.40436581611298E-5,
    -2.48303796007165E-5, -2.35486096005733E-5, -0.000191990443378084,
    -0.000199353239796446, -0.000203557839388503, -9.55808286188138E-5,
    -9.59282032241323E-5, -9.78470979192075E-5, -9.99827944300319E-5,
    -9.80749921831465E-5, -9.58831412272059E-5, -5.08621116693542E-5,
    -5.08283171351354E-5, -5.20937023539347E-5, -1.57500019577661E-5,
    -1.54365825045927E-5, -1.57373176266773E-5, -2.93004283147955E-5,
    -2.67864280200325E-5, -2.72249915441811E-5, -0.000103999775916049,
    -0.000106237524340191, -0.00010707562563421, -4.75157296667608E-5,
    -4.85903443489915E-5, -4.7977901965151E-5, -4.53319812719858E-5,
    -4.35283802133455E-5, -4.29992676628666E-5, -7.41207906048623E-5,
    -7.90294295957285E-5, -8.05281246647205E-5, -7.9064708578683E-5,
    -6.73799840930393E-5, -6.47807321964586E-5, -6.14976773840052E-5,
    -0.000233358227733406, -0.00023956528715911, -0.000244929628956669,
    -0.000247795120522828, -0.000182318277523845, -0.00018601584364424,
    -0.00018788035169594, -5.11879743757895E-5, -4.98470493463035E-5,
    -3.1460441169805E-5, -2.65411563319063E-5, -2.49927813781904E-5,
    -0.000101667840751821, -0.000104894585059297, -8.53095142863769E-5,
    -8.38934157418752E-5, -6.10569597798648E-5, -6.3407288435959E-5,
    -6.37463054862954E-5, -6.33971771328257E-5, -0.000103387236450523,
    -0.000100168276082161, -9.92595956838113E-5, -0.000109726329090876,
    -0.000110957499282606, -9.47935003963853E-5, -9.42756615970848E-5,
    -8.51141514630104E-5, -8.39743479758787E-5, -0.000175360630727249,
    -4.38017841486577E-5, -4.13720571170717E-5, -7.11538184728099E-5,
    -7.26246165669835E-5, -7.25332967599816E-5, -4.17961284051748E-5,
    -4.30035902997738E-5, -4.25045870480367E-5, -5.30265949961022E-5,
    -5.24046963520384E-5, -5.17772585378147E-5, -6.00197312835325E-5,
    -6.19868414910227E-5, -3.98071413429408E-5, -3.90957388422324E-5,
    -4.12396808302684E-5, -6.67262799244972E-5, -6.64721181171269E-5,
    -4.38783415991852E-5, -4.12738416111742E-5, -4.13416860543441E-5,
    -8.48083382791914E-5, -8.7895711760536E-5, -8.88353145423417E-5,
    -2.37457275074766E-5, -2.39316099117362E-5, -2.2883882515488E-5,
    -2.53169558712538E-5, -4.46026032645208E-5, -3.74249913421995E-5,
    -3.56152313049179E-5, -3.46528298199614E-5, -4.29540518433942E-5,
    -4.09860500904578E-5, -0.000238546140452494, -0.000191990762682952,
    -9.8144551664155E-5, -9.27672011078358E-5, -8.97510256350109E-5,
    -4.02062681310942E-5, -3.51192917713804E-5, -3.39837067733465E-5,
    -0.000129117394562708, -0.00010636871903661, -5.63938484375672E-5,
    -5.50914763620411E-5, -6.57419194218267E-5, -6.64657378609036E-5,
    -6.76130409140946E-5, -1.50372465090242E-5, -1.7488742281513E-5,
    -8.63400765025487E-6, -6.61087628393079E-5, -6.74560469055157E-5,
    -7.80550215351524E-5, -8.10011773357098E-5, -8.16504579869895E-5,
    -5.52752279198044E-5, -5.72633168628562E-5, -5.6447727646363E-5,
    -2.35296755572778E-5, -2.21936179125628E-5, -2.05961980852501E-5,
    -1.00059504146824E-5, -4.86859233704074E-5, -4.63414298897862E-5,
    -7.96916959656742E-5, -7.66119147142951E-5, -7.41552259558385E-5,
    -5.64721412851063E-5, -5.01084482014051E-5, -4.71044414409125E-5,
    -9.96775491718814E-5, -0.000104703744942332, -0.000116264303103904,
    -0.000148180297736785, -0.000147539156393082, -3.20479557109248E-5,
    -2.48866797031219E-5, -2.27805228528504E-5, -1.77306650924467E-5,
    -0.000110286308346999, -0.000115243332103698, -6.84753458497333E-5,
    -6.75046203283884E-5, -6.87255222605783E-5, -6.98180484236827E-5,
    -3.65512184439678E-5, -3.50414948608758E-5, -8.8485342423852E-5,
    -8.96975360931403E-5, -9.05905544749614E-5, -6.33654925909669E-5,
    -6.44678839089473E-5, -6.49381858980164E-5, -6.60639302232802E-5,
    -4.6366792676196E-5, -4.5401140481312E-5, -4.34807677449201E-5,
    -4.32717080035978E-5, -7.87683363397365E-5, -8.15627712340216E-5,
    -8.2766903112383E-5, -4.45139651934162E-5, -4.32560448152651E-5,
    -4.25309672644836E-5, -4.43443682881005E-5, -4.81567580125228E-5,
    -4.5816243908898E-5, -4.25565339839772E-5, -4.14535757373381E-5,
    -4.14085075510383E-5, -7.11035486878865E-5, -7.36061165600523E-5,
    -7.55968307141138E-5, -3.60242368730532E-5, -2.94180510932531E-5,
    -2.71581506513584E-5, -0.000216309569072829, -0.000242563471062339,
    -3.41155968815426E-5, -3.18176000410559E-5, -7.07719714261946E-5,
    -6.7021622856087E-5, -6.41202509155401E-5, -5.39852131742483E-5,
    -5.47410691161271E-5, -5.397271514399E-5, -5.2995046787198E-5,
    -5.39709060205489E-5, -2.82369659250114E-5, -3.36998301195124E-5,
    -3.34134256867888E-5, -3.59297825979492E-5, -6.21389059549115E-5,
    -6.39968426096589E-5, -6.26584823354932E-5, -1.33122614385115E-5,
    -1.16941300486826E-5, -6.36087045677498E-5, -6.55202613715272E-5,
    -6.60936547717754E-5, -4.04268368807255E-5, -3.71601613953039E-5,
    -3.15440379300177E-5, -0.000197991622041989, -0.000200918840270814,
    -5.24792272895535E-5, -0.000115834867450271, -2.25763750808984E-5,
    -2.25097069557187E-5, -2.22242031914626E-5, -6.79002925912746E-5,
    -6.93124120196591E-5, -6.97675679805147E-5, -6.32016124479785E-5,
    -5.95648922287427E-5, -5.70638725353664E-5, 0.000273752882260313,
    0.000273864602470732, 0.000273281701251073, 0.000273071525880451,
    0.000365645315988412, 0.000367497809226628, 0.000368925089562531,
    0.000332035460081276, 0.000148498625397294, 0.000454977112679053,
    0.000454629800291257, 0.000454330808297813, 0.000323762744470077,
    0.000323470417910032, 0.000323021283896713, 0.000180738852244374,
    0.000180163932715592, 0.000179804886436456, 0.000296781612502824,
    9.77633376117059E-5, 9.87482141174926E-5, 9.73395467170407E-5,
    9.71268897531422E-5, 9.69682977963874E-5, 9.70354992740438E-5,
    9.68965501348053E-5, 0.000123074446799922, 0.000122880122417272,
    0.000122892013242868, 0.000116575620415651, 0.000106414817570785,
    0.000189503276867691, 0.000189203829606469, 0.000189257434549482,
    2.78456924211579E-5, 0.000125994560242789, 0.000125848845000646,
    0.000120215290702905, 0.000120448707942347, 0.000120576866945028,
    0.000234775840128308, 0.000233701638556481, 0.000233505461219002,
    0.000254884259208456, 0.000254567746612302, 0.000268009361377123,
    0.000265368850497251, 0.000265130428184004, 0.000264869442643255,
    0.000266573474306719, 0.000258325442271708, 0.000257712090742478,
    0.000257347091326681, 0.000177261601269884, 0.000175956773662035,
    0.000177876038380679, 0.000311051801488973, 0.000310101385548383,
    0.000309465310556659, 0.000143693747501502, 0.000143737760724488,
    0.000144050141748111, 0.000291302718749029, 0.000291108619278903,
    0.000290847999506484, 6.68981893148582E-5, 6.6915546491714E-5,
    6.67966527573992E-5, 3.71414464031373E-5, 3.70891740777201E-5,
    3.71658693542629E-5, 0.000121802367149253, 0.00012155390932898,
    0.000121601338103064, 0.000168487166614378, 0.000168730631343847,
    0.000168831082081428, 7.22249194787504E-5, 7.22999404069799E-5,
    7.22423384929156E-5, 0.000175902736206673, 0.000175723684876139,
    0.000175662408278896, 9.55533011942114E-5, 9.58990180370803E-5,
    9.60246591327383E-5, 0.000300759397254894, 0.000300894385149177,
    0.000300670365773622, 0.000300334500661499, 0.000330132992420177,
    0.000330239379386434, 0.000330808052562844, 0.000331175137146682,
    0.000309687143193141, 0.000310040934498775, 0.000310255736195978,
    0.00022585277704427, 0.000225704685083407, 0.000190231781439041,
    0.000189499850084813, 0.000189209412971676, 0.000147088080900806,
    0.000145512632859241, 0.000288287112268648, 0.000288132883594672,
    8.15619255662449E-5, 8.17354933958012E-5, 8.16927245761237E-5,
    8.17389364623218E-5, 0.000271033471677885, 0.000270793929207941,
    0.000270695758537, 0.000143204373411476, 0.00014264078046825,
    0.000334644383787072, 0.00033495739905191, 0.00033395780870515,
    0.000333812171773734, 0.00022212232662216, 0.000244261544515128,
    0.00024382041623052, 9.14040961820791E-5, 9.12398757059891E-5,
    9.12574611459828E-5, 0.000120943761261453, 0.000121045110792966,
    0.000120992063914167, 0.000158215204426771, 0.000158152432585551,
    0.000158082606564956, 0.000137545603105443, 0.00013774927076526,
    6.31057521664E-5, 6.32442567942624E-5, 6.29774266747589E-5,
    0.000189802770068934, 0.000189775819759103, 0.000120934268954678,
    0.000120728206209814, 0.000120730944008647, 0.000130800308694694,
    0.000131069747257361, 0.000131159941170912, 4.07638614882518E-5,
    4.07353513396759E-5, 4.05270463512727E-5, 4.13825085285289E-5,
    0.000151294356206132, 0.000146963844990774, 0.00014681126356272,
    0.000146716604348313, 0.000258715907898492, 0.000258532691542851,
    0.000286738740225231, 0.000237514898107443, 0.000283972721108591,
    0.000283760547266873, 0.000283490199975915, 0.000208612629440824,
    0.000207835684219785, 0.000207637116645802, 0.000186616076051492,
    0.000146775826077018, 0.00027247734048637, 0.000272341836840819,
    8.46654878331831E-5, 8.45937626550638E-5, 8.44508517070439E-5,
    5.54082138624061E-5, 6.23747518922305E-5, 5.35824307370584E-5,
    9.28095034455352E-5, 9.18826804331886E-5, 0.000102959126764918,
    0.000102652180072844, 0.000102563500896159, 0.000104141481884304,
    0.000104398427800107, 0.000104202939761016, 6.58801930875149E-5,
    6.61331566938458E-5, 6.65144016676375E-5, 5.58451870490389E-5,
    0.000241153284640725, 0.000240906645791794, 0.000375945536212309,
    0.000375586626121749, 0.000375265615154118, 0.000277862042526435,
    0.000277282408721564, 0.000276954546037468, 0.00012796999756981,
    0.000138059132838521, 0.00014712202999183, 0.000420550895722482,
    0.00042050849364113, 0.000194499526427065, 0.000194098483147886,
    0.000194345871736778, 0.000191405708490271, 0.000157403435628023,
    0.000155364600299952, 9.16844911263796E-5, 9.26574982411767E-5,
    9.24652768070818E-5, 9.22696016501201E-5, 0.00010546083537156,
    0.000105323321308479, 0.000115357520590805, 0.000116088756501201,
    0.000115632417167524, 7.98169224878405E-5, 8.10678796617838E-5,
    8.09446599683038E-5, 8.06088072639847E-5, 0.000131471304790768,
    0.000130576664838408, 0.000130403869572923, 0.000130374750220169,
    0.00010151777402142, 0.000112777934849941, 0.000112115468036268,
    5.62746647331119E-5, 6.36116055250681E-5, 5.61083054639768E-5,
    0.000137851721178609, 0.000138201590028941, 0.000137936844580858,
    0.000114918318386437, 0.000114815782127622, 0.000114805580823098,
    8.82308342456618E-5, 8.78700685685971E-5, 9.65643617053105E-5,
    0.000236396529061304, 0.000237020349960573, 0.000237280639603991,
    0.000263243442694034, 0.000284469459588516, 0.000239335784484836,
    0.000238550659248526, 0.00028023189791035, 0.000279896004454939,
    0.000279609254357603, 6.91952192929724E-5, 6.91067414455883E-5,
    6.92218397595588E-5, 6.43018241369488E-5, 6.43114768467311E-5,
    3.68333770222259E-5, 4.86499753257307E-5, 4.93369089375908E-5,
    4.84303851055301E-5, 0.000135816236297092, 0.00013598527008759,
    0.000135858351746607, 4.27753849748277E-5, 3.17870654387504E-5,
    8.09653271348554E-5, 8.71111531920239E-5, 8.48477572554954E-5,
    0.000220279602687303, 0.000219651043501554, 0.000218406268854162,
    0.00029654344751097, 0.000296989156262563, 0.000279627566498979,
    0.000234168075476219, 7.65625972111257E-5, 7.65542431437843E-5,
    7.65007784809104E-5, 8.10733455162785E-5, 8.08683774981951E-5,
    8.06770093753549E-5, 0.000259645853302448, 0.000259271762319837,
    0.000258910152006168, 4.95110793568933E-5, 5.00404177988245E-5,
    5.07764619830389E-5, 5.10001282212672E-5, 6.34681308047068E-5,
    6.53615574640038E-5, 6.76139412345525E-5, 6.3921582958754E-5,
    3.22856569190546E-5, 8.11820827398135E-5, 8.12985365744666E-5,
    8.11649256638287E-5, 5.68552019614438E-5, 5.7203371777287E-5,
    5.7377536507888E-5, 3.50687106487095E-5, 3.6394210321663E-5,
    3.71724016255706E-5, 5.64117823968083E-5, 1.88807578737722E-5,
    1.94420173517487E-5, 1.94668317078361E-5, 1.66119396937758E-5,
    1.63357227790492E-5, 1.64921438695021E-5, 1.63939444564112E-5,
    2.07296534964961E-5, 2.07358503254429E-5, 2.05801700393411E-5,
    2.32281805463844E-5, 2.37388197225164E-5, 3.22683704410136E-5,
    3.24542021038902E-5, 3.25956726346271E-5, 6.01182541699502E-6,
    2.18675462474637E-5, 2.19228352524083E-5, 1.97250152117184E-5,
    2.04373755056033E-5, 2.09046387276236E-5, 4.72866508558827E-5,
    4.74729541325275E-5, 4.73844467319595E-5, 4.62593589537557E-5,
    4.68379273620646E-5, 5.03967930720302E-5, 5.2293968481791E-5,
    5.22648716967934E-5, 5.24017560490042E-5, 5.01869711205051E-5,
    5.13157543739057E-5, 5.23673356455452E-5, 5.25655720260399E-5,
    3.79900410951307E-5, 3.92466864840876E-5, 3.9897061463215E-5,
    5.36035406898932E-5, 5.46548408198894E-5, 5.52108953671755E-5,
    2.76197157763789E-5, 2.77574516509963E-5, 2.73818536010836E-5,
    5.46324272905447E-5, 5.47531190865256E-5, 4.90865273567848E-5,
    1.23279788216829E-5, 1.27120567198702E-5, 1.25043137458565E-5,
    7.4042880316241E-6, 7.24902413614109E-6, 6.93040269149981E-6,
    2.18222939494014E-5, 2.21640563931695E-5, 2.1870427173411E-5,
    2.76458152076316E-5, 2.80595435670063E-5, 2.77872708957674E-5,
    1.19091557904637E-5, 1.19502672132458E-5, 1.21947833812728E-5,
    3.08218970377023E-5, 3.08975361463193E-5, 3.08575792391192E-5,
    1.71064917496238E-5, 1.85215670271479E-5, 1.88209640261914E-5,
    5.12735405349637E-5, 5.2294645760697E-5, 5.26570483310551E-5,
    5.24645289385543E-5, 5.81111153469926E-5, 5.9104980617149E-5,
    6.0131092365808E-5, 6.05520472730162E-5, 5.01430959038565E-5,
    5.03423695545936E-5, 5.04368325334011E-5, 4.01657609281628E-5,
    4.02834638832687E-5, 3.90621889224571E-5, 3.97957019382402E-5,
    3.96217856749283E-5, 3.17028632353248E-5, 3.2438898998846E-5,
    5.30576793269801E-5, 4.91101009981984E-5, 1.54090636032727E-5,
    1.57528665974208E-5, 1.56709570423235E-5, 1.56999233432718E-5,
    4.41132580615288E-5, 4.43555642164932E-5, 4.43694798475684E-5,
    2.68616827286436E-5, 2.70302730983674E-5, 5.84925554486388E-5,
    5.94895048118587E-5, 5.97905232134179E-5, 5.96680633077677E-5,
    4.58889836785966E-5, 4.69030804210221E-5, 4.71613252815912E-5,
    1.7167194723224E-5, 1.73317864785151E-5, 1.72950527691115E-5,
    1.92183794084602E-5, 1.93422510037693E-5, 1.935343172087E-5,
    2.67005571451648E-5, 2.68292290043284E-5, 2.67908342966075E-5,
    2.18979185572216E-5, 2.2108884478157E-5, 1.12445797461431E-5,
    1.17905625758033E-5, 1.17731551555149E-5, 3.02845292773929E-5,
    3.03006339246481E-5, 1.89177514552505E-5, 1.91144836974535E-5,
    1.93162134696503E-5, 2.15674535833225E-5, 2.25238898775624E-5,
    2.27394549049518E-5, 6.76241443584629E-6, 8.41725882806116E-6,
    8.33286057202032E-6, 8.42899567359963E-6, 2.47721080692815E-5,
    2.54096883505649E-5, 2.5609719397609E-5, 2.57269988646583E-5,
    4.59015723254906E-5, 4.59364102862878E-5, 5.49621421903981E-5,
    4.74324501795087E-5, 5.19665808283082E-5, 5.29115897021824E-5,
    4.92029490182774E-5, 4.37523027267379E-5, 4.44118697871288E-5,
    4.45345372986767E-5, 3.50825366107904E-5, 3.19656704607731E-5,
    5.33349033348119E-5, 5.34961517756183E-5, 1.55694757423836E-5,
    1.55925117388008E-5, 1.5626135675235E-5, 1.09203865947493E-5,
    1.14770533256358E-5, 1.13618846579162E-5, 1.90811905129308E-5,
    1.92656482124E-5, 1.87406064602464E-5, 1.90743471222254E-5,
    1.91119371645965E-5, 1.71025650601123E-5, 1.67304605956358E-5,
    1.67732301585457E-5, 1.28892448545344E-5, 1.32585936370107E-5,
    1.3777157826003E-5, 1.27412750012796E-5, 4.52627028769896E-5,
    4.55620675366117E-5, 7.07087864278818E-5, 7.08648912462282E-5,
    7.05596719789186E-5, 5.20482933596809E-5, 5.29700567967108E-5,
    5.31793169299577E-5, 2.99944326267102E-5, 3.2177675953578E-5,
    3.29137782542685E-5, 6.88998913826616E-5, 6.89297004733922E-5,
    3.73113148165876E-5, 3.85135339135051E-5, 3.88446677598336E-5,
    3.79873198866404E-5, 3.60917479558624E-5, 3.71699357342353E-5,
    1.84211370266319E-5, 1.84484425620865E-5, 1.83829438917078E-5,
    1.86044128258958E-5, 1.69270069318987E-5, 1.69010700583061E-5,
    2.21171078211038E-5, 2.2498782723166E-5, 2.25468686768109E-5,
    1.55739740088527E-5, 1.59348952545504E-5, 1.58753733593442E-5,
    1.57680244915957E-5, 2.14087353070463E-5, 2.14302249940366E-5,
    2.15568160477053E-5, 2.14438512140751E-5, 1.99306218040562E-5,
    2.13952669200538E-5, 2.16133354568108E-5, 1.22403495996527E-5,
    1.27032906152003E-5, 1.23939858347771E-5, 2.33250786483573E-5,
    2.40671636500194E-5, 2.43221020298916E-5, 1.86429584269173E-5,
    1.86498839892108E-5, 1.83539857791796E-5, 1.886208198862E-5,
    1.92336800945168E-5, 1.99948726088816E-5, 4.41336290504611E-5,
    4.54321388837292E-5, 4.58446525073635E-5, 5.01325947045224E-5,
    5.37942925573204E-5, 4.51701076698597E-5, 4.56108046180143E-5,
    4.80190172336491E-5, 4.83847848583206E-5, 4.91205363218144E-5,
    1.36458297878586E-5, 1.37758626585314E-5, 1.38166504337861E-5,
    1.327392864073E-5, 1.33962991955848E-5, 6.96606326164944E-6,
    1.02962563444529E-5, 1.00496298351518E-5, 9.63382587355669E-6,
    2.17659783502549E-5, 2.19224282231744E-5, 2.17472852240796E-5,
    7.94555421235263E-6, 6.9667092766014E-6, 1.6606878277397E-5,
    1.69784025305824E-5, 1.70949853165245E-5, 4.233731001795E-5,
    4.30260962865431E-5, 4.31985897841356E-5, 5.61952915614785E-5,
    5.65256588991435E-5, 5.18251874288191E-5, 3.64210417385055E-5,
    1.3124923042843E-5, 1.30082775304737E-5, 1.31385948649914E-5,
    1.60427003246693E-5, 1.62341391749446E-5, 1.62973779552823E-5,
    4.73184759231031E-5, 4.78411855526845E-5, 4.77303567508681E-5,
    0.00316273931821937, 0.00323012266043989, 0.00344427516732856,
    0.00347904107898731, 0.00190445814790816, 0.00138768192629017,
    0.00189553286144795, 0.000603567933947592, 0.0, 0.00542294415968894,
    0.00549979993066135, 0.00555171324174847, 0.00366427578860721,
    0.00372806448487612, 0.00380561232562672, 0.0, 0.0, 0.0, 0.00376430235830372,
    0.0, 0.0, 0.0, 0.000765053508162285, 0.000710657297432102,
    0.00070342429401047, 0.000761790838303422, 0.00102935893159537,
    0.00105614340654612, 0.00105448224708839, 0.0, 0.0, 0.000302060990723891,
    0.000412708977886082, 0.000411026634923628, 0.0, 0.00122044980642415,
    0.00124023027433298, 0.0, 0.0, 0.0, 0.00328092466398492, 0.00337283732196622,
    0.00340409077390963, 0.00297933108246382, 0.00303941548885591,
    0.00343325616119504, 0.00364592107540448, 0.00369484354074954,
    0.00384340183733609, 0.000216272276299489, 0.0, 0.0, 0.0,
    0.00267152912160627, 0.00297694235491935, 0.00311313804309759,
    0.0017354597763057, 0.00149198553345599, 0.00140945592961051,
    0.000276459650326239, 0.000274639473534542, 0.000265000140113862,
    0.00423155274633553, 0.00432997765529776, 0.00283513951146901, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00125776953554268, 0.00129618606474425, 0.00128955646281257,
    0.000674529594136777, 0.000608965506928439, 0.000557483998074908, 0.0, 0.0,
    0.0, 0.00189032297553604, 0.0019211124177781, 0.00192997513830128, 0.0, 0.0,
    0.0, 0.00326769233569489, 0.00337946698715975, 0.0035733574386159,
    0.0037408537310981, 0.0013378816195423, 0.000959321274008591,
    0.000852676114751658, 0.000779863072692468, 0.0017917262620282,
    0.00168763004507377, 0.00165830224731171, 0.00239345131893492,
    0.0025404517920663, 0.00272437150288935, 0.0028776926190635,
    0.00291109668858622, 0.000306742439901483, 8.08394608477184E-5,
    0.00400980663146245, 0.00288762912744244, 0.0, 0.0, 0.0, 0.0,
    0.00256083264728891, 0.00262299798346528, 0.0026398817740439, 0.0, 0.0,
    0.00379600685717999, 0.00381564871183336, 0.00405291215034432,
    0.00407661982843735, 0.00035881579828008, 0.00318403859388481,
    0.00322992084592619, 0.0, 0.0, 0.0, 0.000875615242466071,
    0.000861268915744123, 0.000867049595602825, 0.00149617806653191,
    0.00150618978203488, 0.00151617075353197, 0.000734067764110624,
    0.000714613824728568, 0.0, 0.0, 0.0, 0.00167367934394646,
    0.00167774477947415, 0.000858044982321915, 0.000934957425519836,
    0.000934048472514554, 0.000222739183503562, 0.000127989933561757,
    0.000125448963277001, 0.0, 0.0, 0.0, 0.0, 0.00142630231138119,
    0.00146244280981383, 0.00149054504268739, 0.00150525559542309,
    0.0028315874371318, 0.00286540727802424, 0.000277308748561884,
    0.000308313365484715, 0.00384182587766456, 0.00406983530786069,
    0.00301439522091757, 0.00318573199252424, 0.00334818654370331,
    0.00337487958489845, 0.000306742180422354, 0.0, 0.00370510379185195,
    0.00378093027607518, 0.0, 0.0, 0.0, 4.02874900391907E-5,
    0.000303410823380834, 0.000303849912989112, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00046119123451542, 0.00040399239656701, 0.000409556073226447,
    0.000209525686126203, 0.000301451286389439, 0.000400336760533612,
    0.000399626318794201, 0.00291950027876245, 0.00301241107205556,
    0.00482820100825615, 0.00489352445265081, 0.0047809200110557,
    0.00342673286181991, 0.00360469025584953, 0.00366608657477434, 0.0, 0.0, 0.0,
    0.00411703020984294, 0.00413020931917847, 0.00225138311857112,
    0.00248327051937234, 0.00253284225211115, 0.00251902846191918,
    0.00035952510331615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000718513820079563,
    0.000779574888642559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00104964032023035,
    0.00104932525849012, 0.00111950376012732, 0.00112235930969509, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00122787509575836, 0.00117246510565752, 0.00120568336844133,
    0.000759481388128738, 0.000860034545857356, 0.000860515391687986, 0.0, 0.0,
    0.0, 0.00263814647813374, 0.00288175910085282, 0.00293217266725261,
    0.000272093169177141, 8.30174923417011E-5, 0.00295034979201318,
    0.0029820467343358, 0.00314898503530393, 0.00328166920449582,
    0.00344683097027668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.000819908596259604, 0.000798128656747031, 0.000813745041371966, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00269101879788563, 0.00274629606120319, 0.00301189824254951,
    0.0019518235141236, 0.0017358694200927, 0.00344129862786286,
    0.0015122326080142, 0.000448680393974168, 0.000491840402968088,
    0.000494160873765115, 0.0, 0.0, 0.0, 0.00315721381523464,
    0.00323208800763513, 0.00328112027281264, 0.000403003872614622,
    0.00033198679667017, 0.000102140223634258, 0.0, 0.00394727007948396,
    0.00442841336007867, 0.00482716549469909, 0.00442299485721947,
    0.00213072213256612, 0.00265339469051478, 0.00239989096461744,
    0.00223298229881854, 0.000828090788330959, 0.000737979601288319,
    0.000642715775019153, 0.00236003033284452, 0.00253939554706289,
    0.00266137693588316, 0.000879768540019474, 0.000918960408097447,
    0.000966730814987184, 0.00096324442860183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00134295859367475, 0.00133531969182404, 0.00192275078656353,
    0.0018570744759, 0.00186187542815058, 0.0, 0.0, 0.0, 0.000969270640551727,
    0.00100638927926265, 0.00102483935778903, 0.000332691827388678, 0.0, 0.0,
    0.0, 0.0, 0.000481795580389021, 0.000105213202515309, 5.03995399604708E-5,
    0.0, 0.00328522266440686, 0.00340218403188384, 0.0035757607299812,
    0.00369286204254868, 0.0, 0.0, 0.0, 0.00382814072478244, 0.00413295001857449,
    0.00439334327512627, 0.00168125839992834, 0.0016885312265099,
    0.00178180256215596, 0.00155211136006164, 0.00146548757715721,
    0.00131818366646159, 0.000101212945877934, 0.000101145365895933,
    0.000154635676295016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00138605095772317,
    0.00147632916766049, 0.00149071281569761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.000735282387879273, 0.000899939344560911, 0.000919476345154913,
    0.000762351617694264, 0.000494931604798635, 0.00036900102116018,
    0.000349187227283769, 0.00384945138826365, 0.00399308426034642,
    0.00411681125508698, 0.0043057742518731, 0.0028027749508521,
    0.00288139479188925, 0.00292114375913085, 5.09892708371809E-5, 0.0, 0.0, 0.0,
    0.0, 0.00204458309619482, 0.00253449023681656, 0.00105934345438489,
    0.000938104253457917, 0.000519913451993162, 0.000594498927245939,
    0.000597889293900897, 0.000594397776746263, 0.00129241302400804,
    0.00124352343071822, 0.00122978175404302, 0.00160362846701393,
    0.00162579468906111, 0.00111290226580334, 0.00110509662250557,
    0.000881005531461925, 0.000811705160898036, 0.00349599188547493, 0.0, 0.0,
    0.000768574343982484, 0.00078622553981049, 0.000785129459453487, 0.0, 0.0,
    0.0, 0.000209065072389309, 0.000206577110473421, 0.000103046431733608,
    0.000458091137403008, 0.000527276270320509, 0.0, 0.0, 0.0,
    0.000556958031400577, 0.000554663982826278, 0.0, 0.0, 0.0,
    0.00102739630524984, 0.0011246291465912, 0.0011388421308265, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00365615938219762, 0.00298427895033107,
    0.00170112235576766, 0.00138980283539676, 0.00128525090327218, 0.0, 0.0, 0.0,
    0.0025562404388148, 0.00190711326479404, 0.000382691680227724,
    0.000322109632279552, 0.000551654929343058, 0.000611050265944642,
    0.000622524212593899, 0.0, 0.0, 0.0, 0.000552491421255529,
    0.000618410126180822, 0.000833942184556114, 0.000869299860122992,
    0.000931519356736927, 0.000268397981324737, 0.000278233266838444,
    0.000274144220301331, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000916874926917967,
    0.000876521718945319, 0.000794236073484968, 0.000273275211192244, 0.0, 0.0,
    0.0018769372785944, 0.00236100510788803, 0.00216905359190361,
    0.00205684602059592, 0.00204522559400896, 0.0, 0.0, 0.0, 0.0,
    0.00301489158007759, 0.00323453536636099, 0.000813452179458003,
    0.000749180911357338, 0.000816887659363117, 0.000831132829892927, 0.0, 0.0,
    0.00115139411349826, 0.00122383892091465, 0.00123822289789749,
    0.000589975306889592, 0.000600965751012125, 0.000605669012823086,
    0.000616927398512269, 0.0, 0.0, 0.0, 0.0, 0.00104184624975356,
    0.00108366445928025, 0.001154691341191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.000906173692601975, 0.000995532376059937, 0.00102548123337373,
    0.0, 0.0, 0.0, 0.00327496298719443, 0.00366161934028134, 0.0, 0.0,
    0.000459407390571709, 0.000433078553222337, 0.00036106400309207,
    0.000265621680080283, 0.00032060456081872, 0.000265559572698962,
    0.000261290599292337, 0.000266183937012604, 0.0, 0.0, 0.0, 0.0,
    0.000411520467680391, 0.000479049890900103, 0.000468342607916906, 0.0, 0.0,
    0.000656696770616768, 0.000731533179544752, 0.000738415160939945, 0.0, 0.0,
    0.0, 0.00395303032471682, 0.00409053091605072, 0.000104322539504925,
    0.00163731556686683, 0.0, 0.0, 0.0, 0.000629589378852584,
    0.000696546430767225, 0.000701539064241042, 0.000475007920325823,
    0.000396218253609057, 0.000329102744860731, -1.30358515362054E-5,
    -1.30411715462253E-5, -1.30134143452892E-5, -1.30034059943072E-5,
    -8.12545146640915E-6, -8.16661798281396E-6, -8.1983353236118E-6,
    3.07440240815996E-6, 4.94995417990981E-6, -2.06807778490478E-5,
    -2.06649909223299E-5, -2.06514003771733E-5, -1.47164883850035E-5,
    -1.47032008140924E-5, -1.46827856316688E-5, 8.60661201163686E-6,
    8.57923489121868E-6, 8.56213744935506E-6, -1.2365900520951E-5,
    3.91053350446824E-6, 7.05344386553519E-7, 3.89358186868163E-6,
    -5.39593831961901E-6, -5.38712765535486E-6, -5.39086107078021E-6,
    -5.38314167415585E-6, -6.15372233999608E-6, -6.1440061208636E-6,
    -6.14460066214341E-6, 9.87928986573314E-7, 4.09287759887634E-6,
    -9.97385667724688E-6, -9.95809629507732E-6, -9.96091760786747E-6,
    1.74035577632237E-6, -6.29972801213943E-6, -6.2924422500323E-6,
    -7.07148768840619E-6, -7.0852181142557E-6, -7.09275687911928E-6,
    -9.02984000493493E-6, -8.98852455986465E-6, -8.98097927765391E-6,
    -1.27442129604228E-5, -1.27283873306151E-5, -1.27623505417677E-5,
    -1.26366119284405E-5, -1.26252584849526E-5, -1.26128306020597E-5,
    5.33146948613438E-6, 1.2301211536748E-5, 1.22720043210704E-5,
    1.22546233965086E-5, -4.79085408837524E-6, -4.7555884773523E-6,
    -9.41143060215235E-7, 1.24420720595589E-5, 1.24040554219353E-5,
    1.23786124222664E-5, -4.95495681039662E-6, -4.95647450774097E-6,
    -4.96724626717625E-6, -1.3871558035668E-5, -1.38623152037573E-5,
    -1.3849904738404E-5, 3.52095733236096E-6, 3.52187086798495E-6,
    3.51561330302101E-6, -8.44123781889483E-7, -8.42935774493638E-7,
    -8.4467884896052E-7, -6.09011835746265E-6, -6.07769546644902E-6,
    -6.0800669051532E-6, -8.42435833071889E-6, -8.43653156719235E-6,
    -8.44155410407142E-6, -4.24852467522061E-6, -4.25293767099882E-6,
    -4.24954932311268E-6, -8.79513681033363E-6, -8.78618424380696E-6,
    -8.78312041394478E-6, -5.97208132463821E-6, -5.99368862731752E-6,
    -6.00154119579615E-6, -1.67088554030496E-5, -1.67163547305098E-5,
    -1.67039092096457E-5, -1.668525003675E-5, -1.50060451100081E-5,
    -1.50108808812015E-5, -1.50367296619475E-5, -1.50534153248492E-5,
    -1.54843571596571E-5, -1.55020467249387E-5, -1.55127868097989E-5,
    -1.25473765024595E-5, -1.25391491713004E-5, -5.94474316997003E-6,
    -5.9218703151504E-6, -5.91279415536487E-6, 1.86187444178236E-6,
    1.84193206150938E-6, -1.44143556134324E-5, -1.44066441797336E-5,
    3.54617067679326E-6, 3.71524969980915E-6, 3.71330566255107E-6,
    3.71540620283281E-6, -1.2906355794185E-5, -1.28949490099019E-5,
    -1.28902742160476E-5, 1.88426807120363E-6, 1.87685237458224E-6,
    -1.59354468470034E-5, -1.59503523358052E-5, -1.59027527954834E-5,
    -1.58958177035111E-5, 1.47100878557722E-6, -6.42793538197704E-6,
    -6.41632674290843E-6, 3.97409113835126E-6, 3.9669511176517E-6,
    3.96771570199925E-6, -6.36546111902383E-6, -6.37079530489295E-6,
    -6.36800336390352E-6, -7.53405735365577E-6, -7.53106821835958E-6,
    -7.52774316975982E-6, -6.87728015527214E-6, -6.88746353826298E-6,
    3.15528760832E-6, 3.16221283971312E-6, 3.14887133373795E-6,
    -9.98961947731231E-6, -9.98820103995281E-6, -6.71857049748213E-6,
    -6.70712256721191E-6, -6.70727466714704E-6, -7.26668381637189E-6,
    -7.28165262540892E-6, -7.28666339838398E-6, 1.94113626134532E-6,
    -9.05230029770575E-7, -9.00601030028281E-7, -9.19611300633976E-7,
    -7.5647178103066E-6, -8.16465805504298E-6, -8.15618130904002E-6,
    -8.15092246379515E-6, -1.52185828175584E-5, -1.52078053848736E-5,
    1.3654225725011E-5, 9.50059592429772E-6, -1.29078509594814E-5,
    -1.28982066939488E-5, -1.28859181807234E-5, -5.79479526224511E-6,
    -5.77321345054958E-6, -5.7676976846056E-6, 1.5814921699279E-6,
    -5.87103304308073E-6, -1.18468408907118E-5, -1.18409494278617E-5,
    4.23327439165915E-6, 4.22968813275319E-6, 4.2225425853522E-6,
    -1.42072343236939E-6, -5.07111804001874E-7, -3.62043450926071E-7,
    9.01063140247915E-7, 8.92064858574646E-7, 4.9028155602342E-6,
    4.88819905108779E-6, 4.88397623315043E-6, -2.21577621030434E-6,
    -2.22124314468312E-6, -2.21708382470248E-6, 1.73368929177671E-6,
    1.74034622878542E-6, 1.75037899125362E-6, -4.6537655874199E-7,
    -1.20576642320363E-5, -1.20453322895897E-5, -1.63454580961874E-5,
    -1.63298533096413E-5, -1.63158963110486E-5, -1.32315258345921E-5,
    -1.32039242248364E-5, -1.31883117160699E-5, 1.347052605998E-6,
    1.26659754897725E-6, 3.06504229149646E-6, -1.91159498055674E-5,
    -1.91140224382332E-5, -4.98716734428373E-6, 9.70492415739428E-6,
    9.71729358683889E-6, -4.90783867923771E-6, 2.38490053981852E-6,
    2.35400909545382E-6, 3.05614970421265E-6, 3.08858327470589E-6,
    3.08217589356939E-6, 3.07565338833734E-6, -5.55057028271368E-6,
    -5.54333270044625E-6, 1.6021877859834E-6, 1.61234384029446E-6,
    1.60600579399339E-6, 1.99542306219601E-6, 1.97726535760448E-6,
    1.97425999922692E-6, 1.96606846985328E-6, -6.91954235740885E-6,
    -6.87245604412676E-6, -6.86336155646961E-6, -6.86182895895626E-6,
    4.61444427370092E-6, 1.01601743108055E-6, 1.010049261588E-6,
    -3.51716654581949E-6, 4.78282748308783E-7, -3.50676909149855E-6,
    -6.56436767517183E-6, -6.58102809661625E-6, -6.56842117051707E-6,
    -6.38435102146871E-6, -6.37865456264564E-6, -6.37808782350545E-6,
    1.73001635775807E-6, 1.72294252095288E-6, 5.74787867293515E-7,
    1.24419225821739E-5, 1.24747552610828E-5, 1.24884547159995E-5,
    -1.31621721347017E-5, 1.42234729794258E-5, -2.75098602856133E-6,
    -2.74196160055778E-6, -1.55684387727972E-5, -1.55497780252744E-5,
    -1.55338474643113E-5, 2.66135458819125E-6, 2.65795159406109E-6,
    2.66237845229072E-6, 5.5432607014611E-7, 5.54409283161475E-7,
    -2.40741026289058E-7, 1.24743526476232E-6, 1.26504894711771E-6,
    1.24180474629564E-6, -7.54534646094953E-6, -7.55473722708835E-6,
    -7.54768620814482E-6, 2.44430771284729E-7, 2.09125430518095E-7,
    3.37355529728564E-6, 5.4786888800015E-7, 3.83926503418531E-7,
    -4.68680005717665E-6, -4.67342645747987E-6, -4.64694189051408E-6,
    -1.02256361210679E-5, -1.02410053883642E-5, -1.33155984047133E-5,
    -1.23246355513799E-5, -4.25347762284031E-6, -4.25301350798802E-6,
    -4.25004324893947E-6, 1.22838402297392E-6, 1.20699070892829E-6,
    1.20413446828888E-6, -1.18020842410203E-5, -1.17850801054471E-5,
    -1.17686432730076E-5, 8.0, 7.0, 3.0, 0.0, 23.0, 28.0, 32.0, 28.0, 24.0, 31.0,
    28.0, 26.0, 13.0, 12.0, 11.0, 24.0, 25.0, 26.0, 15.0, 15.0, 15.0, 15.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.0, 18.0, 19.0, 19.0, 19.0, 0.0, 0.0, 0.0,
    14.0, 14.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 9.0, 3.0, 2.0, 0.0, 22.0, 22.0,
    23.0, 24.0, 0.0, 0.0, 0.0, 36.0, 37.0, 39.0, 22.0, 22.0, 23.0, 20.0, 19.0,
    17.0, 3.0, 3.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.0, 18.0, 18.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 14.0, 12.0, 9.0, 7.0, 7.0, 24.0, 24.0,
    24.0, 26.0, 22.0, 22.0, 22.0, 2.0, 0.0, 0.0, 0.0, 0.0, 26.0, 34.0, 16.0,
    14.0, 10.0, 11.0, 11.0, 11.0, 16.0, 16.0, 16.0, 19.0, 19.0, 15.0, 15.0, 13.0,
    12.0, 29.0, 0.0, 0.0, 13.0, 13.0, 13.0, 0.0, 0.0, 0.0, 5.0, 5.0, 3.0, 9.0,
    10.0, 0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 23.0, 22.0, 23.0, 19.0, 18.0, 0.0,
    0.0, 0.0, 27.0, 23.0, 8.0, 7.0, 10.0, 11.0, 11.0, 0.0, 0.0, 0.0, 10.0, 11.0,
    13.0, 13.0, 14.0, 6.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 14.0,
    13.0, 6.0, 1.0, 0.0, 24.0, 31.0, 27.0, 19.0, 19.0, 0.0, 0.0, 0.0, 0.0, 35.0,
    36.0, 14.0, 13.0, 14.0, 14.0, 0.0, 0.0, 16.0, 17.0, 17.0, 11.0, 11.0, 11.0,
    11.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 0.0, 0.0, 0.0, 23.0, 23.0, 0.0, 0.0, 8.0,
    8.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 8.0, 9.0, 9.0, 0.0,
    0.0, 12.0, 13.0, 13.0, 0.0, 0.0, 0.0, 29.0, 30.0, 3.0, 19.0, 0.0, 0.0, 0.0,
    11.0, 12.0, 12.0, 9.0, 8.0, 7.0, 22.0, 22.0, 24.0, 24.0, 27.0, 19.0, 30.0,
    13.0, 0.0, 27.0, 27.0, 27.0, 23.0, 23.0, 23.0, 0.0, 0.0, 0.0, 25.0, 0.0, 0.0,
    0.0, 14.0, 13.0, 13.0, 14.0, 15.0, 15.0, 15.0, 0.0, 0.0, 7.0, 9.0, 9.0, 0.0,
    17.0, 17.0, 0.0, 0.0, 0.0, 29.0, 26.0, 26.0, 22.0, 22.0, 25.0, 25.0, 25.0,
    27.0, 6.0, 0.0, 0.0, 0.0, 27.0, 29.0, 30.0, 20.0, 18.0, 18.0, 7.0, 7.0, 7.0,
    38.0, 39.0, 22.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.0, 18.0, 18.0, 13.0, 12.0,
    11.0, 0.0, 0.0, 0.0, 20.0, 20.0, 20.0, 0.0, 0.0, 0.0, 27.0, 25.0, 28.0, 30.0,
    20.0, 14.0, 13.0, 12.0, 20.0, 19.0, 19.0, 20.0, 23.0, 26.0, 27.0, 27.0, 8.0,
    3.0, 36.0, 21.0, 0.0, 0.0, 0.0, 0.0, 22.0, 22.0, 22.0, 0.0, 0.0, 24.0, 24.0,
    25.0, 25.0, 9.0, 24.0, 24.0, 0.0, 0.0, 0.0, 14.0, 14.0, 14.0, 19.0, 19.0,
    19.0, 12.0, 12.0, 0.0, 0.0, 0.0, 19.0, 19.0, 14.0, 15.0, 15.0, 6.0, 4.0, 4.0,
    0.0, 0.0, 0.0, 0.0, 18.0, 18.0, 18.0, 18.0, 20.0, 20.0, 7.0, 8.0, 37.0, 38.0,
    23.0, 28.0, 29.0, 29.0, 7.0, 1.0, 25.0, 26.0, 0.0, 0.0, 0.0, 2.0, 8.0, 8.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 10.0, 6.0, 8.0, 10.0, 10.0, 22.0, 23.0,
    25.0, 25.0, 23.0, 23.0, 24.0, 24.0, 0.0, 0.0, 0.0, 23.0, 23.0, 20.0, 22.0,
    22.0, 21.0, 9.0, 1.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 16.0, 16.0, 17.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.0,
    17.0, 17.0, 13.0, 15.0, 15.0, 0.0, 0.0, 0.0, 19.0, 21.0, 21.0, 7.0, 3.0,
    22.0, 22.0, 27.0, 28.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    14.0, 14.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.0, 22.0, 26.0, 30.0, 27.0,
    23.0, 18.0, 10.0, 11.0, 11.0, 0.0, 0.0, 0.0, 24.0, 24.0, 24.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.98861905410101E-5, 1.87020457015943E-5, 1.7041189563922E-5,
    2.77945617801773E-5, 5.69697523365565E-5, 3.13069493030486E-5,
    3.21064527485889E-5, 3.32769336574234E-5, 4.34432455258084E-5,
    2.13957496077668E-5, 2.27737280574775E-5, 4.35905150610653E-5,
    1.1403541850358E-5, 1.14592873502137E-5, 1.13543209182889E-5,
    8.14845261209235E-5, 7.47291989501188E-5, 7.84746582189678E-5,
    3.33531507319012E-5, 0.000159736416269703, 0.000163101002899764,
    0.000165497258204958, 3.17397217123698E-5, 2.53730686342905E-5,
    2.27782662083416E-5, 1.64281523996555E-5, 2.77480951651932E-5,
    2.32276971281369E-5, 2.25428158505025E-5, 0.00018434561267575,
    0.000189163261643424, 0.000159940138098851, 0.000165461584114676,
    0.000168302578536629, 4.4188529775423E-5, 2.62608093387828E-5,
    2.28895488699726E-5, 0.000168589396001787, 0.000179241636936567,
    0.000179967288227476, 2.03388271453008E-5, 1.66506507323724E-5,
    1.60408861001587E-5, 4.33024277328846E-5, 4.49112245881348E-5,
    1.31244049252256E-5, 2.06250839895985E-5, 3.75486598494161E-5,
    4.31282965219128E-5, 4.86491844922488E-5, 4.9665904442191E-5,
    5.30462517785636E-5, 5.31717731059002E-5, 1.02936957779855E-5,
    9.86372029886046E-6, 1.63593542902113E-5, 2.94710427195541E-5,
    5.03537404028393E-5, 3.00731065032907E-5, 1.92940440099911E-5,
    1.68056205843184E-5, 1.95578744965569E-5, 3.2694372516728E-5,
    3.22189821781231E-5, 3.23440351129737E-5, 0.00014613732202866,
    0.000151739688636028, 0.000155785332364656, 7.00929529110809E-5,
    6.58526027823851E-5, 6.33647080836605E-5, 2.58581297758098E-5,
    2.20596725012568E-5, 2.11233234448883E-5, 0.000191076494457248,
    0.000195797943686099, 0.000198904953143817, 0.000168037070799112,
    0.000170150940888585, 0.000174468917677643, 3.23317157885511E-5,
    2.66205068333446E-5, 2.52890405415792E-5, 0.000183979455456023,
    0.000190161285003374, 0.0001947607861896, 1.5556614852668E-5,
    1.57240342786056E-5, 1.35599356850202E-5, 1.26481443641308E-5,
    1.38405603407237E-5, 1.28521054918054E-5, 1.35495342613298E-5,
    1.4178460353144E-5, 3.11631510022876E-5, 3.12469639450064E-5,
    3.10568880762686E-5, 1.54847146801057E-5, 1.50199639368321E-5,
    1.76319015995977E-5, 1.5438842737318E-5, 1.49841623688841E-5,
    3.43783796180132E-5, 3.518569734227E-5, 3.43095720588184E-5,
    3.42610753694204E-5, 0.000162530068456221, 0.000168338644671455,
    0.000171657511637163, 0.000172200731423146, 2.4769717835608E-5,
    2.26024280033278E-5, 1.68593127618738E-5, 0.000201301687022312,
    0.000204787849581719, 1.7964629860063E-5, 1.72480279407802E-5,
    1.7299923267196E-5, 1.32622168438314E-5, 6.19516492590029E-5,
    2.68683288950867E-5, 2.60749800729664E-5, 0.000170351102077626,
    0.000174013182449575, 0.000176392031380841, 2.72069967996427E-5,
    2.45820451052923E-5, 2.31594869823542E-5, 2.3315536717702E-5,
    1.84382985860247E-5, 1.75551994547718E-5, 0.00020771202545836,
    0.000211164634025699, 0.000144033460111325, 0.000151148519259961,
    0.000153473463416981, 2.00140515982823E-5, 2.06202898763738E-5,
    5.21860404135397E-5, 3.54683459818036E-5, 3.27626577720798E-5,
    0.000178727275776754, 0.000186165138050983, 0.000188513552173773,
    0.000151505350006516, 0.000154204569563758, 0.00015717834561514,
    0.000159206292231603, 4.21394203668391E-5, 3.21224133148037E-5,
    2.84702794895171E-5, 2.60969220073632E-5, 2.48380471355666E-5,
    5.26349908879403E-5, 1.79814401959358E-5, 3.08443912972255E-5,
    8.77826180815242E-5, 9.44767982618912E-5, 9.5132157082543E-5,
    1.36375317484257E-5, 1.22587039664513E-5, 1.19513782199932E-5,
    4.26328856965805E-5, 1.63019070492086E-5, 2.10251225818379E-5,
    2.10800708540076E-5, 0.000148866685067939, 0.000152455309357734,
    0.000154325506605521, 3.95666571667E-5, 3.09019034710576E-5,
    2.68429238270485E-5, 0.000190197660564904, 0.000194699166013112,
    0.000152688899163003, 0.000155426552286737, 0.000158236227661312,
    0.000124176409737113, 0.000118662305133261, 0.000115129287853797,
    5.20715384148499E-5, 4.50354878673231E-5, 4.18837350558796E-5,
    2.65649963935347E-5, 1.95527649959419E-5, 1.64058909229043E-5,
    1.09330306892916E-5, 2.94056669886662E-5, 3.02717003688428E-5,
    1.14750401908972E-5, 1.11519369931563E-5, 1.34735572241063E-5,
    5.00625710661413E-5, 5.11024553554609E-5, 4.49831912236173E-5,
    2.3532087592741E-5, 2.46305606233396E-5, 1.35523786009234E-5,
    1.98424030994216E-5, 1.84931417427033E-5, 1.79191147476163E-5,
    2.9360241669422E-5, 3.07159182365431E-5, 0.000158117583455514,
    0.000163073411448379, 0.000168863638688345, 0.000170584538398315,
    2.86939769012582E-5, 2.41614967089892E-5, 0.000192774213575774,
    0.000198542025008103, 0.000204024076550469, 0.000151757847505726,
    0.000155161578386153, 0.000158032347617402, 0.000160453469378656,
    3.96786147915987E-5, 2.99841743765525E-5, 2.37280015074862E-5,
    2.14273296838521E-5, 0.000196778534292915, 0.000202572540535949,
    0.000205811171567844, 0.000105285522827002, 0.000111700746048199,
    0.000115292391998593, 2.39377597887597E-5, 2.57848889697454E-5,
    2.90286532139387E-5, 3.25830293791682E-5, 2.67753818420768E-5,
    2.12500603407693E-5, 0.000214684310901092, 0.000221766896489776,
    0.000225845370048957, 3.7128356386545E-5, 3.3160899051158E-5,
    3.3160397092902E-5, 2.63847870666996E-5, 2.82485960641077E-5,
    1.63154176600385E-5, 1.04335429396001E-5, 1.31220148474602E-5,
    1.29973680735334E-5, 1.45167709080362E-5, 0.000166500009728686,
    0.000170745149521381, 0.000173572771979687, 0.000175470374093779,
    0.000179718627992929, 0.000111462794385934, 0.000103435304048245,
    0.000109423728666905, 0.000110611922332673, 2.86314311420356E-5,
    2.54781291210207E-5, 2.36917813679163E-5, 6.82914531625695E-5,
    4.3309720433564E-5, 0.000196983891219017, 0.000200015357989306,
    0.000203810499448963, 1.43955459761878E-5, 1.87373688344001E-5,
    1.86990355253825E-5, 4.0344738178086E-5, 4.05080781518138E-5,
    9.48746265631746E-6, 0.000150317793585367, 5.71086081559234E-5,
    5.07193757513847E-5, 4.90475894227784E-5, 0.000187651183224265,
    0.000193376118516561, 0.000196910060435787, 1.15352761531174E-5,
    1.25264503914006E-5, 1.21483915073637E-5, -1.94744733287055E-5,
    -1.83085100293462E-5, -2.04253237217503E-5, -4.67814712141112E-5,
    -1.89127501276902E-5, -1.54972833020014E-5, -1.46008867975721E-5,
    -1.27731821309415E-5, -1.65871909782341E-5, -2.06191113256982E-5,
    -1.87649349415769E-5, -2.15203200819534E-5, -1.27056493443229E-5,
    -1.33022057123863E-5, -1.31830970305248E-5, -5.96880672641398E-5,
    -4.2561537233203E-5, -3.83351774715722E-5, -3.10196491797397E-5,
    -2.52454213984099E-5, -2.17089322719218E-5, -1.95943008354518E-5,
    -0.00017251095608152, -0.000179588285691228, -0.000182510116965394,
    -0.000184133830946068, -0.000114580632729611, -0.00011962047304142,
    -0.000121662358333233, -2.70424522373915E-5, -2.27536771343682E-5,
    -3.79895809999044E-5, -3.18221603461723E-5, -2.86054256134682E-5,
    -0.000188190383792557, -0.000145875993699906, -0.000149714525938377,
    -3.15094623703624E-5, -8.47908091858171E-5, -4.84853477881169E-5,
    -2.25090828479033E-5, -2.43715735740801E-5, -2.33938632721599E-5,
    -1.47838255418971E-5, -1.30404337164607E-5, -2.87323878152109E-5,
    -1.81991366378969E-5, -2.08337400027584E-5, -2.11662628812679E-5,
    -1.5541446940841E-5, -1.47445827624098E-5, -1.84312353869722E-5,
    -1.40581038070094E-5, -3.40560516323666E-5, -3.62897692184413E-5,
    -3.72169717845078E-5, -1.54087824776589E-5, -2.17539925671446E-5,
    -1.47546612130815E-5, -3.86356001422087E-5, -1.35535366479534E-5,
    -1.45029155819168E-5, -2.04997564470836E-5, -1.64928376552269E-5,
    -1.63582432487183E-5, -2.95492811532294E-5, -2.33596611747828E-5,
    -5.05686078553327E-5, -0.000204362104509061, -0.000207611406998682,
    -0.000209422349364086, -0.000153829784509313, -0.000157178848963855,
    -0.000157983972050677, -3.17644347860153E-5, -2.35079442714823E-5,
    -2.2821683801455E-5, -4.42413279691985E-5, -3.00420387145338E-5,
    -2.99820629507598E-5, -0.000144702939335727, -0.000149649724811498,
    -0.000150749871009693, -2.95770055849819E-5, -2.68528557386316E-5,
    -2.30923059407176E-5, -3.40580749212393E-5, -3.73080136124899E-5,
    -3.88649824667071E-5, -3.94050653027293E-5, -1.11190483759697E-5,
    -1.19031538814643E-5, -1.1468204781958E-5, -1.06537435527983E-5,
    -4.283687641745E-5, -4.27389300784011E-5, -4.29799080011952E-5,
    -1.41295817937924E-5, -1.3877927311E-5, -2.1585722200708E-5,
    -2.33678834879822E-5, -2.2834440440717E-5, -2.66562574353112E-5,
    -2.59764239434704E-5, -3.3346833809519E-5, -3.34479428097757E-5,
    -3.41597831568722E-5, -2.78683704401494E-5, -3.15985612972259E-5,
    -2.34972441805936E-5, -0.000126313138206331, -0.000132161155955459,
    -0.000134356052999091, -2.68900564891004E-5, -2.29176843520398E-5,
    -2.21606784511227E-5, -2.30442670616128E-5, -2.29433542179749E-5,
    -2.35950424678714E-5, -2.47809391811568E-5, -2.91769813851001E-5,
    -3.17341871028262E-5, -3.04509789424009E-5, -2.62935315365196E-5,
    -2.3528988136209E-5, -0.000160685891711151, -0.000163614281781464,
    -0.000165245958494893, -0.000142268993107361, -0.000146981453025135,
    -0.000149528711328708, -4.51367438056949E-5, -3.92249985465736E-5,
    -3.99194244524878E-5, -3.21164367160483E-5, -2.95150431387306E-5,
    -0.000161342870810121, -0.000163105946293126, -0.000140988619477932,
    -0.000144478167733444, -0.000146367759108316, -3.30101686063626E-5,
    -4.63125195782385E-5, -4.15423414285669E-5, -3.74749076197597E-5,
    -3.33728929379863E-5, -3.00361589966843E-5, -2.77147798127253E-5,
    -0.000151794855456128, -0.000164070035673553, -0.000168154204476904,
    -0.000170858860785991, -2.81385657115856E-5, -3.01105284147151E-5,
    -3.12420124082054E-5, -2.58959023690821E-5, -2.12883651740755E-5,
    -5.16467464578877E-5, -5.05616988898368E-5, -2.60218051880972E-5,
    -2.77863566170063E-5, -2.82422893885656E-5, -1.39111929494341E-5,
    -1.18336194530831E-5, -2.52832767894857E-5, -2.52272144335905E-5,
    -2.21025616802519E-5, -2.11545828478552E-5, -2.94130930739958E-5,
    -0.000171285785430372, -0.000179212502729807, -0.00018285375669931,
    -8.97102050542167E-5, -8.2376337413049E-5, -3.18512481098117E-5,
    -2.24614490570763E-5, -1.99746955672133E-5, -0.000230160298698793,
    -0.000234345484785396, -0.000236960232431853, -0.000154185814058697,
    -0.000162371369890987, -0.000166126638433366, -0.000167252572510239,
    -2.5611804681224E-5, -2.39434737371311E-5, -1.7050149872984E-5,
    -1.93854547716711E-5, -1.89231919687201E-5, -1.94008340633139E-5,
    -2.08162685579868E-5, -2.14700793688618E-5, -3.48822354723927E-5,
    -3.37287675574566E-5, -1.51376207857492E-5, -3.28580619084411E-5,
    -3.13903284516128E-5, -1.65306266788091E-5, -1.74665471754473E-5,
    -1.86749388533947E-5, -1.90980930715155E-5, -8.83216952725163E-6,
    -1.67872686503049E-5, -3.76685560125827E-5, -3.25238056093418E-5,
    -2.59954478498794E-5, -2.40026274559478E-5, -0.000145891365308494,
    -0.000149145812294526, -3.17811771244545E-5, -2.5295562752113E-5,
    -4.89435393348483E-5, -2.62234146020065E-5, -2.46592766890501E-5,
    -1.91237614048112E-5, -2.68999150934139E-5, -0.000129096207341612,
    -0.000139479504943107, -0.000146534247028291, -0.000149194048952011,
    -2.46847467097106E-5, -3.10192125967285E-5, -2.53387835614306E-5,
    -3.74257917939399E-5, -3.04051508654461E-5, -2.70563773022263E-5,
    -0.000143254859474345, -0.000149471944638107, -0.000152391652427176,
    -0.0001282046522373, -0.000132621835815418, -0.000135382878034704,
    -3.43034271929952E-5, -2.79611166497714E-5, -3.46714715503235E-5,
    -3.2597534885425E-5, -3.1703233982089E-5, -3.17439639535687E-5,
    -8.5697787756388E-6, -9.9480938919727E-6, -1.00700632618022E-5,
    -1.19683511567002E-5, -2.0528140742687E-5, -2.04846132776016E-5,
    -2.1795969949146E-5, -2.65880691320827E-5, -2.21581910498643E-5,
    -1.8676154695506E-5, -2.51736534223005E-5, -2.03386714302096E-5,
    -2.25922677831465E-5, -3.00001921562957E-5, -3.00769362695203E-5,
    -2.1782606692468E-5, -0.000171549850537989, -0.000175127034964289,
    -0.000177190791293121, -0.000160252142230262, -0.000168265422758452,
    -4.33088129056659E-5, -3.91483514286634E-5, -3.38243895727905E-5,
    -3.60515483063769E-5, -3.84023084653733E-5, -3.83980427523887E-5,
    -3.85268658387956E-5, -3.83413484046094E-5, -1.13865297872517E-5,
    -1.94617116584135E-5, -0.000179011378895681, -0.000184047347945255,
    -0.000185287989412102, -3.27213589895947E-5, -2.75377690101295E-5,
    -2.43868134996124E-5, -1.25932542459185E-5, -1.76487057996683E-5,
    -1.83052876115519E-5, 3.93606638697156E-5, 3.70105557309405E-5,
    3.74665132856723E-5, 7.45760329942884E-5, 7.58825024642467E-5,
    4.680423260505E-5, 4.6707339546161E-5, 4.60501157883649E-5,
    6.00304365040424E-5, 4.2014860933465E-5, 4.15386629990543E-5,
    6.51108351430187E-5, 2.4109191194681E-5, 2.47614930625999E-5,
    2.45374179488136E-5, 0.000141172593385063, 0.000117290736183322,
    0.00011680983569054, 6.43727999116409E-5, 0.000184981837668113,
    0.000184809935171686, 0.000185091559040409, 0.00020425067779389,
    0.000204961354325518, 0.000205288383173735, 0.000200561983345723,
    0.000142328727894804, 0.000142848170169557, 0.000144205174183735,
    0.000211388064913142, 0.000211916938777792, 0.000197929719098755,
    0.000197283744460848, 0.000196908004150097, 0.00023237891356798,
    0.000172136803038689, 0.000172604074808349, 0.000200098858372149,
    0.000264032446122384, 0.000228452636015593, 4.28479099932041E-5,
    4.10222243064525E-5, 3.94347493723185E-5, 5.80862532747817E-5,
    5.79516583045956E-5, 4.18567927404364E-5, 3.88242206274954E-5,
    5.83823998521745E-5, 6.42945594031806E-5, 6.41906314330898E-5,
    6.44104872046008E-5, 7.14774871655358E-5, 6.72298769129096E-5,
    4.43497474103521E-5, 4.61534895173017E-5, 5.35763260747191E-5,
    4.4879825197213E-5, 7.21077329699839E-5, 4.48277677163722E-5,
    5.79296441521998E-5, 3.03591572322718E-5, 3.40607900784737E-5,
    5.31941289638116E-5, 4.871181983335E-5, 4.8702278361692E-5,
    0.00017568660318189, 0.000175099349810811, 0.000206353940219988,
    0.000274455057420142, 0.000273464009781067, 0.000272787057447746,
    0.000179687914285123, 0.000179238521465112, 0.000179107295495565,
    0.000222840929243264, 0.000219305887957581, 0.000221726636945272,
    0.00021227839876831, 0.000200192979603119, 0.000204450980628403,
    0.000177034655124278, 0.000176270231644843, 0.000176038911551273,
    0.000213556461041005, 0.000217014140742005, 0.000217853092130318,
    4.96146897739072E-5, 5.30320478910955E-5, 5.24249181517273E-5,
    5.205320966686E-5, 2.49596087166933E-5, 2.47552593732696E-5,
    2.50177390432878E-5, 2.48322039059423E-5, 7.40000274197377E-5,
    7.39858940234075E-5, 7.40367960774638E-5, 2.96142964738981E-5,
    2.88978912478321E-5, 3.92176238003057E-5, 3.88067262253002E-5,
    3.78186028096012E-5, 6.10346370533244E-5, 6.11621212857403E-5,
    6.76564058683374E-5, 6.77090181791961E-5, 0.000196689851613093,
    0.000196207015111604, 0.000203256072934388, 0.00019569797560374,
    0.000151082856041939, 0.000154763583958787, 0.000151215365760965,
    0.000228191743511413, 0.000227705533933758, 4.01253083111856E-5,
    4.0292295002393E-5, 4.02432774851709E-5, 3.68572593117028E-5,
    8.67325884401597E-5, 5.60453102801868E-5, 5.78091671757926E-5,
    0.000200802081020027, 0.000200306713986094, 0.00019992101951705,
    0.000187892888510794, 0.000188196326886756, 0.000188405445477247,
    0.000165584529825063, 0.00016541975161116, 0.00016708391078348,
    0.000252848769264055, 0.000250389632572272, 0.000183952884563813,
    0.000183264955976009, 0.000182988506555712, 0.000181356922408404,
    0.0001837262361695, 0.000193174659891472, 0.000179946513715247,
    0.000179130416880396, 0.000211737444383117, 0.000232477657629221,
    0.00023005589360234, 0.000188980257626275, 0.000187577462501744,
    0.000187214504611824, 0.000186921072044329, 0.000193934275822968,
    0.000196192448988357, 0.000196624483966421, 0.000196955782793354,
    5.29766128471522E-5, 8.27455193026553E-5, 4.92234526041412E-5,
    5.67402936663076E-5, 0.0001090709832556, 0.000146123544719779,
    0.00014569385597238, 3.96593369365229E-5, 4.00450605834577E-5,
    4.01936676085588E-5, 5.65440786460146E-5, 2.81355265022916E-5,
    4.63083993713235E-5, 4.6307285287598E-5, 0.000170969246748191,
    0.00017360989220559, 0.000183738599679517, 0.000210852442597072,
    0.000210114406200865, 0.000209696680526358, 0.00027990786561912,
    0.000277075503426161, 0.000184540147272814, 0.000177888001343814,
    0.000178210923228525, 0.000354336708435907, 0.000353007789918657,
    0.00035208952028565, 0.000206257352473547, 0.00020740685775831,
    0.000208010373489246, 0.000193817568903774, 4.51645696771659E-5,
    4.03493646600353E-5, 2.79831805622756E-5, 4.87911217603374E-5,
    4.91948923375629E-5, 3.08758742542111E-5, 3.19682055511431E-5,
    3.49436365929682E-5, 8.4944806538534E-5, 8.48312229129175E-5,
    6.01208120093665E-5, 5.6390149501182E-5, 5.60208890749525E-5,
    3.00830052797326E-5, 3.73089502748689E-5, 3.7168080596098E-5,
    3.70172078191318E-5, 3.81924111966736E-5, 4.7503186886848E-5,
    0.000195786139468097, 0.000195597217057721, 0.000194859086538225,
    0.000194587165854263, 0.000174585342209752, 0.000173307309003515,
    0.000224555390700229, 0.000223837587760216, 0.000252967615885317,
    0.000177981262107733, 0.000179820855075203, 0.000177156109022213,
    0.00018735338447207, 0.000168774822133211, 0.000169463679319659,
    0.000170262248535778, 0.000170621378635863, 0.000221463281002626,
    0.000233591753132677, 0.000231149955129275, 0.000142711314620942,
    0.000142105896913645, 0.00014234876930082, 0.000167192619263105,
    0.000175256833607852, 0.000181420305641114, 0.000160787681616468,
    0.000159397217657494, 0.000156632938375474, 0.000248987738094087,
    0.000249728013139548, 0.00026051684159928, 6.972589127197E-5,
    6.4864133033247E-5, 6.49043610464708E-5, 3.49545658423384E-5,
    3.81966899560804E-5, 2.63854809218406E-5, 2.24018940963003E-5,
    3.36501555901472E-5, 3.3481981351135E-5, 3.63127408571822E-5,
    0.000193088078860768, 0.000192903340571246, 0.000192248926675193,
    0.000200644027516079, 0.000200057299423139, 0.000134055062169081,
    0.000133435496204541, 0.000139500664936426, 0.000132394529025141,
    0.000200181281680025, 0.00020060516408531, 0.000200882572661037,
    0.000228543595392832, 0.000211575143192016, 0.000240292704124683,
    0.00023916370941797, 0.000237634889021754, 5.04470942825647E-5,
    5.71396772997734E-5, 5.70970782777712E-5, 7.88716040168816E-5,
    7.88494265564232E-5, 2.08739924435691E-5, 0.000169779505243781,
    0.000236119987051605, 0.00023476672369664, 0.00023433557883488,
    0.00022037254221386, 0.00022091388752669, 0.0002212968739354,
    2.41285303990359E-5, 3.01751561910689E-5, 3.04536791189156E-5,
    7.99033772867651E-6, 8.0323294772677E-6, 7.97923460871175E-6,
    1.15511042007191E-5, 1.20658877290259E-5, 8.66628553586255E-6,
    9.67997966620456E-6, 9.35319851602054E-6, 8.27917448564977E-6,
    8.41468989236809E-6, 8.66238195493578E-6, 1.08487628409411E-5,
    5.38131373198925E-6, 5.52960575218171E-6, 5.58215464420492E-6,
    2.26298116947357E-5, 2.18012160225385E-5, 2.16289348234372E-5,
    1.09620146116963E-5, 3.91643959745878E-5, 3.9610411616977E-5,
    3.98139916306671E-5, 4.10773178907701E-5, 4.25898992650861E-5,
    4.32599268134387E-5, 4.30620797563506E-5, 3.12862551247629E-5,
    3.19363533205725E-5, 3.1799815436917E-5, 4.47432412003997E-5,
    4.54974201494063E-5, 4.17470203155703E-5, 4.27706277053671E-5,
    4.29607835172151E-5, 4.45107553167777E-5, 3.79148509713014E-5,
    3.81916524132879E-5, 4.42981088434329E-5, 4.77872908813987E-5,
    4.77946738150027E-5, 7.32975541006857E-6, 8.26617330302647E-6,
    8.1076435623093E-6, 1.03040717469851E-5, 1.03316229363054E-5,
    8.31134154836148E-6, 8.50585313752981E-6, 1.00608731701882E-5,
    1.02263950892862E-5, 1.07899280980275E-5, 1.09191133652243E-5,
    1.13455455601089E-5, 1.14549067503207E-5, 9.16850210304908E-6,
    9.48999299668889E-6, 1.01923894352735E-5, 8.69769730163036E-6,
    1.17983507492465E-5, 9.2106493878002E-6, 8.84483283367188E-6,
    7.09010497062441E-6, 6.95572927542404E-6, 9.56040497284569E-6,
    9.52751022179006E-6, 9.63564053254704E-6, 3.38739199831362E-5,
    3.47483546379192E-5, 3.57037744274553E-5, 5.01876064254955E-5,
    5.05702671817196E-5, 5.04390993132579E-5, 4.00099435285585E-5,
    4.00934113737563E-5, 3.98176980818724E-5, 4.85118356545517E-5,
    4.94497578963267E-5, 4.95897875706386E-5, 3.99151327731528E-5,
    4.03538277724681E-5, 4.07329214957248E-5, 3.89116845246557E-5,
    3.91617496007875E-5, 3.86949006288354E-5, 4.63591458671038E-5,
    4.79398149065118E-5, 4.90331079704372E-5, 1.02686380772734E-5,
    1.08013469169338E-5, 1.12204853777056E-5, 1.12919635580623E-5,
    5.50693228036172E-6, 5.42211222606919E-6, 5.70909623967315E-6,
    5.67493230970173E-6, 1.44999702110679E-5, 1.43607140746834E-5,
    1.43695549506943E-5, 7.02349802761114E-6, 7.1418901783275E-6,
    7.79653351817388E-6, 8.04391857402633E-6, 7.91931226218434E-6,
    1.10100560912677E-5, 1.07675134443368E-5, 1.21907760238936E-5,
    1.14759976061483E-5, 3.98721637322915E-5, 4.09157033607909E-5,
    4.13571447427236E-5, 4.11416981807724E-5, 3.44927375569137E-5,
    3.54279669286552E-5, 3.54782803374764E-5, 4.8865337217752E-5,
    4.95257189057144E-5, 9.44878296366857E-6, 9.25586244413413E-6,
    9.1776428878081E-6, 8.18216896975876E-6, 1.61631242236411E-5,
    9.09718623250076E-6, 8.97795051023305E-6, 4.25112975235431E-5,
    4.3124044797499E-5, 4.3139027690291E-5, 3.57185273926309E-5,
    3.63499844413796E-5, 3.66025043453005E-5, 3.68907515835051E-5,
    3.74278245977657E-5, 3.73833930904087E-5, 5.32995928766434E-5,
    5.36714067123786E-5, 3.54493917334484E-5, 3.6310192163772E-5,
    3.65479576264891E-5, 3.98317952803906E-5, 4.00688483798105E-5,
    3.83723216603071E-5, 3.88917076960001E-5, 3.88392683613597E-5,
    4.69609276964771E-5, 4.94168207790402E-5, 4.97070846753262E-5,
    3.75266951554528E-5, 3.82624162202764E-5, 3.86207897601051E-5,
    3.86650411717391E-5, 3.85586719585802E-5, 4.07153275671367E-5,
    4.13213378871638E-5, 4.14049488355131E-5, 9.9394140766732E-6,
    1.23226242094397E-5, 8.68012219819683E-6, 9.01300694826415E-6,
    2.27328373528546E-5, 2.61163615592747E-5, 2.65807634370682E-5,
    7.91212834936706E-6, 7.95090776946949E-6, 7.918994375018E-6,
    9.05769061815803E-6, 6.42242268091477E-6, 7.50809801332842E-6,
    7.68360295717034E-6, 3.47523897482786E-5, 3.53748784483952E-5,
    3.51816796074245E-5, 4.02461383627607E-5, 4.23446418860778E-5,
    4.32649445790679E-5, 5.55442507098231E-5, 5.5839671222934E-5,
    3.66697919770765E-5, 3.71236981848963E-5, 3.70853126241234E-5,
    6.47148248652379E-5, 6.50857987306415E-5, 6.57745216724647E-5,
    4.14320863497217E-5, 4.21805568885628E-5, 4.27422233625413E-5,
    4.11474725980568E-5, 8.43773381028382E-6, 8.50052997443641E-6,
    6.00246853325085E-6, 8.38482107630594E-6, 8.33268964101138E-6,
    6.34915168491389E-6, 7.23341608124036E-6, 7.7438283745552E-6,
    1.48610711211012E-5, 1.61327911947025E-5, 9.19863906980025E-6,
    9.750390051758E-6, 1.05093449753065E-5, 6.6410714169953E-6,
    7.31685336965815E-6, 7.86245911232614E-6, 7.96195045742541E-6,
    7.41163614573609E-6, 7.75240057086366E-6, 4.16659209095464E-5,
    4.31777664661725E-5, 4.34985942647995E-5, 4.35871554175458E-5,
    3.85615062444496E-5, 3.89036971043549E-5, 4.80609117719833E-5,
    4.9650006239848E-5, 5.13656877331065E-5, 3.76070933633772E-5,
    3.89330733703542E-5, 3.92669869968394E-5, 3.91193428883946E-5,
    3.71617165241841E-5, 3.95656997931724E-5, 4.04395752163434E-5,
    4.05137965416394E-5, 4.87655657602354E-5, 5.05044307032527E-5,
    5.10125195204594E-5, 3.27366394851754E-5, 3.40847162067211E-5,
    3.43060909247858E-5, 3.79137006045953E-5, 3.97355920101166E-5,
    4.0393375577126E-5, 3.70277596783328E-5, 3.75196220308133E-5,
    3.74096592740643E-5, 5.37340458384354E-5, 5.55052951321816E-5,
    5.63723243864944E-5, 1.24330915969846E-5, 1.20322033215832E-5,
    1.27072244812962E-5, 7.10281678574177E-6, 7.06503268988757E-6,
    4.3444463321967E-6, 4.8006702365926E-6, 6.17120640240092E-6,
    6.32142581449629E-6, 7.06016063543227E-6, 4.08194909442089E-5,
    4.1670870009333E-5, 4.1724708091291E-5, 4.13853312694373E-5,
    4.24893144731328E-5, 2.49241635249978E-5, 2.81872224619115E-5,
    2.96205589744786E-5, 2.96366306853944E-5, 4.0541925545893E-5,
    4.09517286674768E-5, 4.13828697391234E-5, 4.27117839460953E-5,
    4.42707481302631E-5, 5.01094763460788E-5, 5.10037192401537E-5,
    5.15418458363369E-5, 9.0929501628703E-6, 9.82277057653517E-6,
    9.77101285983054E-6, 1.43576607639263E-5, 1.44177044692347E-5,
    4.7326316221465E-6, 3.6518164562841E-5, 4.69672432351708E-5,
    4.7978481028406E-5, 4.79505396765373E-5, 4.34491060447629E-5,
    4.49659194999297E-5, 4.54407797370598E-5, 4.74930322312037E-6,
    6.27335518353028E-6, 6.6807737813614E-6, 0.0, 0.0, 0.0, 0.0,
    0.0002065041408719, 0.0, 0.0, 0.0, 4.28057688687411E-5, 0.0, 0.0,
    4.28173552421985E-5, 0.0, 0.0, 0.0, 0.00102276040294973,
    0.000925159545870767, 0.000977681977418139, 0.0, 0.00265988675575307,
    0.00273746573062556, 0.00283905762850518, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00316220589726001, 0.00327786746915001, 0.00298884059036713,
    0.00313237033332698, 0.00325306822147133, 0.00021494005268249, 0.0, 0.0,
    0.00330163065923932, 0.00364377980190928, 0.00366430368541804, 0.0, 0.0, 0.0,
    0.000169917685069622, 0.000218600748843293, 0.0, 0.0, 0.0,
    4.2560808957257E-5, 0.000234283713753698, 0.000282047719067015,
    0.000347262249555371, 0.000348132041605969, 0.0, 0.0, 0.0, 0.0,
    0.000140768975777364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00208646097404726,
    0.00228838923534236, 0.00237312164652429, 0.000782109317745188,
    0.000687338705043166, 0.000615933020885327, 0.0, 0.0, 0.0,
    0.00357704973098802, 0.0037990621865398, 0.0038866887558449,
    0.00257878522232237, 0.0026233686442491, 0.0027659909043845, 0.0, 0.0, 0.0,
    0.00331063410019426, 0.00351380082487629, 0.00368663088396554, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00263973096469391, 0.00286309263746534, 0.00294277021191181,
    0.00295581490936867, 0.0, 0.0, 0.0, 0.00356268289836705, 0.0036501175656582,
    0.0, 0.0, 0.0, 0.0, 0.000555807761211552, 0.0, 0.0, 0.00303438042533376,
    0.00312619145091648, 0.00318586931340213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00395975935644584, 0.00410386315001571, 0.00229737900822678,
    0.00258734744221178, 0.00274889659009557, 0.0, 0.0, 0.000336832488270783,
    0.0, 0.0, 0.00355085765730408, 0.00386054280706602, 0.00393190624436636,
    0.00247057074582509, 0.00252488520381001, 0.00263823090650577,
    0.00268503404993266, 0.000166259883183594, 0.0, 0.0, 0.0, 0.0,
    0.000147572280334435, 0.0, 0.0, 0.00142595395424018, 0.00160400361638442,
    0.00161780841619573, 0.0, 0.0, 0.0, 8.38150924252596E-5, 0.0, 0.0, 0.0,
    0.00221987520370739, 0.00234209405882645, 0.00238151640289059, 0.0, 0.0, 0.0,
    0.00422694655994137, 0.00446355981958031, 0.00241355238165526,
    0.00247378623418167, 0.00253561903738681, 0.00185350777455606,
    0.00170224998491058, 0.00163494744771605, 0.00062041403959966,
    0.00026367940337745, 0.000165437652042944, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00056440625729796, 0.0006182090871114, 0.000131429845867678, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00288211386209653, 0.00310136114878705,
    0.00325195776199999, 0.00329672358955925, 0.0, 0.0, 0.00348604558032557,
    0.00373248907373771, 0.00388099415203611, 0.00254702993759341,
    0.00272047633232276, 0.00279285202289349, 0.00284335335535088, 0.0, 0.0, 0.0,
    0.0, 0.00365136869319715, 0.00380824843127255, 0.0038959841339236,
    0.00235961795630628, 0.00267009781163889, 0.0028239268829799, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00399334328063305, 0.00418605133305136, 0.00439476942617886,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00285066604641989,
    0.00295310681690021, 0.00302137986524164, 0.00285624977201209,
    0.00295425116478369, 0.00145435784383631, 0.00201307376535288,
    0.00228543671003297, 0.00236530681281886, 0.0, 0.0, 0.0,
    0.000361330250512968, 0.00017082185037481, 0.00363409575820274,
    0.00376375129213071, 0.00386657730518834, 0.0, 0.0, 0.0, 8.05692884617902E-5,
    0.000121173579938689, 0.0, 0.00272212275690527, 0.00051883893415005,
    0.000377716671483689, 0.000281822949573273, 0.00292517298774928,
    0.00310191778682509, 0.00318345565436741, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000114746667285759,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00271750379083966, 0.00292619925798561,
    0.00304839439307192, 0.00308588274118946, 0.00191544614472187,
    0.00207730460321963, 0.00212282457434491, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00305834985847925, 0.00254792627158074, 0.00269675134842058, 0.0,
    0.000438724273779889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00335892520126321, 0.00343388196838736, 0.00347568785830262,
    0.00280378460403296, 0.00288418913920162, 0.0029035196250269, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00266212455156083, 0.00283716505074955, 0.00286498032597549,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00222114822881753, 0.00240888518135053, 0.00251530404065577, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00229169473601324,
    0.00234749504693122, 0.00237860714106085, 0.00242094315086116,
    0.00258216441051444, 0.00269764208772407, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00293862307609462, 0.00298310788650664, 0.00258884620472484,
    0.00278730102932988, 0.00283701315525485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00230401650315172, 0.00260816825665967, 0.00281023182246085,
    0.00287263979303416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010264108022776,
    5.0469615295147E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00240817792167507, 0.00290344391680185, 0.00316704449990327,
    0.00112865947870706, 0.000868804288118749, 0.0, 0.0, 0.0,
    0.00454966225252719, 0.00466748060249359, 0.00474114974096815,
    0.00258531313266184, 0.00282518285077355, 0.00297146533336226,
    0.00293824281341315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00258201292597228, 0.002714716807081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00230377769820667, 0.00268958861669701, 0.00298208291919513,
    0.00305456102180307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028342937587419,
    0.00311505648533428, 0.00325267017441681, 0.00259877572703042,
    0.00276891318706866, 0.00284469801138761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00270170306667084, 0.0028938524985722, 0.00294147556412285,
    0.00280633230059206, 0.0030251163489355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00338158585147882, 0.00356678722374382, 0.00365646085095714,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.98236251515388E-7, -8.04577298498707E-7,
    -8.14489419253745E-7, -3.55123966639469E-6, 4.21569458134704E-6,
    -5.63906416928313E-7, -5.62739030676638E-7, -5.54820672148975E-7,
    3.72859854062375E-7, -5.9175860469669E-7, -5.85051591535977E-7,
    4.22797630798823E-7, -2.04315179615941E-7, 2.09843161547457E-7,
    2.09721520930031E-7, -1.55134718005564E-6, -5.3313970992419E-6,
    -5.56237312812095E-6, -6.50230302137787E-7, -6.16606125560375E-6,
    8.40045159871298E-6, 8.41325268365497E-6, -9.72622275208998E-6,
    -9.76006449169136E-6, -9.77563729398739E-6, 1.80686471482633E-6,
    -6.77755847118115E-6, -6.80229381759797E-6, 6.61491624696034E-7,
    1.00660983291972E-5, 1.00912827989425E-5, -8.24707162911479E-6,
    -8.22015601920201E-6, -8.56121757174335E-6, 1.59163639430124E-6,
    -7.48420882776909E-6, -7.50452499166737E-6, -7.41106882859811E-6,
    -1.97039138897301E-6, -1.73070178799692E-6, 7.02424753986953E-7,
    -2.56388901915328E-6, 2.89961392443519E-7, -3.22701407082121E-6,
    -3.21953657247753E-6, -3.03310092322003E-7, 1.25239421379017E-6,
    3.84094735869569E-7, 3.00441866370003E-7, -4.58504510236356E-6,
    -4.29403248030672E-6, -4.06122086167817E-7, -2.83670366721138E-7,
    -5.99320910950704E-7, 4.66196863811128E-7, 3.50172065847837E-7,
    -2.63998971748312E-6, 3.79514384052547E-6, -2.63692751272777E-6,
    -4.99393484070688E-7, -1.44567415391771E-6, 1.55528721819515E-7,
    -5.71979881331307E-7, -1.67971792528793E-6, -1.67938890902386E-6,
    -8.78433015909449E-6, -9.21575525320056E-6, -1.08038712157062E-6,
    5.178397309814E-6, 5.15969829775598E-6, 5.14692561222163E-6,
    6.91107362635087E-6, 7.16954085860449E-6, 7.16429181982259E-6,
    -2.02582662948421E-6, 1.04431375217896E-5, -9.39519648073188E-7,
    -2.83037865024414E-6, -9.53299902871997E-6, -1.02739186245429E-6,
    6.3226662544385E-6, 6.29536541588724E-6, 6.28710398397402E-6,
    1.01693552876669E-5, -2.10693340526219E-6, -1.19045405535693E-6,
    2.06727874057947E-6, 6.62900598638694E-7, 6.55311476896591E-7,
    6.5066512083575E-7, 3.00718177309558E-7, 2.98256137027345E-7,
    3.01418542690214E-7, -1.46071787682014E-7, -2.24242507332538E-6,
    -2.24199678858811E-6, -2.24353927507466E-6, -1.79480584690291E-7,
    -2.07898498185842E-7, -3.41022815654832E-7, -6.69081486643106E-7,
    3.78186028096012E-7, 1.60617465929801E-6, 1.60952950751948E-6,
    -7.68822793958379E-7, -7.69420661127228E-7, -8.55173267883013E-6,
    -8.53073978746106E-6, -1.26246008033782E-6, -8.50860763494521E-6,
    3.51355479167299E-6, 1.33416882723092E-6, 3.1503201200201E-6,
    -9.50798931297553E-6, -9.48773058057327E-6, -6.6875513851976E-7,
    -6.71538250039883E-7, -6.70721291419515E-7, 2.08233103455948E-7,
    6.37739620883527E-7, -4.74960256611752E-7, -4.89908196405022E-7,
    -7.72315696230875E-6, -7.70410438408055E-6, -7.68926998142499E-6,
    -9.39464442553968E-6, -9.40981634433781E-6, -9.42027227386234E-6,
    2.80651745466208E-6, 1.53166436677E-6, 7.99444549203254E-7,
    -2.3853657477741E-6, -2.36216634502144E-6, -9.19764422819065E-6,
    -9.16324779880046E-6, -9.14942532778558E-6, -8.63604392420971E-6,
    1.12715482312577E-6, 2.6462282176914E-6, 2.60792048862677E-6,
    2.59609299826661E-6, -6.83024014139086E-6, -1.72205672317942E-6,
    -1.69158745295838E-6, -7.26847144716444E-6, -8.15554184790192E-6,
    -8.1397610700793E-6, -8.12700313236212E-6, -8.81519435558943E-6,
    -8.91783859037984E-6, -8.93747654392823E-6, -8.95253558151608E-6,
    -8.97908692324614E-7, 6.61964154421243E-7, -2.31096021615686E-7,
    3.10056249542665E-7, -4.74221666328694E-6, -2.05807809464477E-6,
    -2.05202614045605E-6, -6.9577784099163E-7, -7.02544922516801E-7,
    -7.0515206330805E-7, 5.04857845053702E-7, 1.80355939117254E-7,
    -2.57268885396242E-6, -2.57262696042211E-6, -1.51300218361231E-6,
    -9.92056526889084E-7, -7.75268353078132E-7, 1.05426221298536E-5,
    1.05057203100432E-5, 1.04848340263179E-5, -2.82735217797091E-6,
    -2.79874245885011E-6, -2.09704712810016E-6, -8.08581824290062E-6,
    8.48623443945358E-6, 6.2164334813317E-6, 6.19311912137995E-6,
    6.17700912781843E-6, -6.65346298301763E-6, -6.69054379865517E-6,
    -6.50032417153893E-6, 1.47952342674637E-6, 3.860219630527E-7,
    3.77096865981639E-7, 4.99699652897779E-7, 3.84182061105019E-7,
    3.87361356988685E-7, -2.43117120111898E-7, 4.0984878911722E-7,
    1.76483013095799E-7, -3.69325245819713E-6, -3.68831403969207E-6,
    9.85587082120763E-7, -1.08442595194581E-6, -1.07732478990293E-6,
    -1.68061482009679E-7, 5.73983850382598E-7, 5.71816624555354E-7,
    5.6949550490972E-7, 3.10507408103038E-7, -2.89653578578341E-7,
    -8.15775581117069E-6, -8.14988404407171E-6, -8.11912860575936E-6,
    -8.10779857726094E-6, 1.51813341051959E-6, -7.87760495470523E-6,
    -8.98221562800916E-6, -8.95350351040864E-6, -1.67528222440608E-6,
    -3.35813702090062E-6, -1.56365960934959E-6, -1.99051807890127E-6,
    -7.83905374360127E-7, -7.3380357449222E-6, -7.06098663831913E-6,
    -7.0942603556574E-6, -7.10922410982761E-6, -8.202343740838E-6,
    -2.06718365604139E-6, -2.04557482415287E-6, -7.13556573104708E-6,
    -7.10529484568225E-6, 2.84697538601639E-6, 3.41209427067561E-6,
    1.49792165476797E-6, 8.80681095345216E-7, 1.56104545258707E-6,
    -7.24532807534066E-6, -7.83164691877368E-6, 1.13176244588221E-5,
    1.13512733245249E-5, -1.56937856385109E-6, 1.10676017892016E-6,
    1.09939208530927E-6, 1.10007391604188E-6, 4.99350940604835E-7,
    -1.23215128890582E-6, 1.61874116084912E-7, -2.87203770465389E-7,
    -7.47781235336604E-7, -7.44044030025222E-7, 4.08008324238002E-7,
    -2.64504217617491E-6, -1.62103647538862E-6, 9.15471079405683E-6,
    -8.02576110064316E-6, -8.00229197692554E-6, 7.05552958784636E-6,
    -2.96523324898979E-6, -9.89366417988833E-7, -6.52189798153403E-7,
    -8.34088673666771E-6, -8.35854850355459E-6, -8.37010719420987E-6,
    8.79013828433968E-6, 4.06875275369261E-6, -3.87568877620457E-6,
    -3.8574791841608E-6, -3.83282079067345E-6, -4.1013897790703E-7,
    5.89068838141994E-7, 5.88629672966714E-7, -3.28631683403673E-6,
    -3.2853927731843E-6, 1.13445611106354E-7, -1.18726926743903E-6,
    4.91916639690843E-6, 4.89097341034667E-6, 4.88199122572667E-6,
    1.1018627110693E-5, 1.10456943763345E-5, 1.106484369677E-5,
    1.41932531759034E-6, -2.92962681466688E-7, -2.95666787562288E-7, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 22.0, 23.0, 24.0, 24.0, 22.0, 23.0, 23.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 23.0, 24.0, 25.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 25.0, 26.0, 26.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 23.0, 24.0, 25.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 20.0, 20.0, 23.0, 24.0, 25.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 26.0, 26.0, 25.0, 27.0, 27.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    21.0, 22.0, 24.0, 24.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 26.0, 29.0, 16.0, 13.0, 0.0, 0.0,
    0.0, 29.0, 29.0, 29.0, 23.0, 24.0, 25.0, 24.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 24.0, 25.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0, 26.0, 28.0,
    28.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.0, 29.0, 30.0, 27.0, 28.0, 28.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.0, 24.0, 24.0, 24.0, 25.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.0, 27.0, 28.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 2.0, 0.0, 0.0,
    0.0, 16.0, 16.0, 16.0, 0.0, 24.0, 24.0, 25.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 25.0, 25.0, 27.0, 27.0, 28.0, 6.0, 0.0, 0.0, 28.0, 29.0, 29.0, 0.0, 0.0,
    0.0, 5.0, 6.0, 0.0, 0.0, 0.0, 2.0, 6.0, 7.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0,
    4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 22.0, 22.0, 14.0, 13.0, 12.0,
    0.0, 0.0, 0.0, 27.0, 29.0, 29.0, 22.0, 22.0, 23.0, 0.0, 0.0, 0.0, 26.0, 27.0,
    28.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 23.0, 25.0, 25.0, 25.0, 0.0, 0.0, 0.0, 26.0,
    26.0, 0.0, 0.0, 0.0, 0.0, 11.0, 0.0, 0.0, 26.0, 26.0, 26.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 28.0, 29.0, 25.0, 29.0, 31.0, 0.0, 0.0, 8.0, 0.0, 0.0, 29.0,
    31.0, 31.0, 23.0, 23.0, 24.0, 24.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0,
    21.0, 22.0, 22.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 21.0, 22.0, 22.0, 0.0,
    0.0, 0.0, 32.0, 34.0, 23.0, 23.0, 23.0, 21.0, 20.0, 20.0, 14.0, 7.0, 5.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 4.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 25.0, 27.0, 27.0, 27.0, 0.0, 0.0, 26.0, 28.0, 28.0,
    24.0, 26.0, 26.0, 26.0, 0.0, 0.0, 0.0, 0.0, 28.0, 28.0, 28.0, 30.0, 33.0,
    34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 28.0, 28.0, 30.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.0, 25.0, 25.0, 24.0, 24.0, 18.0, 30.0, 32.0,
    33.0, 0.0, 0.0, 0.0, 7.0, 5.0, 27.0, 28.0, 28.0, 0.0, 0.0, 0.0, 3.0, 4.0,
    0.0, 27.0, 11.0, 9.0, 7.0, 23.0, 24.0, 24.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  double dist[278];
  int c_k;
  double s;
  double b_tY[3];
  emxArray_real_T *varargin_1;
  boolean_T exitg1;
  for (k = 0; k <= 277; k += 2) {
    if (tY[k] <= tY[k + 1]) {
      idx[k] = k + 1;
      idx[k + 1] = k + 2;
    } else {
      idx[k] = k + 2;
      idx[k + 1] = k + 1;
    }
  }

  i = 2;
  while (i < 278) {
    khi = i << 1;
    j = 1;
    for (pEnd = 1 + i; pEnd < 279; pEnd = qEnd + i) {
      p = j;
      nb = pEnd;
      qEnd = j + khi;
      if (qEnd > 279) {
        qEnd = 279;
      }

      k = 0;
      kEnd = qEnd - j;
      while (k + 1 <= kEnd) {
        if (tY[idx[p - 1] - 1] <= tY[idx[nb - 1] - 1]) {
          iwork[k] = idx[p - 1];
          p++;
          if (p == pEnd) {
            while (nb < qEnd) {
              k++;
              iwork[k] = idx[nb - 1];
              nb++;
            }
          }
        } else {
          iwork[k] = idx[nb - 1];
          nb++;
          if (nb == qEnd) {
            while (p < pEnd) {
              k++;
              iwork[k] = idx[p - 1];
              p++;
            }
          }
        }

        k++;
      }

      for (k = 0; k + 1 <= kEnd; k++) {
        idx[(j + k) - 1] = iwork[k];
      }

      j = qEnd;
    }

    i = khi;
  }

  emxInit_real_T1(&Uc, 1);
  i = Uc->size[0];
  Uc->size[0] = 278;
  emxEnsureCapacity((emxArray__common *)Uc, i, (int)sizeof(double));
  for (k = 0; k < 278; k++) {
    Uc->data[k] = tY[idx[k] - 1];
  }

  count_nonfinites(Uc, 278, &k, &khi, &pEnd, &p);
  nb = -1;
  if (k > 0) {
    nb = 0;
  }

  khi += k;
  while (k + 1 <= khi) {
    i = (int)Uc->data[k];
    do {
      exitg2 = 0;
      k++;
      if (k + 1 > khi) {
        exitg2 = 1;
      } else {
        b_p = (std::fabs((double)i - Uc->data[k]) < eps((double)i / 2.0));
        if (!b_p) {
          exitg2 = 1;
        }
      }
    } while (exitg2 == 0);

    nb++;
    Uc->data[nb] = i;
  }

  if (pEnd > 0) {
    nb++;
    Uc->data[nb] = Uc->data[khi];
  }

  k = khi + pEnd;
  for (j = 1; j <= p; j++) {
    nb++;
    Uc->data[nb] = Uc->data[(k + j) - 1];
  }

  i = Uc->size[0];
  if (1 > nb + 1) {
    i0 = -1;
  } else {
    i0 = nb;
  }

  Uc->size[0] = i0 + 1;
  emxEnsureCapacity((emxArray__common *)Uc, i, (int)sizeof(double));
  for (i = 0; i < 278; i++) {
    for (khi = 0; khi < 22; khi++) {
      x[i + 278 * khi] = tX[i + 278 * khi] - tsX[khi];
    }
  }

  for (b_k = 1; b_k < 6117; b_k++) {
    c_k = b_k;
    y[c_k - 1] = x[c_k - 1] * x[c_k - 1];
  }

  for (j = 0; j < 278; j++) {
    s = y[j];
    for (k = 0; k < 21; k++) {
      s += y[j + (k + 1) * 278];
    }

    dist[j] = s;
  }

  sort(dist, idx);
  for (i = 0; i < 3; i++) {
    b_tY[i] = tY[idx[i] - 1];
  }

  emxInit_real_T(&varargin_1, 2);
  hist(b_tY, Uc, varargin_1);
  khi = 1;
  i = varargin_1->size[1];
  s = varargin_1->data[0];
  pEnd = 0;
  if (varargin_1->size[1] > 1) {
    if (rtIsNaN(varargin_1->data[0])) {
      p = 2;
      exitg1 = false;
      while ((!exitg1) && (p <= i)) {
        khi = p;
        if (!rtIsNaN(varargin_1->data[p - 1])) {
          s = varargin_1->data[p - 1];
          pEnd = p - 1;
          exitg1 = true;
        } else {
          p++;
        }
      }
    }

    if (khi < varargin_1->size[1]) {
      while (khi + 1 <= i) {
        if (varargin_1->data[khi] > s) {
          s = varargin_1->data[khi];
          pEnd = khi;
        }

        khi++;
      }
    }
  }

  emxFree_real_T(&varargin_1);
  yfit = Uc->data[pEnd];
  emxFree_real_T(&Uc);
  return yfit;
}

//
// Arguments    : int idx[278]
//                double x[278]
//                int offset
//                int np
//                int nq
//                int iwork[278]
//                double xwork[278]
// Return Type  : void
//
static void merge(int idx[278], double x[278], int offset, int np, int nq, int
                  iwork[278], double xwork[278])
{
  int n;
  int qend;
  int p;
  int iout;
  int exitg1;
  if ((np == 0) || (nq == 0)) {
  } else {
    n = np + nq;
    for (qend = 0; qend + 1 <= n; qend++) {
      iwork[qend] = idx[offset + qend];
      xwork[qend] = x[offset + qend];
    }

    p = 0;
    n = np;
    qend = np + nq;
    iout = offset - 1;
    do {
      exitg1 = 0;
      iout++;
      if (xwork[p] <= xwork[n]) {
        idx[iout] = iwork[p];
        x[iout] = xwork[p];
        if (p + 1 < np) {
          p++;
        } else {
          exitg1 = 1;
        }
      } else {
        idx[iout] = iwork[n];
        x[iout] = xwork[n];
        if (n + 1 < qend) {
          n++;
        } else {
          n = iout - p;
          while (p + 1 <= np) {
            idx[(n + p) + 1] = iwork[p];
            x[(n + p) + 1] = xwork[p];
            p++;
          }

          exitg1 = 1;
        }
      }
    } while (exitg1 == 0);
  }
}

//
// Arguments    : int idx[278]
//                double x[278]
//                int offset
//                int n
//                int preSortLevel
//                int iwork[278]
//                double xwork[278]
// Return Type  : void
//
static void merge_block(int idx[278], double x[278], int offset, int n, int
  preSortLevel, int iwork[278], double xwork[278])
{
  int nPairs;
  int bLen;
  int tailOffset;
  int nTail;
  nPairs = n >> preSortLevel;
  bLen = 1 << preSortLevel;
  while (nPairs > 1) {
    if ((nPairs & 1) != 0) {
      nPairs--;
      tailOffset = bLen * nPairs;
      nTail = n - tailOffset;
      if (nTail > bLen) {
        merge(idx, x, offset + tailOffset, bLen, nTail - bLen, iwork, xwork);
      }
    }

    tailOffset = bLen << 1;
    nPairs >>= 1;
    for (nTail = 1; nTail <= nPairs; nTail++) {
      merge(idx, x, offset + (nTail - 1) * tailOffset, bLen, bLen, iwork, xwork);
    }

    bLen = tailOffset;
  }

  if (n > bLen) {
    merge(idx, x, offset, bLen, n - bLen, iwork, xwork);
  }
}

//
// Arguments    : int idx[278]
//                double x[278]
//                int offset
// Return Type  : void
//
static void merge_pow2_block(int idx[278], double x[278], int offset)
{
  int iwork[256];
  double xwork[256];
  int b;
  int bLen;
  int bLen2;
  int nPairs;
  int k;
  int blockOffset;
  int q;
  int p;
  int exitg1;
  for (b = 0; b < 6; b++) {
    bLen = 1 << (b + 2);
    bLen2 = bLen << 1;
    nPairs = 256 >> (b + 3);
    for (k = 1; k <= nPairs; k++) {
      blockOffset = (offset + (k - 1) * bLen2) - 1;
      for (q = 1; q <= bLen2; q++) {
        iwork[q - 1] = idx[blockOffset + q];
        xwork[q - 1] = x[blockOffset + q];
      }

      p = 0;
      q = bLen;
      do {
        exitg1 = 0;
        blockOffset++;
        if (xwork[p] <= xwork[q]) {
          idx[blockOffset] = iwork[p];
          x[blockOffset] = xwork[p];
          if (p + 1 < bLen) {
            p++;
          } else {
            exitg1 = 1;
          }
        } else {
          idx[blockOffset] = iwork[q];
          x[blockOffset] = xwork[q];
          if (q + 1 < bLen2) {
            q++;
          } else {
            q = blockOffset - p;
            while (p + 1 <= bLen) {
              idx[(q + p) + 1] = iwork[p];
              x[(q + p) + 1] = xwork[p];
              p++;
            }

            exitg1 = 1;
          }
        }
      } while (exitg1 == 0);
    }
  }
}

//
// Arguments    : int *k
//                const emxArray_real_T *x
// Return Type  : double
//
static double skip_to_last_equal_value(int *k, const emxArray_real_T *x)
{
  double xk;
  boolean_T exitg1;
  boolean_T p;
  xk = x->data[*k - 1];
  exitg1 = false;
  while ((!exitg1) && (*k < x->size[0])) {
    if ((std::fabs(xk - x->data[*k]) < eps(xk / 2.0)) || (rtIsInf(x->data[*k]) &&
         rtIsInf(xk) && ((x->data[*k] > 0.0) == (xk > 0.0)))) {
      p = true;
    } else {
      p = false;
    }

    if (p) {
      (*k)++;
    } else {
      exitg1 = true;
    }
  }

  return xk;
}

//
// Arguments    : double x[278]
//                int idx[278]
// Return Type  : void
//
static void sort(double x[278], int idx[278])
{
  double x4[4];
  short idx4[4];
  int m;
  double xwork[278];
  int nNaNs;
  int ib;
  int k;
  signed char perm[4];
  int iwork[278];
  int i2;
  int i3;
  int i4;
  memset(&idx[0], 0, 278U * sizeof(int));
  for (m = 0; m < 4; m++) {
    x4[m] = 0.0;
    idx4[m] = 0;
  }

  memset(&xwork[0], 0, 278U * sizeof(double));
  nNaNs = -277;
  ib = 0;
  for (k = 0; k < 278; k++) {
    if (rtIsNaN(x[k])) {
      idx[-nNaNs] = k + 1;
      xwork[-nNaNs] = x[k];
      nNaNs++;
    } else {
      ib++;
      idx4[ib - 1] = (short)(k + 1);
      x4[ib - 1] = x[k];
      if (ib == 4) {
        ib = (k - nNaNs) - 280;
        if (x4[0] <= x4[1]) {
          m = 1;
          i2 = 2;
        } else {
          m = 2;
          i2 = 1;
        }

        if (x4[2] <= x4[3]) {
          i3 = 3;
          i4 = 4;
        } else {
          i3 = 4;
          i4 = 3;
        }

        if (x4[m - 1] <= x4[i3 - 1]) {
          if (x4[i2 - 1] <= x4[i3 - 1]) {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i2;
            perm[2] = (signed char)i3;
            perm[3] = (signed char)i4;
          } else if (x4[i2 - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i3;
            perm[2] = (signed char)i2;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)m;
            perm[1] = (signed char)i3;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)i2;
          }
        } else if (x4[m - 1] <= x4[i4 - 1]) {
          if (x4[i2 - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)i3;
            perm[1] = (signed char)m;
            perm[2] = (signed char)i2;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)i3;
            perm[1] = (signed char)m;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)i2;
          }
        } else {
          perm[0] = (signed char)i3;
          perm[1] = (signed char)i4;
          perm[2] = (signed char)m;
          perm[3] = (signed char)i2;
        }

        idx[ib] = idx4[perm[0] - 1];
        idx[ib + 1] = idx4[perm[1] - 1];
        idx[ib + 2] = idx4[perm[2] - 1];
        idx[ib + 3] = idx4[perm[3] - 1];
        x[ib] = x4[perm[0] - 1];
        x[ib + 1] = x4[perm[1] - 1];
        x[ib + 2] = x4[perm[2] - 1];
        x[ib + 3] = x4[perm[3] - 1];
        ib = 0;
      }
    }
  }

  if (ib > 0) {
    for (m = 0; m < 4; m++) {
      perm[m] = 0;
    }

    if (ib == 1) {
      perm[0] = 1;
    } else if (ib == 2) {
      if (x4[0] <= x4[1]) {
        perm[0] = 1;
        perm[1] = 2;
      } else {
        perm[0] = 2;
        perm[1] = 1;
      }
    } else if (x4[0] <= x4[1]) {
      if (x4[1] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 2;
        perm[2] = 3;
      } else if (x4[0] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 3;
        perm[2] = 2;
      } else {
        perm[0] = 3;
        perm[1] = 1;
        perm[2] = 2;
      }
    } else if (x4[0] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 1;
      perm[2] = 3;
    } else if (x4[1] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 3;
      perm[2] = 1;
    } else {
      perm[0] = 3;
      perm[1] = 2;
      perm[2] = 1;
    }

    for (k = 1; k <= ib; k++) {
      idx[(k - nNaNs) - ib] = idx4[perm[k - 1] - 1];
      x[(k - nNaNs) - ib] = x4[perm[k - 1] - 1];
    }
  }

  m = (nNaNs + 277) >> 1;
  for (k = 1; k <= m; k++) {
    ib = idx[k - nNaNs];
    idx[k - nNaNs] = idx[278 - k];
    idx[278 - k] = ib;
    x[k - nNaNs] = xwork[278 - k];
    x[278 - k] = xwork[k - nNaNs];
  }

  if (((nNaNs + 277) & 1) != 0) {
    x[(m - nNaNs) + 1] = xwork[(m - nNaNs) + 1];
  }

  memset(&iwork[0], 0, 278U * sizeof(int));
  m = 2;
  if (1 - nNaNs > 1) {
    ib = (1 - nNaNs) >> 8;
    if (ib > 0) {
      for (m = 1; m <= ib; m++) {
        merge_pow2_block(idx, x, (m - 1) << 8);
      }

      m = ib << 8;
      ib = 1 - (nNaNs + m);
      if (ib > 0) {
        merge_block(idx, x, m, ib, 2, iwork, xwork);
      }

      m = 8;
    }

    merge_block(idx, x, 0, 1 - nNaNs, m, iwork, xwork);
  }
}

//
// Arguments    : const emxArray_real_T *x
// Return Type  : double
//
static double trapz(const emxArray_real_T *x)
{
  double z;
  int iy;
  double ylast;
  int k;
  if (x->size[0] == 0) {
    z = 0.0;
  } else {
    z = 0.0;
    iy = 0;
    ylast = x->data[0];
    for (k = 0; k <= x->size[0] - 2; k++) {
      iy++;
      z += (ylast + x->data[iy]) / 2.0;
      ylast = x->data[iy];
    }
  }

  return z;
}

//
// classifyEOG Classifier for EOG directions, EOG Blinks
//    INPUTS
//  ch1 (Raw data) - last 4 seconds of data (1000dp)
//  ch2 (Raw data) - last 4 seconds of data (1000dp)
//    OUTPUTS
//  Y - K-Nearest Neighbor Fit of EOG Classification.
// %% CLASSES:
//  0- Null class (no threshold exceeded)
//  Classifier 2: Blink/Single Blink
//  1- TODO - Single Blink
//  2- TODO - Double Blink
//  Classifier 1: Directions
// %%%%%%%%%%%%%%%
//      (3)Up    %
// (4) <-|-> (5) %
//      (6)Down  %
// %%%%%%%%%%%%%%%
//  Initialize Constants:
//  Thresholds:
// Arguments    : const double ch1[1000]
//                const double ch2[1000]
// Return Type  : double
//
double EOGClassifier(const double ch1[1000], const double ch2[1000])
{
  double Y;
  double F[22];
  double F0[26];
  double mtmp;
  double d0;
  int ix;
  double y[1036];
  double dv0[7];
  double dv1[7];
  double a[6];
  static const double dv2[7] = { 0.00129953028712882, 0.0, -0.00389859086138647,
    0.0, 0.00389859086138647, 0.0, -0.001299530287129 };

  int ii;
  static const double dv3[7] = { 1.0, -5.52855503341017, 12.7497009825319,
    -15.7020189237831, 10.8934835499658, -4.03693878488703, 0.624328210166808 };

  double b_y[1036];
  static const double b_a[6] = { -0.0012998403321167991, -0.0012981262313379218,
    0.0025965116491606776, 0.0026013799814291558, -0.0013005883499336175,
    -0.0012993367172965836 };

  double c_y[1036];
  double d_y[1036];
  double e_y[1036];
  double f_y[1036];
  double dchf[1998];
  double maxval[2];
  emxArray_int32_T *b_ii;
  int idx;
  int b_ix;
  boolean_T exitg4;
  boolean_T exitg3;
  emxArray_int32_T *c_ii;
  boolean_T exitg2;
  boolean_T exitg1;
  emxArray_real_T *thresholdCheck2;

  //  UTH2 = 2.75E-4;
  // TODO: Change to lower number
  //  Load Training Data:
  //  Initialize Variables:
  memset(&F[0], 0, 22U * sizeof(double));
  memset(&F0[0], 0, 26U * sizeof(double));

  // %%OUTPUT Variable:
  Y = 0.0;

  // %%%TODO: REPLACE WITH COEFF FILT FOR MATLAB CODER:
  //  Filter Data:
  //  Butterworth Order 3 [0.15-9.5Hz] for EOG.
  mtmp = 2.0 * ch1[0];
  d0 = 2.0 * ch1[999];
  for (ix = 0; ix < 18; ix++) {
    y[ix] = mtmp - ch1[18 - ix];
  }

  memcpy(&y[18], &ch1[0], 1000U * sizeof(double));
  for (ix = 0; ix < 18; ix++) {
    y[ix + 1018] = d0 - ch1[998 - ix];
  }

  for (ix = 0; ix < 7; ix++) {
    dv0[ix] = dv2[ix];
    dv1[ix] = dv3[ix];
  }

  for (ii = 0; ii < 6; ii++) {
    a[ii] = b_a[ii] * y[0];
  }

  memcpy(&b_y[0], &y[0], 1036U * sizeof(double));
  filter(dv0, dv1, b_y, a, y);
  flipud(y);
  for (ix = 0; ix < 7; ix++) {
    dv0[ix] = dv2[ix];
    dv1[ix] = dv3[ix];
  }

  for (ii = 0; ii < 6; ii++) {
    a[ii] = b_a[ii] * y[0];
  }

  memcpy(&c_y[0], &y[0], 1036U * sizeof(double));
  filter(dv0, dv1, c_y, a, y);
  flipud(y);

  //  Butterworth Order 3 [0.15-9.5Hz] for EOG.
  mtmp = 2.0 * ch2[0];
  d0 = 2.0 * ch2[999];
  for (ix = 0; ix < 18; ix++) {
    d_y[ix] = mtmp - ch2[18 - ix];
  }

  memcpy(&d_y[18], &ch2[0], 1000U * sizeof(double));
  for (ix = 0; ix < 18; ix++) {
    d_y[ix + 1018] = d0 - ch2[998 - ix];
  }

  for (ix = 0; ix < 7; ix++) {
    dv0[ix] = dv2[ix];
    dv1[ix] = dv3[ix];
  }

  for (ii = 0; ii < 6; ii++) {
    a[ii] = b_a[ii] * d_y[0];
  }

  memcpy(&e_y[0], &d_y[0], 1036U * sizeof(double));
  filter(dv0, dv1, e_y, a, d_y);
  flipud(d_y);
  for (ix = 0; ix < 7; ix++) {
    dv0[ix] = dv2[ix];
    dv1[ix] = dv3[ix];
  }

  for (ii = 0; ii < 6; ii++) {
    a[ii] = b_a[ii] * d_y[0];
  }

  memcpy(&f_y[0], &d_y[0], 1036U * sizeof(double));
  filter(dv0, dv1, f_y, a, d_y);
  flipud(d_y);
  memset(&dchf[0], 0, 1998U * sizeof(double));

  //  Take Differential:
  diff(*(double (*)[1000])&y[18], *(double (*)[999])&dchf[0]);
  diff(*(double (*)[1000])&d_y[18], *(double (*)[999])&dchf[999]);

  //  Plot ???
  //  Check If Threshold Exceeded:
  for (ii = 0; ii < 2; ii++) {
    ix = ii * 250 + 250;
    b_ix = ii * 250 + 1;
    mtmp = dchf[((ix - 250) % 250 + 999 * ((ix - 250) / 250)) + 749];
    if (rtIsNaN(dchf[((ix - 250) % 250 + 999 * ((ix - 250) / 250)) + 749])) {
      idx = b_ix;
      exitg4 = false;
      while ((!exitg4) && (idx + 1 <= ix)) {
        b_ix = idx + 1;
        if (!rtIsNaN(dchf[(idx % 250 + 999 * (idx / 250)) + 749])) {
          mtmp = dchf[(idx % 250 + 999 * (idx / 250)) + 749];
          exitg4 = true;
        } else {
          idx++;
        }
      }
    }

    if (b_ix < ix) {
      while (b_ix + 1 <= ix) {
        if (dchf[(b_ix % 250 + 999 * (b_ix / 250)) + 749] > mtmp) {
          mtmp = dchf[(b_ix % 250 + 999 * (b_ix / 250)) + 749];
        }

        b_ix++;
      }
    }

    maxval[ii] = mtmp;
  }

  emxInit_int32_T(&b_ii, 2);
  idx = 0;
  for (ix = 0; ix < 2; ix++) {
    ii = b_ii->size[0] * b_ii->size[1];
    b_ii->size[ix] = 1;
    emxEnsureCapacity((emxArray__common *)b_ii, ii, (int)sizeof(int));
  }

  ii = 1;
  exitg3 = false;
  while ((!exitg3) && (ii < 3)) {
    if (maxval[ii - 1] > 4.0E-5) {
      idx = 1;
      b_ii->data[0] = ii;
      exitg3 = true;
    } else {
      ii++;
    }
  }

  if (idx == 0) {
    ix = b_ii->size[0] * b_ii->size[1];
    b_ii->size[0] = 1;
    b_ii->size[1] = 0;
    emxEnsureCapacity((emxArray__common *)b_ii, ix, (int)sizeof(int));
  }

  // b_ii
  for (ii = 0; ii < 2; ii++) {
    ix = ii * 250 + 250;
    b_ix = ii * 250 + 1;
    mtmp = dchf[((ix - 250) % 250 + 999 * ((ix - 250) / 250)) + 749];
    if (rtIsNaN(dchf[((ix - 250) % 250 + 999 * ((ix - 250) / 250)) + 749])) {
      idx = b_ix;
      exitg2 = false;
      while ((!exitg2) && (idx + 1 <= ix)) {
        b_ix = idx + 1;
        if (!rtIsNaN(dchf[(idx % 250 + 999 * (idx / 250)) + 749])) {
          mtmp = dchf[(idx % 250 + 999 * (idx / 250)) + 749];
          exitg2 = true;
        } else {
          idx++;
        }
      }
    }

    if (b_ix < ix) {
      while (b_ix + 1 <= ix) {
        if (dchf[(b_ix % 250 + 999 * (b_ix / 250)) + 749] > mtmp) {
          mtmp = dchf[(b_ix % 250 + 999 * (b_ix / 250)) + 749];
        }

        b_ix++;
      }
    }

    maxval[ii] = mtmp;
  }

  emxInit_int32_T(&c_ii, 2);
  idx = 0;
  for (ix = 0; ix < 2; ix++) {
    ii = c_ii->size[0] * c_ii->size[1];
    c_ii->size[ix] = 1;
    emxEnsureCapacity((emxArray__common *)c_ii, ii, (int)sizeof(int));
  }

  ii = 1;
  exitg1 = false;
  while ((!exitg1) && (ii < 3)) {
    if (maxval[ii - 1] > 0.000325) {
      idx = 1;
      c_ii->data[0] = ii;
      exitg1 = true;
    } else {
      ii++;
    }
  }

  if (idx == 0) {
    ix = c_ii->size[0] * c_ii->size[1];
    c_ii->size[0] = 1;
    c_ii->size[1] = 0;
    emxEnsureCapacity((emxArray__common *)c_ii, ix, (int)sizeof(int));
  }

  emxInit_real_T(&thresholdCheck2, 2);
  ix = thresholdCheck2->size[0] * thresholdCheck2->size[1];
  thresholdCheck2->size[0] = 1;
  thresholdCheck2->size[1] = c_ii->size[1];
  emxEnsureCapacity((emxArray__common *)thresholdCheck2, ix, (int)sizeof(double));
  ii = c_ii->size[0] * c_ii->size[1];
  for (ix = 0; ix < ii; ix++) {
    thresholdCheck2->data[ix] = c_ii->data[ix];
  }

  emxFree_int32_T(&c_ii);

  //  > 2.75 E-4 ? 3.25
  if ((!(b_ii->size[1] == 0)) && (thresholdCheck2->size[1] == 0)) {
    //  Extract Features from Last Second of Data:
    featureExtractionEOG3(*(double (*)[250])&dchf[749], -5.0E-5, -0.000275,
                          4.0E-5, 0.000325, *(double (*)[11])&F[0]);
    featureExtractionEOG3(*(double (*)[250])&dchf[1748], -5.0E-5, -0.000275,
                          4.0E-5, 0.000325, *(double (*)[11])&F[11]);

    //  Run Through Classification:
    Y = knn(F);
  }

  emxFree_int32_T(&b_ii);

  //  Blink/Double Blink Classifier %{
  if (!(thresholdCheck2->size[1] == 0)) {
    //  thresholdCheck implied.
    featureExtractionEOG2(*(double (*)[250])&dchf[749], -5.0E-5, -0.000275,
                          0.000325, thresholdCheck2);
    for (ix = 0; ix < 13; ix++) {
      F0[ix] = thresholdCheck2->data[ix];
    }

    featureExtractionEOG2(*(double (*)[250])&dchf[1748], -5.0E-5, -0.000275,
                          0.000325, thresholdCheck2);
    for (ix = 0; ix < 13; ix++) {
      F0[13 + ix] = thresholdCheck2->data[ix];
    }

    //  Run Through KNN Classifier:
    Y = b_knn(F0);
  }

  emxFree_real_T(&thresholdCheck2);

  // }
  return Y;
}

//
// Arguments    : void
// Return Type  : void
//
void EOGClassifier_initialize()
{
  rt_InitInfAndNaN(8U);
}

//
// Arguments    : void
// Return Type  : void
//
void EOGClassifier_terminate()
{
}

//
// File trailer for EOGClassifier.cpp
//
// [EOF]
//
